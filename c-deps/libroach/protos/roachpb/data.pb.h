// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: roachpb/data.proto

#ifndef PROTOBUF_INCLUDED_roachpb_2fdata_2eproto
#define PROTOBUF_INCLUDED_roachpb_2fdata_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "roachpb/metadata.pb.h"
#include "storage/concurrency/lock/locking.pb.h"
#include "storage/engine/enginepb/mvcc.pb.h"
#include "storage/engine/enginepb/mvcc3.pb.h"
#include "util/hlc/timestamp.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto 

namespace protobuf_roachpb_2fdata_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[26];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_roachpb_2fdata_2eproto
namespace znbase {
namespace roachpb {
class AbortSpanEntry;
class AbortSpanEntryDefaultTypeInternal;
extern AbortSpanEntryDefaultTypeInternal _AbortSpanEntry_default_instance_;
class ChangeReplicasTrigger;
class ChangeReplicasTriggerDefaultTypeInternal;
extern ChangeReplicasTriggerDefaultTypeInternal _ChangeReplicasTrigger_default_instance_;
class Decimal;
class DecimalDefaultTypeInternal;
extern DecimalDefaultTypeInternal _Decimal_default_instance_;
class Intent;
class IntentDefaultTypeInternal;
extern IntentDefaultTypeInternal _Intent_default_instance_;
class Intent_SingleKeySpan;
class Intent_SingleKeySpanDefaultTypeInternal;
extern Intent_SingleKeySpanDefaultTypeInternal _Intent_SingleKeySpan_default_instance_;
class InternalCommitTrigger;
class InternalCommitTriggerDefaultTypeInternal;
extern InternalCommitTriggerDefaultTypeInternal _InternalCommitTrigger_default_instance_;
class KeyValue;
class KeyValueDefaultTypeInternal;
extern KeyValueDefaultTypeInternal _KeyValue_default_instance_;
class LeafTxnFinalState;
class LeafTxnFinalStateDefaultTypeInternal;
extern LeafTxnFinalStateDefaultTypeInternal _LeafTxnFinalState_default_instance_;
class LeafTxnInputState;
class LeafTxnInputStateDefaultTypeInternal;
extern LeafTxnInputStateDefaultTypeInternal _LeafTxnInputState_default_instance_;
class Lease;
class LeaseDefaultTypeInternal;
extern LeaseDefaultTypeInternal _Lease_default_instance_;
class LockAcquisition;
class LockAcquisitionDefaultTypeInternal;
extern LockAcquisitionDefaultTypeInternal _LockAcquisition_default_instance_;
class LockUpdate;
class LockUpdateDefaultTypeInternal;
extern LockUpdateDefaultTypeInternal _LockUpdate_default_instance_;
class MergeTrigger;
class MergeTriggerDefaultTypeInternal;
extern MergeTriggerDefaultTypeInternal _MergeTrigger_default_instance_;
class ModifiedSpanTrigger;
class ModifiedSpanTriggerDefaultTypeInternal;
extern ModifiedSpanTriggerDefaultTypeInternal _ModifiedSpanTrigger_default_instance_;
class NullValue;
class NullValueDefaultTypeInternal;
extern NullValueDefaultTypeInternal _NullValue_default_instance_;
class ObservedTimestamp;
class ObservedTimestampDefaultTypeInternal;
extern ObservedTimestampDefaultTypeInternal _ObservedTimestamp_default_instance_;
class SequencedWrite;
class SequencedWriteDefaultTypeInternal;
extern SequencedWriteDefaultTypeInternal _SequencedWrite_default_instance_;
class Span;
class SpanDefaultTypeInternal;
extern SpanDefaultTypeInternal _Span_default_instance_;
class SplitTrigger;
class SplitTriggerDefaultTypeInternal;
extern SplitTriggerDefaultTypeInternal _SplitTrigger_default_instance_;
class StoreIdent;
class StoreIdentDefaultTypeInternal;
extern StoreIdentDefaultTypeInternal _StoreIdent_default_instance_;
class Transaction;
class TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class TransactionRecord;
class TransactionRecordDefaultTypeInternal;
extern TransactionRecordDefaultTypeInternal _TransactionRecord_default_instance_;
class TxnCoordMeta;
class TxnCoordMetaDefaultTypeInternal;
extern TxnCoordMetaDefaultTypeInternal _TxnCoordMeta_default_instance_;
class Value;
class ValueDefaultTypeInternal;
extern ValueDefaultTypeInternal _Value_default_instance_;
class VecResults;
class VecResultsDefaultTypeInternal;
extern VecResultsDefaultTypeInternal _VecResults_default_instance_;
class VecValue;
class VecValueDefaultTypeInternal;
extern VecValueDefaultTypeInternal _VecValue_default_instance_;
}  // namespace roachpb
}  // namespace znbase
namespace google {
namespace protobuf {
template<> ::znbase::roachpb::AbortSpanEntry* Arena::CreateMaybeMessage<::znbase::roachpb::AbortSpanEntry>(Arena*);
template<> ::znbase::roachpb::ChangeReplicasTrigger* Arena::CreateMaybeMessage<::znbase::roachpb::ChangeReplicasTrigger>(Arena*);
template<> ::znbase::roachpb::Decimal* Arena::CreateMaybeMessage<::znbase::roachpb::Decimal>(Arena*);
template<> ::znbase::roachpb::Intent* Arena::CreateMaybeMessage<::znbase::roachpb::Intent>(Arena*);
template<> ::znbase::roachpb::Intent_SingleKeySpan* Arena::CreateMaybeMessage<::znbase::roachpb::Intent_SingleKeySpan>(Arena*);
template<> ::znbase::roachpb::InternalCommitTrigger* Arena::CreateMaybeMessage<::znbase::roachpb::InternalCommitTrigger>(Arena*);
template<> ::znbase::roachpb::KeyValue* Arena::CreateMaybeMessage<::znbase::roachpb::KeyValue>(Arena*);
template<> ::znbase::roachpb::LeafTxnFinalState* Arena::CreateMaybeMessage<::znbase::roachpb::LeafTxnFinalState>(Arena*);
template<> ::znbase::roachpb::LeafTxnInputState* Arena::CreateMaybeMessage<::znbase::roachpb::LeafTxnInputState>(Arena*);
template<> ::znbase::roachpb::Lease* Arena::CreateMaybeMessage<::znbase::roachpb::Lease>(Arena*);
template<> ::znbase::roachpb::LockAcquisition* Arena::CreateMaybeMessage<::znbase::roachpb::LockAcquisition>(Arena*);
template<> ::znbase::roachpb::LockUpdate* Arena::CreateMaybeMessage<::znbase::roachpb::LockUpdate>(Arena*);
template<> ::znbase::roachpb::MergeTrigger* Arena::CreateMaybeMessage<::znbase::roachpb::MergeTrigger>(Arena*);
template<> ::znbase::roachpb::ModifiedSpanTrigger* Arena::CreateMaybeMessage<::znbase::roachpb::ModifiedSpanTrigger>(Arena*);
template<> ::znbase::roachpb::NullValue* Arena::CreateMaybeMessage<::znbase::roachpb::NullValue>(Arena*);
template<> ::znbase::roachpb::ObservedTimestamp* Arena::CreateMaybeMessage<::znbase::roachpb::ObservedTimestamp>(Arena*);
template<> ::znbase::roachpb::SequencedWrite* Arena::CreateMaybeMessage<::znbase::roachpb::SequencedWrite>(Arena*);
template<> ::znbase::roachpb::Span* Arena::CreateMaybeMessage<::znbase::roachpb::Span>(Arena*);
template<> ::znbase::roachpb::SplitTrigger* Arena::CreateMaybeMessage<::znbase::roachpb::SplitTrigger>(Arena*);
template<> ::znbase::roachpb::StoreIdent* Arena::CreateMaybeMessage<::znbase::roachpb::StoreIdent>(Arena*);
template<> ::znbase::roachpb::Transaction* Arena::CreateMaybeMessage<::znbase::roachpb::Transaction>(Arena*);
template<> ::znbase::roachpb::TransactionRecord* Arena::CreateMaybeMessage<::znbase::roachpb::TransactionRecord>(Arena*);
template<> ::znbase::roachpb::TxnCoordMeta* Arena::CreateMaybeMessage<::znbase::roachpb::TxnCoordMeta>(Arena*);
template<> ::znbase::roachpb::Value* Arena::CreateMaybeMessage<::znbase::roachpb::Value>(Arena*);
template<> ::znbase::roachpb::VecResults* Arena::CreateMaybeMessage<::znbase::roachpb::VecResults>(Arena*);
template<> ::znbase::roachpb::VecValue* Arena::CreateMaybeMessage<::znbase::roachpb::VecValue>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace znbase {
namespace roachpb {

enum ValueType {
  UNKNOWN = 0,
  INT = 1,
  FLOAT = 2,
  BYTES = 3,
  DELIMITED_BYTES = 8,
  TIME = 4,
  DECIMAL = 5,
  DELIMITED_DECIMAL = 9,
  DURATION = 6,
  TUPLE = 10,
  BITARRAY = 11,
  TIMESERIES = 100,
  ValueType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ValueType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ValueType_IsValid(int value);
const ValueType ValueType_MIN = UNKNOWN;
const ValueType ValueType_MAX = TIMESERIES;
const int ValueType_ARRAYSIZE = ValueType_MAX + 1;

enum ReplicaChangeType {
  ADD_REPLICA = 0,
  REMOVE_REPLICA = 1,
  ReplicaChangeType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ReplicaChangeType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ReplicaChangeType_IsValid(int value);
const ReplicaChangeType ReplicaChangeType_MIN = ADD_REPLICA;
const ReplicaChangeType ReplicaChangeType_MAX = REMOVE_REPLICA;
const int ReplicaChangeType_ARRAYSIZE = ReplicaChangeType_MAX + 1;

enum TransactionStatus {
  PENDING = 0,
  STAGING = 3,
  COMMITTED = 1,
  ABORTED = 2,
  TransactionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TransactionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TransactionStatus_IsValid(int value);
const TransactionStatus TransactionStatus_MIN = PENDING;
const TransactionStatus TransactionStatus_MAX = STAGING;
const int TransactionStatus_ARRAYSIZE = TransactionStatus_MAX + 1;

// ===================================================================

class Span : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:znbase.roachpb.Span) */ {
 public:
  Span();
  virtual ~Span();

  Span(const Span& from);

  inline Span& operator=(const Span& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Span(Span&& from) noexcept
    : Span() {
    *this = ::std::move(from);
  }

  inline Span& operator=(Span&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Span& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Span* internal_default_instance() {
    return reinterpret_cast<const Span*>(
               &_Span_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Span* other);
  friend void swap(Span& a, Span& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Span* New() const final {
    return CreateMaybeMessage<Span>(NULL);
  }

  Span* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Span>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Span& from);
  void MergeFrom(const Span& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Span* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  void clear_key();
  static const int kKeyFieldNumber = 3;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  void clear_end_key();
  static const int kEndKeyFieldNumber = 4;
  const ::std::string& end_key() const;
  void set_end_key(const ::std::string& value);
  #if LANG_CXX11
  void set_end_key(::std::string&& value);
  #endif
  void set_end_key(const char* value);
  void set_end_key(const void* value, size_t size);
  ::std::string* mutable_end_key();
  ::std::string* release_end_key();
  void set_allocated_end_key(::std::string* end_key);

  // @@protoc_insertion_point(class_scope:znbase.roachpb.Span)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr end_key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Value : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:znbase.roachpb.Value) */ {
 public:
  Value();
  virtual ~Value();

  Value(const Value& from);

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Value(Value&& from) noexcept
    : Value() {
    *this = ::std::move(from);
  }

  inline Value& operator=(Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Value& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Value* internal_default_instance() {
    return reinterpret_cast<const Value*>(
               &_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Value* other);
  friend void swap(Value& a, Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Value* New() const final {
    return CreateMaybeMessage<Value>(NULL);
  }

  Value* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Value>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Value& from);
  void MergeFrom(const Value& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes raw_bytes = 1;
  void clear_raw_bytes();
  static const int kRawBytesFieldNumber = 1;
  const ::std::string& raw_bytes() const;
  void set_raw_bytes(const ::std::string& value);
  #if LANG_CXX11
  void set_raw_bytes(::std::string&& value);
  #endif
  void set_raw_bytes(const char* value);
  void set_raw_bytes(const void* value, size_t size);
  ::std::string* mutable_raw_bytes();
  ::std::string* release_raw_bytes();
  void set_allocated_raw_bytes(::std::string* raw_bytes);

  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  private:
  const ::znbase::util::hlc::Timestamp& _internal_timestamp() const;
  public:
  const ::znbase::util::hlc::Timestamp& timestamp() const;
  ::znbase::util::hlc::Timestamp* release_timestamp();
  ::znbase::util::hlc::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::znbase::util::hlc::Timestamp* timestamp);

  // @@protoc_insertion_point(class_scope:znbase.roachpb.Value)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr raw_bytes_;
  ::znbase::util::hlc::Timestamp* timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class KeyValue : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:znbase.roachpb.KeyValue) */ {
 public:
  KeyValue();
  virtual ~KeyValue();

  KeyValue(const KeyValue& from);

  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KeyValue(KeyValue&& from) noexcept
    : KeyValue() {
    *this = ::std::move(from);
  }

  inline KeyValue& operator=(KeyValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const KeyValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyValue* internal_default_instance() {
    return reinterpret_cast<const KeyValue*>(
               &_KeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(KeyValue* other);
  friend void swap(KeyValue& a, KeyValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KeyValue* New() const final {
    return CreateMaybeMessage<KeyValue>(NULL);
  }

  KeyValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KeyValue>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const KeyValue& from);
  void MergeFrom(const KeyValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KeyValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  private:
  const ::znbase::roachpb::Value& _internal_value() const;
  public:
  const ::znbase::roachpb::Value& value() const;
  ::znbase::roachpb::Value* release_value();
  ::znbase::roachpb::Value* mutable_value();
  void set_allocated_value(::znbase::roachpb::Value* value);

  // @@protoc_insertion_point(class_scope:znbase.roachpb.KeyValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::znbase::roachpb::Value* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StoreIdent : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:znbase.roachpb.StoreIdent) */ {
 public:
  StoreIdent();
  virtual ~StoreIdent();

  StoreIdent(const StoreIdent& from);

  inline StoreIdent& operator=(const StoreIdent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StoreIdent(StoreIdent&& from) noexcept
    : StoreIdent() {
    *this = ::std::move(from);
  }

  inline StoreIdent& operator=(StoreIdent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const StoreIdent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoreIdent* internal_default_instance() {
    return reinterpret_cast<const StoreIdent*>(
               &_StoreIdent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(StoreIdent* other);
  friend void swap(StoreIdent& a, StoreIdent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StoreIdent* New() const final {
    return CreateMaybeMessage<StoreIdent>(NULL);
  }

  StoreIdent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StoreIdent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const StoreIdent& from);
  void MergeFrom(const StoreIdent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StoreIdent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 1;
  const ::std::string& cluster_id() const;
  void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_id(::std::string&& value);
  #endif
  void set_cluster_id(const char* value);
  void set_cluster_id(const void* value, size_t size);
  ::std::string* mutable_cluster_id();
  ::std::string* release_cluster_id();
  void set_allocated_cluster_id(::std::string* cluster_id);

  void clear_node_id();
  static const int kNodeIdFieldNumber = 2;
  ::google::protobuf::int32 node_id() const;
  void set_node_id(::google::protobuf::int32 value);

  void clear_store_id();
  static const int kStoreIdFieldNumber = 3;
  ::google::protobuf::int32 store_id() const;
  void set_store_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:znbase.roachpb.StoreIdent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::int32 node_id_;
  ::google::protobuf::int32 store_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SplitTrigger : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:znbase.roachpb.SplitTrigger) */ {
 public:
  SplitTrigger();
  virtual ~SplitTrigger();

  SplitTrigger(const SplitTrigger& from);

  inline SplitTrigger& operator=(const SplitTrigger& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SplitTrigger(SplitTrigger&& from) noexcept
    : SplitTrigger() {
    *this = ::std::move(from);
  }

  inline SplitTrigger& operator=(SplitTrigger&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SplitTrigger& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SplitTrigger* internal_default_instance() {
    return reinterpret_cast<const SplitTrigger*>(
               &_SplitTrigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SplitTrigger* other);
  friend void swap(SplitTrigger& a, SplitTrigger& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SplitTrigger* New() const final {
    return CreateMaybeMessage<SplitTrigger>(NULL);
  }

  SplitTrigger* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SplitTrigger>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SplitTrigger& from);
  void MergeFrom(const SplitTrigger& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SplitTrigger* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_left_desc() const;
  void clear_left_desc();
  static const int kLeftDescFieldNumber = 1;
  private:
  const ::znbase::roachpb::RangeDescriptor& _internal_left_desc() const;
  public:
  const ::znbase::roachpb::RangeDescriptor& left_desc() const;
  ::znbase::roachpb::RangeDescriptor* release_left_desc();
  ::znbase::roachpb::RangeDescriptor* mutable_left_desc();
  void set_allocated_left_desc(::znbase::roachpb::RangeDescriptor* left_desc);

  bool has_right_desc() const;
  void clear_right_desc();
  static const int kRightDescFieldNumber = 2;
  private:
  const ::znbase::roachpb::RangeDescriptor& _internal_right_desc() const;
  public:
  const ::znbase::roachpb::RangeDescriptor& right_desc() const;
  ::znbase::roachpb::RangeDescriptor* release_right_desc();
  ::znbase::roachpb::RangeDescriptor* mutable_right_desc();
  void set_allocated_right_desc(::znbase::roachpb::RangeDescriptor* right_desc);

  // @@protoc_insertion_point(class_scope:znbase.roachpb.SplitTrigger)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::znbase::roachpb::RangeDescriptor* left_desc_;
  ::znbase::roachpb::RangeDescriptor* right_desc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MergeTrigger : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:znbase.roachpb.MergeTrigger) */ {
 public:
  MergeTrigger();
  virtual ~MergeTrigger();

  MergeTrigger(const MergeTrigger& from);

  inline MergeTrigger& operator=(const MergeTrigger& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MergeTrigger(MergeTrigger&& from) noexcept
    : MergeTrigger() {
    *this = ::std::move(from);
  }

  inline MergeTrigger& operator=(MergeTrigger&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MergeTrigger& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MergeTrigger* internal_default_instance() {
    return reinterpret_cast<const MergeTrigger*>(
               &_MergeTrigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(MergeTrigger* other);
  friend void swap(MergeTrigger& a, MergeTrigger& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MergeTrigger* New() const final {
    return CreateMaybeMessage<MergeTrigger>(NULL);
  }

  MergeTrigger* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MergeTrigger>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MergeTrigger& from);
  void MergeFrom(const MergeTrigger& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MergeTrigger* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_left_desc() const;
  void clear_left_desc();
  static const int kLeftDescFieldNumber = 1;
  private:
  const ::znbase::roachpb::RangeDescriptor& _internal_left_desc() const;
  public:
  const ::znbase::roachpb::RangeDescriptor& left_desc() const;
  ::znbase::roachpb::RangeDescriptor* release_left_desc();
  ::znbase::roachpb::RangeDescriptor* mutable_left_desc();
  void set_allocated_left_desc(::znbase::roachpb::RangeDescriptor* left_desc);

  bool has_right_desc() const;
  void clear_right_desc();
  static const int kRightDescFieldNumber = 2;
  private:
  const ::znbase::roachpb::RangeDescriptor& _internal_right_desc() const;
  public:
  const ::znbase::roachpb::RangeDescriptor& right_desc() const;
  ::znbase::roachpb::RangeDescriptor* release_right_desc();
  ::znbase::roachpb::RangeDescriptor* mutable_right_desc();
  void set_allocated_right_desc(::znbase::roachpb::RangeDescriptor* right_desc);

  bool has_right_mvcc_stats() const;
  void clear_right_mvcc_stats();
  static const int kRightMvccStatsFieldNumber = 4;
  private:
  const ::znbase::storage::engine::enginepb::MVCCStats& _internal_right_mvcc_stats() const;
  public:
  const ::znbase::storage::engine::enginepb::MVCCStats& right_mvcc_stats() const;
  ::znbase::storage::engine::enginepb::MVCCStats* release_right_mvcc_stats();
  ::znbase::storage::engine::enginepb::MVCCStats* mutable_right_mvcc_stats();
  void set_allocated_right_mvcc_stats(::znbase::storage::engine::enginepb::MVCCStats* right_mvcc_stats);

  bool has_freeze_start() const;
  void clear_freeze_start();
  static const int kFreezeStartFieldNumber = 5;
  private:
  const ::znbase::util::hlc::Timestamp& _internal_freeze_start() const;
  public:
  const ::znbase::util::hlc::Timestamp& freeze_start() const;
  ::znbase::util::hlc::Timestamp* release_freeze_start();
  ::znbase::util::hlc::Timestamp* mutable_freeze_start();
  void set_allocated_freeze_start(::znbase::util::hlc::Timestamp* freeze_start);

  // @@protoc_insertion_point(class_scope:znbase.roachpb.MergeTrigger)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::znbase::roachpb::RangeDescriptor* left_desc_;
  ::znbase::roachpb::RangeDescriptor* right_desc_;
  ::znbase::storage::engine::enginepb::MVCCStats* right_mvcc_stats_;
  ::znbase::util::hlc::Timestamp* freeze_start_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChangeReplicasTrigger : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:znbase.roachpb.ChangeReplicasTrigger) */ {
 public:
  ChangeReplicasTrigger();
  virtual ~ChangeReplicasTrigger();

  ChangeReplicasTrigger(const ChangeReplicasTrigger& from);

  inline ChangeReplicasTrigger& operator=(const ChangeReplicasTrigger& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChangeReplicasTrigger(ChangeReplicasTrigger&& from) noexcept
    : ChangeReplicasTrigger() {
    *this = ::std::move(from);
  }

  inline ChangeReplicasTrigger& operator=(ChangeReplicasTrigger&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ChangeReplicasTrigger& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeReplicasTrigger* internal_default_instance() {
    return reinterpret_cast<const ChangeReplicasTrigger*>(
               &_ChangeReplicasTrigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ChangeReplicasTrigger* other);
  friend void swap(ChangeReplicasTrigger& a, ChangeReplicasTrigger& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChangeReplicasTrigger* New() const final {
    return CreateMaybeMessage<ChangeReplicasTrigger>(NULL);
  }

  ChangeReplicasTrigger* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChangeReplicasTrigger>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ChangeReplicasTrigger& from);
  void MergeFrom(const ChangeReplicasTrigger& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChangeReplicasTrigger* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  int updated_replicas_size() const;
  void clear_updated_replicas();
  static const int kUpdatedReplicasFieldNumber = 3;
  ::znbase::roachpb::ReplicaDescriptor* mutable_updated_replicas(int index);
  ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::ReplicaDescriptor >*
      mutable_updated_replicas();
  const ::znbase::roachpb::ReplicaDescriptor& updated_replicas(int index) const;
  ::znbase::roachpb::ReplicaDescriptor* add_updated_replicas();
  const ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::ReplicaDescriptor >&
      updated_replicas() const;

  bool has_replica() const;
  void clear_replica();
  static const int kReplicaFieldNumber = 2;
  private:
  const ::znbase::roachpb::ReplicaDescriptor& _internal_replica() const;
  public:
  const ::znbase::roachpb::ReplicaDescriptor& replica() const;
  ::znbase::roachpb::ReplicaDescriptor* release_replica();
  ::znbase::roachpb::ReplicaDescriptor* mutable_replica();
  void set_allocated_replica(::znbase::roachpb::ReplicaDescriptor* replica);

  // .znbase.roachpb.ReplicaChangeType change_type = 1;
  void clear_change_type();
  static const int kChangeTypeFieldNumber = 1;
  ::znbase::roachpb::ReplicaChangeType change_type() const;
  void set_change_type(::znbase::roachpb::ReplicaChangeType value);

  void clear_next_replica_id();
  static const int kNextReplicaIdFieldNumber = 4;
  ::google::protobuf::int32 next_replica_id() const;
  void set_next_replica_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:znbase.roachpb.ChangeReplicasTrigger)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::ReplicaDescriptor > updated_replicas_;
  ::znbase::roachpb::ReplicaDescriptor* replica_;
  int change_type_;
  ::google::protobuf::int32 next_replica_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ModifiedSpanTrigger : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:znbase.roachpb.ModifiedSpanTrigger) */ {
 public:
  ModifiedSpanTrigger();
  virtual ~ModifiedSpanTrigger();

  ModifiedSpanTrigger(const ModifiedSpanTrigger& from);

  inline ModifiedSpanTrigger& operator=(const ModifiedSpanTrigger& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ModifiedSpanTrigger(ModifiedSpanTrigger&& from) noexcept
    : ModifiedSpanTrigger() {
    *this = ::std::move(from);
  }

  inline ModifiedSpanTrigger& operator=(ModifiedSpanTrigger&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ModifiedSpanTrigger& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModifiedSpanTrigger* internal_default_instance() {
    return reinterpret_cast<const ModifiedSpanTrigger*>(
               &_ModifiedSpanTrigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ModifiedSpanTrigger* other);
  friend void swap(ModifiedSpanTrigger& a, ModifiedSpanTrigger& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModifiedSpanTrigger* New() const final {
    return CreateMaybeMessage<ModifiedSpanTrigger>(NULL);
  }

  ModifiedSpanTrigger* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ModifiedSpanTrigger>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ModifiedSpanTrigger& from);
  void MergeFrom(const ModifiedSpanTrigger& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModifiedSpanTrigger* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .znbase.roachpb.Span node_liveness_span = 2;
  bool has_node_liveness_span() const;
  void clear_node_liveness_span();
  static const int kNodeLivenessSpanFieldNumber = 2;
  private:
  const ::znbase::roachpb::Span& _internal_node_liveness_span() const;
  public:
  const ::znbase::roachpb::Span& node_liveness_span() const;
  ::znbase::roachpb::Span* release_node_liveness_span();
  ::znbase::roachpb::Span* mutable_node_liveness_span();
  void set_allocated_node_liveness_span(::znbase::roachpb::Span* node_liveness_span);

  // bool system_config_span = 1;
  void clear_system_config_span();
  static const int kSystemConfigSpanFieldNumber = 1;
  bool system_config_span() const;
  void set_system_config_span(bool value);

  // @@protoc_insertion_point(class_scope:znbase.roachpb.ModifiedSpanTrigger)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::znbase::roachpb::Span* node_liveness_span_;
  bool system_config_span_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InternalCommitTrigger : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:znbase.roachpb.InternalCommitTrigger) */ {
 public:
  InternalCommitTrigger();
  virtual ~InternalCommitTrigger();

  InternalCommitTrigger(const InternalCommitTrigger& from);

  inline InternalCommitTrigger& operator=(const InternalCommitTrigger& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InternalCommitTrigger(InternalCommitTrigger&& from) noexcept
    : InternalCommitTrigger() {
    *this = ::std::move(from);
  }

  inline InternalCommitTrigger& operator=(InternalCommitTrigger&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const InternalCommitTrigger& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InternalCommitTrigger* internal_default_instance() {
    return reinterpret_cast<const InternalCommitTrigger*>(
               &_InternalCommitTrigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(InternalCommitTrigger* other);
  friend void swap(InternalCommitTrigger& a, InternalCommitTrigger& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InternalCommitTrigger* New() const final {
    return CreateMaybeMessage<InternalCommitTrigger>(NULL);
  }

  InternalCommitTrigger* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InternalCommitTrigger>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const InternalCommitTrigger& from);
  void MergeFrom(const InternalCommitTrigger& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InternalCommitTrigger* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .znbase.roachpb.SplitTrigger split_trigger = 1;
  bool has_split_trigger() const;
  void clear_split_trigger();
  static const int kSplitTriggerFieldNumber = 1;
  private:
  const ::znbase::roachpb::SplitTrigger& _internal_split_trigger() const;
  public:
  const ::znbase::roachpb::SplitTrigger& split_trigger() const;
  ::znbase::roachpb::SplitTrigger* release_split_trigger();
  ::znbase::roachpb::SplitTrigger* mutable_split_trigger();
  void set_allocated_split_trigger(::znbase::roachpb::SplitTrigger* split_trigger);

  // .znbase.roachpb.MergeTrigger merge_trigger = 2;
  bool has_merge_trigger() const;
  void clear_merge_trigger();
  static const int kMergeTriggerFieldNumber = 2;
  private:
  const ::znbase::roachpb::MergeTrigger& _internal_merge_trigger() const;
  public:
  const ::znbase::roachpb::MergeTrigger& merge_trigger() const;
  ::znbase::roachpb::MergeTrigger* release_merge_trigger();
  ::znbase::roachpb::MergeTrigger* mutable_merge_trigger();
  void set_allocated_merge_trigger(::znbase::roachpb::MergeTrigger* merge_trigger);

  // .znbase.roachpb.ChangeReplicasTrigger change_replicas_trigger = 3;
  bool has_change_replicas_trigger() const;
  void clear_change_replicas_trigger();
  static const int kChangeReplicasTriggerFieldNumber = 3;
  private:
  const ::znbase::roachpb::ChangeReplicasTrigger& _internal_change_replicas_trigger() const;
  public:
  const ::znbase::roachpb::ChangeReplicasTrigger& change_replicas_trigger() const;
  ::znbase::roachpb::ChangeReplicasTrigger* release_change_replicas_trigger();
  ::znbase::roachpb::ChangeReplicasTrigger* mutable_change_replicas_trigger();
  void set_allocated_change_replicas_trigger(::znbase::roachpb::ChangeReplicasTrigger* change_replicas_trigger);

  // .znbase.roachpb.ModifiedSpanTrigger modified_span_trigger = 4;
  bool has_modified_span_trigger() const;
  void clear_modified_span_trigger();
  static const int kModifiedSpanTriggerFieldNumber = 4;
  private:
  const ::znbase::roachpb::ModifiedSpanTrigger& _internal_modified_span_trigger() const;
  public:
  const ::znbase::roachpb::ModifiedSpanTrigger& modified_span_trigger() const;
  ::znbase::roachpb::ModifiedSpanTrigger* release_modified_span_trigger();
  ::znbase::roachpb::ModifiedSpanTrigger* mutable_modified_span_trigger();
  void set_allocated_modified_span_trigger(::znbase::roachpb::ModifiedSpanTrigger* modified_span_trigger);

  // @@protoc_insertion_point(class_scope:znbase.roachpb.InternalCommitTrigger)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::znbase::roachpb::SplitTrigger* split_trigger_;
  ::znbase::roachpb::MergeTrigger* merge_trigger_;
  ::znbase::roachpb::ChangeReplicasTrigger* change_replicas_trigger_;
  ::znbase::roachpb::ModifiedSpanTrigger* modified_span_trigger_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ObservedTimestamp : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:znbase.roachpb.ObservedTimestamp) */ {
 public:
  ObservedTimestamp();
  virtual ~ObservedTimestamp();

  ObservedTimestamp(const ObservedTimestamp& from);

  inline ObservedTimestamp& operator=(const ObservedTimestamp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObservedTimestamp(ObservedTimestamp&& from) noexcept
    : ObservedTimestamp() {
    *this = ::std::move(from);
  }

  inline ObservedTimestamp& operator=(ObservedTimestamp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ObservedTimestamp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObservedTimestamp* internal_default_instance() {
    return reinterpret_cast<const ObservedTimestamp*>(
               &_ObservedTimestamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ObservedTimestamp* other);
  friend void swap(ObservedTimestamp& a, ObservedTimestamp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObservedTimestamp* New() const final {
    return CreateMaybeMessage<ObservedTimestamp>(NULL);
  }

  ObservedTimestamp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObservedTimestamp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ObservedTimestamp& from);
  void MergeFrom(const ObservedTimestamp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObservedTimestamp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  private:
  const ::znbase::util::hlc::Timestamp& _internal_timestamp() const;
  public:
  const ::znbase::util::hlc::Timestamp& timestamp() const;
  ::znbase::util::hlc::Timestamp* release_timestamp();
  ::znbase::util::hlc::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::znbase::util::hlc::Timestamp* timestamp);

  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  ::google::protobuf::int32 node_id() const;
  void set_node_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:znbase.roachpb.ObservedTimestamp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::znbase::util::hlc::Timestamp* timestamp_;
  ::google::protobuf::int32 node_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Transaction : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:znbase.roachpb.Transaction) */ {
 public:
  Transaction();
  virtual ~Transaction();

  Transaction(const Transaction& from);

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(Transaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Transaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Transaction* other);
  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transaction* New() const final {
    return CreateMaybeMessage<Transaction>(NULL);
  }

  Transaction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Transaction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  int observed_timestamps_size() const;
  void clear_observed_timestamps();
  static const int kObservedTimestampsFieldNumber = 8;
  ::znbase::roachpb::ObservedTimestamp* mutable_observed_timestamps(int index);
  ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::ObservedTimestamp >*
      mutable_observed_timestamps();
  const ::znbase::roachpb::ObservedTimestamp& observed_timestamps(int index) const;
  ::znbase::roachpb::ObservedTimestamp* add_observed_timestamps();
  const ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::ObservedTimestamp >&
      observed_timestamps() const;

  int lock_spans_size() const;
  void clear_lock_spans();
  static const int kLockSpansFieldNumber = 11;
  ::znbase::roachpb::Span* mutable_lock_spans(int index);
  ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::Span >*
      mutable_lock_spans();
  const ::znbase::roachpb::Span& lock_spans(int index) const;
  ::znbase::roachpb::Span* add_lock_spans();
  const ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::Span >&
      lock_spans() const;

  int in_flight_writes_size() const;
  void clear_in_flight_writes();
  static const int kInFlightWritesFieldNumber = 17;
  ::znbase::roachpb::SequencedWrite* mutable_in_flight_writes(int index);
  ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::SequencedWrite >*
      mutable_in_flight_writes();
  const ::znbase::roachpb::SequencedWrite& in_flight_writes(int index) const;
  ::znbase::roachpb::SequencedWrite* add_in_flight_writes();
  const ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::SequencedWrite >&
      in_flight_writes() const;

  int ignored_seqnums_size() const;
  void clear_ignored_seqnums();
  static const int kIgnoredSeqnumsFieldNumber = 18;
  ::znbase::storage::engine::enginepb::IgnoredSeqNumRange* mutable_ignored_seqnums(int index);
  ::google::protobuf::RepeatedPtrField< ::znbase::storage::engine::enginepb::IgnoredSeqNumRange >*
      mutable_ignored_seqnums();
  const ::znbase::storage::engine::enginepb::IgnoredSeqNumRange& ignored_seqnums(int index) const;
  ::znbase::storage::engine::enginepb::IgnoredSeqNumRange* add_ignored_seqnums();
  const ::google::protobuf::RepeatedPtrField< ::znbase::storage::engine::enginepb::IgnoredSeqNumRange >&
      ignored_seqnums() const;

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  bool has_meta() const;
  void clear_meta();
  static const int kMetaFieldNumber = 1;
  private:
  const ::znbase::storage::engine::enginepb::TxnMeta& _internal_meta() const;
  public:
  const ::znbase::storage::engine::enginepb::TxnMeta& meta() const;
  ::znbase::storage::engine::enginepb::TxnMeta* release_meta();
  ::znbase::storage::engine::enginepb::TxnMeta* mutable_meta();
  void set_allocated_meta(::znbase::storage::engine::enginepb::TxnMeta* meta);

  bool has_last_heartbeat() const;
  void clear_last_heartbeat();
  static const int kLastHeartbeatFieldNumber = 5;
  private:
  const ::znbase::util::hlc::Timestamp& _internal_last_heartbeat() const;
  public:
  const ::znbase::util::hlc::Timestamp& last_heartbeat() const;
  ::znbase::util::hlc::Timestamp* release_last_heartbeat();
  ::znbase::util::hlc::Timestamp* mutable_last_heartbeat();
  void set_allocated_last_heartbeat(::znbase::util::hlc::Timestamp* last_heartbeat);

  bool has_max_timestamp() const;
  void clear_max_timestamp();
  static const int kMaxTimestampFieldNumber = 7;
  private:
  const ::znbase::util::hlc::Timestamp& _internal_max_timestamp() const;
  public:
  const ::znbase::util::hlc::Timestamp& max_timestamp() const;
  ::znbase::util::hlc::Timestamp* release_max_timestamp();
  ::znbase::util::hlc::Timestamp* mutable_max_timestamp();
  void set_allocated_max_timestamp(::znbase::util::hlc::Timestamp* max_timestamp);

  bool has_read_timestamp() const;
  void clear_read_timestamp();
  static const int kReadTimestampFieldNumber = 15;
  private:
  const ::znbase::util::hlc::Timestamp& _internal_read_timestamp() const;
  public:
  const ::znbase::util::hlc::Timestamp& read_timestamp() const;
  ::znbase::util::hlc::Timestamp* release_read_timestamp();
  ::znbase::util::hlc::Timestamp* mutable_read_timestamp();
  void set_allocated_read_timestamp(::znbase::util::hlc::Timestamp* read_timestamp);

  // .znbase.roachpb.TransactionStatus status = 4;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::znbase::roachpb::TransactionStatus status() const;
  void set_status(::znbase::roachpb::TransactionStatus value);

  // bool commit_timestamp_fixed = 16;
  void clear_commit_timestamp_fixed();
  static const int kCommitTimestampFixedFieldNumber = 16;
  bool commit_timestamp_fixed() const;
  void set_commit_timestamp_fixed(bool value);

  // bool write_too_old = 12;
  void clear_write_too_old();
  static const int kWriteTooOldFieldNumber = 12;
  bool write_too_old() const;
  void set_write_too_old(bool value);

  // @@protoc_insertion_point(class_scope:znbase.roachpb.Transaction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::ObservedTimestamp > observed_timestamps_;
  ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::Span > lock_spans_;
  ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::SequencedWrite > in_flight_writes_;
  ::google::protobuf::RepeatedPtrField< ::znbase::storage::engine::enginepb::IgnoredSeqNumRange > ignored_seqnums_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::znbase::storage::engine::enginepb::TxnMeta* meta_;
  ::znbase::util::hlc::Timestamp* last_heartbeat_;
  ::znbase::util::hlc::Timestamp* max_timestamp_;
  ::znbase::util::hlc::Timestamp* read_timestamp_;
  int status_;
  bool commit_timestamp_fixed_;
  bool write_too_old_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransactionRecord : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:znbase.roachpb.TransactionRecord) */ {
 public:
  TransactionRecord();
  virtual ~TransactionRecord();

  TransactionRecord(const TransactionRecord& from);

  inline TransactionRecord& operator=(const TransactionRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransactionRecord(TransactionRecord&& from) noexcept
    : TransactionRecord() {
    *this = ::std::move(from);
  }

  inline TransactionRecord& operator=(TransactionRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const TransactionRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionRecord* internal_default_instance() {
    return reinterpret_cast<const TransactionRecord*>(
               &_TransactionRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(TransactionRecord* other);
  friend void swap(TransactionRecord& a, TransactionRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransactionRecord* New() const final {
    return CreateMaybeMessage<TransactionRecord>(NULL);
  }

  TransactionRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransactionRecord>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const TransactionRecord& from);
  void MergeFrom(const TransactionRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransactionRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  int lock_spans_size() const;
  void clear_lock_spans();
  static const int kLockSpansFieldNumber = 11;
  ::znbase::roachpb::Span* mutable_lock_spans(int index);
  ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::Span >*
      mutable_lock_spans();
  const ::znbase::roachpb::Span& lock_spans(int index) const;
  ::znbase::roachpb::Span* add_lock_spans();
  const ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::Span >&
      lock_spans() const;

  int in_flight_writes_size() const;
  void clear_in_flight_writes();
  static const int kInFlightWritesFieldNumber = 17;
  ::znbase::roachpb::SequencedWrite* mutable_in_flight_writes(int index);
  ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::SequencedWrite >*
      mutable_in_flight_writes();
  const ::znbase::roachpb::SequencedWrite& in_flight_writes(int index) const;
  ::znbase::roachpb::SequencedWrite* add_in_flight_writes();
  const ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::SequencedWrite >&
      in_flight_writes() const;

  int ignored_seqnums_size() const;
  void clear_ignored_seqnums();
  static const int kIgnoredSeqnumsFieldNumber = 18;
  ::znbase::storage::engine::enginepb::IgnoredSeqNumRange* mutable_ignored_seqnums(int index);
  ::google::protobuf::RepeatedPtrField< ::znbase::storage::engine::enginepb::IgnoredSeqNumRange >*
      mutable_ignored_seqnums();
  const ::znbase::storage::engine::enginepb::IgnoredSeqNumRange& ignored_seqnums(int index) const;
  ::znbase::storage::engine::enginepb::IgnoredSeqNumRange* add_ignored_seqnums();
  const ::google::protobuf::RepeatedPtrField< ::znbase::storage::engine::enginepb::IgnoredSeqNumRange >&
      ignored_seqnums() const;

  bool has_meta() const;
  void clear_meta();
  static const int kMetaFieldNumber = 1;
  private:
  const ::znbase::storage::engine::enginepb::TxnMeta& _internal_meta() const;
  public:
  const ::znbase::storage::engine::enginepb::TxnMeta& meta() const;
  ::znbase::storage::engine::enginepb::TxnMeta* release_meta();
  ::znbase::storage::engine::enginepb::TxnMeta* mutable_meta();
  void set_allocated_meta(::znbase::storage::engine::enginepb::TxnMeta* meta);

  bool has_last_heartbeat() const;
  void clear_last_heartbeat();
  static const int kLastHeartbeatFieldNumber = 5;
  private:
  const ::znbase::util::hlc::Timestamp& _internal_last_heartbeat() const;
  public:
  const ::znbase::util::hlc::Timestamp& last_heartbeat() const;
  ::znbase::util::hlc::Timestamp* release_last_heartbeat();
  ::znbase::util::hlc::Timestamp* mutable_last_heartbeat();
  void set_allocated_last_heartbeat(::znbase::util::hlc::Timestamp* last_heartbeat);

  // .znbase.roachpb.TransactionStatus status = 4;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::znbase::roachpb::TransactionStatus status() const;
  void set_status(::znbase::roachpb::TransactionStatus value);

  // @@protoc_insertion_point(class_scope:znbase.roachpb.TransactionRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::Span > lock_spans_;
  ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::SequencedWrite > in_flight_writes_;
  ::google::protobuf::RepeatedPtrField< ::znbase::storage::engine::enginepb::IgnoredSeqNumRange > ignored_seqnums_;
  ::znbase::storage::engine::enginepb::TxnMeta* meta_;
  ::znbase::util::hlc::Timestamp* last_heartbeat_;
  int status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Intent_SingleKeySpan : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:znbase.roachpb.Intent.SingleKeySpan) */ {
 public:
  Intent_SingleKeySpan();
  virtual ~Intent_SingleKeySpan();

  Intent_SingleKeySpan(const Intent_SingleKeySpan& from);

  inline Intent_SingleKeySpan& operator=(const Intent_SingleKeySpan& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Intent_SingleKeySpan(Intent_SingleKeySpan&& from) noexcept
    : Intent_SingleKeySpan() {
    *this = ::std::move(from);
  }

  inline Intent_SingleKeySpan& operator=(Intent_SingleKeySpan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Intent_SingleKeySpan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Intent_SingleKeySpan* internal_default_instance() {
    return reinterpret_cast<const Intent_SingleKeySpan*>(
               &_Intent_SingleKeySpan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(Intent_SingleKeySpan* other);
  friend void swap(Intent_SingleKeySpan& a, Intent_SingleKeySpan& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Intent_SingleKeySpan* New() const final {
    return CreateMaybeMessage<Intent_SingleKeySpan>(NULL);
  }

  Intent_SingleKeySpan* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Intent_SingleKeySpan>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Intent_SingleKeySpan& from);
  void MergeFrom(const Intent_SingleKeySpan& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Intent_SingleKeySpan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  void clear_key();
  static const int kKeyFieldNumber = 3;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:znbase.roachpb.Intent.SingleKeySpan)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Intent : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:znbase.roachpb.Intent) */ {
 public:
  Intent();
  virtual ~Intent();

  Intent(const Intent& from);

  inline Intent& operator=(const Intent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Intent(Intent&& from) noexcept
    : Intent() {
    *this = ::std::move(from);
  }

  inline Intent& operator=(Intent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Intent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Intent* internal_default_instance() {
    return reinterpret_cast<const Intent*>(
               &_Intent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(Intent* other);
  friend void swap(Intent& a, Intent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Intent* New() const final {
    return CreateMaybeMessage<Intent>(NULL);
  }

  Intent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Intent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Intent& from);
  void MergeFrom(const Intent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Intent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Intent_SingleKeySpan SingleKeySpan;

  // accessors -------------------------------------------------------

  bool has_single_key_span() const;
  void clear_single_key_span();
  static const int kSingleKeySpanFieldNumber = 1;
  private:
  const ::znbase::roachpb::Intent_SingleKeySpan& _internal_single_key_span() const;
  public:
  const ::znbase::roachpb::Intent_SingleKeySpan& single_key_span() const;
  ::znbase::roachpb::Intent_SingleKeySpan* release_single_key_span();
  ::znbase::roachpb::Intent_SingleKeySpan* mutable_single_key_span();
  void set_allocated_single_key_span(::znbase::roachpb::Intent_SingleKeySpan* single_key_span);

  bool has_txn() const;
  void clear_txn();
  static const int kTxnFieldNumber = 2;
  private:
  const ::znbase::storage::engine::enginepb::TxnMeta& _internal_txn() const;
  public:
  const ::znbase::storage::engine::enginepb::TxnMeta& txn() const;
  ::znbase::storage::engine::enginepb::TxnMeta* release_txn();
  ::znbase::storage::engine::enginepb::TxnMeta* mutable_txn();
  void set_allocated_txn(::znbase::storage::engine::enginepb::TxnMeta* txn);

  bool has_intent_timestamp() const;
  void clear_intent_timestamp();
  static const int kIntentTimestampFieldNumber = 3;
  private:
  const ::znbase::util::hlc::Timestamp& _internal_intent_timestamp() const;
  public:
  const ::znbase::util::hlc::Timestamp& intent_timestamp() const;
  ::znbase::util::hlc::Timestamp* release_intent_timestamp();
  ::znbase::util::hlc::Timestamp* mutable_intent_timestamp();
  void set_allocated_intent_timestamp(::znbase::util::hlc::Timestamp* intent_timestamp);

  // @@protoc_insertion_point(class_scope:znbase.roachpb.Intent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::znbase::roachpb::Intent_SingleKeySpan* single_key_span_;
  ::znbase::storage::engine::enginepb::TxnMeta* txn_;
  ::znbase::util::hlc::Timestamp* intent_timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LockAcquisition : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:znbase.roachpb.LockAcquisition) */ {
 public:
  LockAcquisition();
  virtual ~LockAcquisition();

  LockAcquisition(const LockAcquisition& from);

  inline LockAcquisition& operator=(const LockAcquisition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LockAcquisition(LockAcquisition&& from) noexcept
    : LockAcquisition() {
    *this = ::std::move(from);
  }

  inline LockAcquisition& operator=(LockAcquisition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const LockAcquisition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LockAcquisition* internal_default_instance() {
    return reinterpret_cast<const LockAcquisition*>(
               &_LockAcquisition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(LockAcquisition* other);
  friend void swap(LockAcquisition& a, LockAcquisition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LockAcquisition* New() const final {
    return CreateMaybeMessage<LockAcquisition>(NULL);
  }

  LockAcquisition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LockAcquisition>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const LockAcquisition& from);
  void MergeFrom(const LockAcquisition& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LockAcquisition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_span() const;
  void clear_span();
  static const int kSpanFieldNumber = 1;
  private:
  const ::znbase::roachpb::Span& _internal_span() const;
  public:
  const ::znbase::roachpb::Span& span() const;
  ::znbase::roachpb::Span* release_span();
  ::znbase::roachpb::Span* mutable_span();
  void set_allocated_span(::znbase::roachpb::Span* span);

  bool has_txn() const;
  void clear_txn();
  static const int kTxnFieldNumber = 2;
  private:
  const ::znbase::storage::engine::enginepb::TxnMeta& _internal_txn() const;
  public:
  const ::znbase::storage::engine::enginepb::TxnMeta& txn() const;
  ::znbase::storage::engine::enginepb::TxnMeta* release_txn();
  ::znbase::storage::engine::enginepb::TxnMeta* mutable_txn();
  void set_allocated_txn(::znbase::storage::engine::enginepb::TxnMeta* txn);

  // .znbase.storage.concurrency.lock.Durability durability = 3;
  void clear_durability();
  static const int kDurabilityFieldNumber = 3;
  ::znbase::storage::concurrency::lock::Durability durability() const;
  void set_durability(::znbase::storage::concurrency::lock::Durability value);

  // @@protoc_insertion_point(class_scope:znbase.roachpb.LockAcquisition)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::znbase::roachpb::Span* span_;
  ::znbase::storage::engine::enginepb::TxnMeta* txn_;
  int durability_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LockUpdate : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:znbase.roachpb.LockUpdate) */ {
 public:
  LockUpdate();
  virtual ~LockUpdate();

  LockUpdate(const LockUpdate& from);

  inline LockUpdate& operator=(const LockUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LockUpdate(LockUpdate&& from) noexcept
    : LockUpdate() {
    *this = ::std::move(from);
  }

  inline LockUpdate& operator=(LockUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const LockUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LockUpdate* internal_default_instance() {
    return reinterpret_cast<const LockUpdate*>(
               &_LockUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(LockUpdate* other);
  friend void swap(LockUpdate& a, LockUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LockUpdate* New() const final {
    return CreateMaybeMessage<LockUpdate>(NULL);
  }

  LockUpdate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LockUpdate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const LockUpdate& from);
  void MergeFrom(const LockUpdate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LockUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  int ignored_seqnums_size() const;
  void clear_ignored_seqnums();
  static const int kIgnoredSeqnumsFieldNumber = 4;
  ::znbase::storage::engine::enginepb::IgnoredSeqNumRange* mutable_ignored_seqnums(int index);
  ::google::protobuf::RepeatedPtrField< ::znbase::storage::engine::enginepb::IgnoredSeqNumRange >*
      mutable_ignored_seqnums();
  const ::znbase::storage::engine::enginepb::IgnoredSeqNumRange& ignored_seqnums(int index) const;
  ::znbase::storage::engine::enginepb::IgnoredSeqNumRange* add_ignored_seqnums();
  const ::google::protobuf::RepeatedPtrField< ::znbase::storage::engine::enginepb::IgnoredSeqNumRange >&
      ignored_seqnums() const;

  bool has_span() const;
  void clear_span();
  static const int kSpanFieldNumber = 1;
  private:
  const ::znbase::roachpb::Span& _internal_span() const;
  public:
  const ::znbase::roachpb::Span& span() const;
  ::znbase::roachpb::Span* release_span();
  ::znbase::roachpb::Span* mutable_span();
  void set_allocated_span(::znbase::roachpb::Span* span);

  bool has_txn() const;
  void clear_txn();
  static const int kTxnFieldNumber = 2;
  private:
  const ::znbase::storage::engine::enginepb::TxnMeta& _internal_txn() const;
  public:
  const ::znbase::storage::engine::enginepb::TxnMeta& txn() const;
  ::znbase::storage::engine::enginepb::TxnMeta* release_txn();
  ::znbase::storage::engine::enginepb::TxnMeta* mutable_txn();
  void set_allocated_txn(::znbase::storage::engine::enginepb::TxnMeta* txn);

  // .znbase.roachpb.TransactionStatus status = 3;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::znbase::roachpb::TransactionStatus status() const;
  void set_status(::znbase::roachpb::TransactionStatus value);

  // @@protoc_insertion_point(class_scope:znbase.roachpb.LockUpdate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::znbase::storage::engine::enginepb::IgnoredSeqNumRange > ignored_seqnums_;
  ::znbase::roachpb::Span* span_;
  ::znbase::storage::engine::enginepb::TxnMeta* txn_;
  int status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SequencedWrite : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:znbase.roachpb.SequencedWrite) */ {
 public:
  SequencedWrite();
  virtual ~SequencedWrite();

  SequencedWrite(const SequencedWrite& from);

  inline SequencedWrite& operator=(const SequencedWrite& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SequencedWrite(SequencedWrite&& from) noexcept
    : SequencedWrite() {
    *this = ::std::move(from);
  }

  inline SequencedWrite& operator=(SequencedWrite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SequencedWrite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SequencedWrite* internal_default_instance() {
    return reinterpret_cast<const SequencedWrite*>(
               &_SequencedWrite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(SequencedWrite* other);
  friend void swap(SequencedWrite& a, SequencedWrite& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SequencedWrite* New() const final {
    return CreateMaybeMessage<SequencedWrite>(NULL);
  }

  SequencedWrite* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SequencedWrite>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SequencedWrite& from);
  void MergeFrom(const SequencedWrite& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SequencedWrite* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  void clear_sequence();
  static const int kSequenceFieldNumber = 2;
  ::google::protobuf::int32 sequence() const;
  void set_sequence(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:znbase.roachpb.SequencedWrite)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::int32 sequence_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Lease : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:znbase.roachpb.Lease) */ {
 public:
  Lease();
  virtual ~Lease();

  Lease(const Lease& from);

  inline Lease& operator=(const Lease& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Lease(Lease&& from) noexcept
    : Lease() {
    *this = ::std::move(from);
  }

  inline Lease& operator=(Lease&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Lease& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lease* internal_default_instance() {
    return reinterpret_cast<const Lease*>(
               &_Lease_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(Lease* other);
  friend void swap(Lease& a, Lease& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Lease* New() const final {
    return CreateMaybeMessage<Lease>(NULL);
  }

  Lease* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Lease>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Lease& from);
  void MergeFrom(const Lease& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Lease* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 1;
  private:
  const ::znbase::util::hlc::Timestamp& _internal_start() const;
  public:
  const ::znbase::util::hlc::Timestamp& start() const;
  ::znbase::util::hlc::Timestamp* release_start();
  ::znbase::util::hlc::Timestamp* mutable_start();
  void set_allocated_start(::znbase::util::hlc::Timestamp* start);

  bool has_expiration() const;
  void clear_expiration();
  static const int kExpirationFieldNumber = 2;
  private:
  const ::znbase::util::hlc::Timestamp& _internal_expiration() const;
  public:
  const ::znbase::util::hlc::Timestamp& expiration() const;
  ::znbase::util::hlc::Timestamp* release_expiration();
  ::znbase::util::hlc::Timestamp* mutable_expiration();
  void set_allocated_expiration(::znbase::util::hlc::Timestamp* expiration);

  bool has_replica() const;
  void clear_replica();
  static const int kReplicaFieldNumber = 3;
  private:
  const ::znbase::roachpb::ReplicaDescriptor& _internal_replica() const;
  public:
  const ::znbase::roachpb::ReplicaDescriptor& replica() const;
  ::znbase::roachpb::ReplicaDescriptor* release_replica();
  ::znbase::roachpb::ReplicaDescriptor* mutable_replica();
  void set_allocated_replica(::znbase::roachpb::ReplicaDescriptor* replica);

  bool has_deprecated_start_stasis() const;
  void clear_deprecated_start_stasis();
  static const int kDeprecatedStartStasisFieldNumber = 4;
  private:
  const ::znbase::util::hlc::Timestamp& _internal_deprecated_start_stasis() const;
  public:
  const ::znbase::util::hlc::Timestamp& deprecated_start_stasis() const;
  ::znbase::util::hlc::Timestamp* release_deprecated_start_stasis();
  ::znbase::util::hlc::Timestamp* mutable_deprecated_start_stasis();
  void set_allocated_deprecated_start_stasis(::znbase::util::hlc::Timestamp* deprecated_start_stasis);

  bool has_proposed_ts() const;
  void clear_proposed_ts();
  static const int kProposedTsFieldNumber = 5;
  private:
  const ::znbase::util::hlc::Timestamp& _internal_proposed_ts() const;
  public:
  const ::znbase::util::hlc::Timestamp& proposed_ts() const;
  ::znbase::util::hlc::Timestamp* release_proposed_ts();
  ::znbase::util::hlc::Timestamp* mutable_proposed_ts();
  void set_allocated_proposed_ts(::znbase::util::hlc::Timestamp* proposed_ts);

  // int64 epoch = 6;
  void clear_epoch();
  static const int kEpochFieldNumber = 6;
  ::google::protobuf::int64 epoch() const;
  void set_epoch(::google::protobuf::int64 value);

  void clear_sequence();
  static const int kSequenceFieldNumber = 7;
  ::google::protobuf::int64 sequence() const;
  void set_sequence(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:znbase.roachpb.Lease)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::znbase::util::hlc::Timestamp* start_;
  ::znbase::util::hlc::Timestamp* expiration_;
  ::znbase::roachpb::ReplicaDescriptor* replica_;
  ::znbase::util::hlc::Timestamp* deprecated_start_stasis_;
  ::znbase::util::hlc::Timestamp* proposed_ts_;
  ::google::protobuf::int64 epoch_;
  ::google::protobuf::int64 sequence_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AbortSpanEntry : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:znbase.roachpb.AbortSpanEntry) */ {
 public:
  AbortSpanEntry();
  virtual ~AbortSpanEntry();

  AbortSpanEntry(const AbortSpanEntry& from);

  inline AbortSpanEntry& operator=(const AbortSpanEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AbortSpanEntry(AbortSpanEntry&& from) noexcept
    : AbortSpanEntry() {
    *this = ::std::move(from);
  }

  inline AbortSpanEntry& operator=(AbortSpanEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const AbortSpanEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AbortSpanEntry* internal_default_instance() {
    return reinterpret_cast<const AbortSpanEntry*>(
               &_AbortSpanEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(AbortSpanEntry* other);
  friend void swap(AbortSpanEntry& a, AbortSpanEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AbortSpanEntry* New() const final {
    return CreateMaybeMessage<AbortSpanEntry>(NULL);
  }

  AbortSpanEntry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AbortSpanEntry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AbortSpanEntry& from);
  void MergeFrom(const AbortSpanEntry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AbortSpanEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  private:
  const ::znbase::util::hlc::Timestamp& _internal_timestamp() const;
  public:
  const ::znbase::util::hlc::Timestamp& timestamp() const;
  ::znbase::util::hlc::Timestamp* release_timestamp();
  ::znbase::util::hlc::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::znbase::util::hlc::Timestamp* timestamp);

  void clear_priority();
  static const int kPriorityFieldNumber = 3;
  ::google::protobuf::int32 priority() const;
  void set_priority(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:znbase.roachpb.AbortSpanEntry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::znbase::util::hlc::Timestamp* timestamp_;
  ::google::protobuf::int32 priority_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TxnCoordMeta : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:znbase.roachpb.TxnCoordMeta) */ {
 public:
  TxnCoordMeta();
  virtual ~TxnCoordMeta();

  TxnCoordMeta(const TxnCoordMeta& from);

  inline TxnCoordMeta& operator=(const TxnCoordMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxnCoordMeta(TxnCoordMeta&& from) noexcept
    : TxnCoordMeta() {
    *this = ::std::move(from);
  }

  inline TxnCoordMeta& operator=(TxnCoordMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const TxnCoordMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxnCoordMeta* internal_default_instance() {
    return reinterpret_cast<const TxnCoordMeta*>(
               &_TxnCoordMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(TxnCoordMeta* other);
  friend void swap(TxnCoordMeta& a, TxnCoordMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxnCoordMeta* New() const final {
    return CreateMaybeMessage<TxnCoordMeta>(NULL);
  }

  TxnCoordMeta* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TxnCoordMeta>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const TxnCoordMeta& from);
  void MergeFrom(const TxnCoordMeta& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TxnCoordMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  int refresh_spans_size() const;
  void clear_refresh_spans();
  static const int kRefreshSpansFieldNumber = 4;
  ::znbase::roachpb::Span* mutable_refresh_spans(int index);
  ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::Span >*
      mutable_refresh_spans();
  const ::znbase::roachpb::Span& refresh_spans(int index) const;
  ::znbase::roachpb::Span* add_refresh_spans();
  const ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::Span >&
      refresh_spans() const;

  int in_flight_writes_size() const;
  void clear_in_flight_writes();
  static const int kInFlightWritesFieldNumber = 8;
  ::znbase::roachpb::SequencedWrite* mutable_in_flight_writes(int index);
  ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::SequencedWrite >*
      mutable_in_flight_writes();
  const ::znbase::roachpb::SequencedWrite& in_flight_writes(int index) const;
  ::znbase::roachpb::SequencedWrite* add_in_flight_writes();
  const ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::SequencedWrite >&
      in_flight_writes() const;

  bool has_txn() const;
  void clear_txn();
  static const int kTxnFieldNumber = 1;
  private:
  const ::znbase::roachpb::Transaction& _internal_txn() const;
  public:
  const ::znbase::roachpb::Transaction& txn() const;
  ::znbase::roachpb::Transaction* release_txn();
  ::znbase::roachpb::Transaction* mutable_txn();
  void set_allocated_txn(::znbase::roachpb::Transaction* txn);

  // int32 command_count = 3;
  void clear_command_count();
  static const int kCommandCountFieldNumber = 3;
  ::google::protobuf::int32 command_count() const;
  void set_command_count(::google::protobuf::int32 value);

  // bool refresh_invalid = 7;
  void clear_refresh_invalid();
  static const int kRefreshInvalidFieldNumber = 7;
  bool refresh_invalid() const;
  void set_refresh_invalid(bool value);

  // @@protoc_insertion_point(class_scope:znbase.roachpb.TxnCoordMeta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::Span > refresh_spans_;
  ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::SequencedWrite > in_flight_writes_;
  ::znbase::roachpb::Transaction* txn_;
  ::google::protobuf::int32 command_count_;
  bool refresh_invalid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LeafTxnInputState : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:znbase.roachpb.LeafTxnInputState) */ {
 public:
  LeafTxnInputState();
  virtual ~LeafTxnInputState();

  LeafTxnInputState(const LeafTxnInputState& from);

  inline LeafTxnInputState& operator=(const LeafTxnInputState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LeafTxnInputState(LeafTxnInputState&& from) noexcept
    : LeafTxnInputState() {
    *this = ::std::move(from);
  }

  inline LeafTxnInputState& operator=(LeafTxnInputState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const LeafTxnInputState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeafTxnInputState* internal_default_instance() {
    return reinterpret_cast<const LeafTxnInputState*>(
               &_LeafTxnInputState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(LeafTxnInputState* other);
  friend void swap(LeafTxnInputState& a, LeafTxnInputState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LeafTxnInputState* New() const final {
    return CreateMaybeMessage<LeafTxnInputState>(NULL);
  }

  LeafTxnInputState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LeafTxnInputState>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const LeafTxnInputState& from);
  void MergeFrom(const LeafTxnInputState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LeafTxnInputState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  int in_flight_writes_size() const;
  void clear_in_flight_writes();
  static const int kInFlightWritesFieldNumber = 8;
  ::znbase::roachpb::SequencedWrite* mutable_in_flight_writes(int index);
  ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::SequencedWrite >*
      mutable_in_flight_writes();
  const ::znbase::roachpb::SequencedWrite& in_flight_writes(int index) const;
  ::znbase::roachpb::SequencedWrite* add_in_flight_writes();
  const ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::SequencedWrite >&
      in_flight_writes() const;

  bool has_txn() const;
  void clear_txn();
  static const int kTxnFieldNumber = 1;
  private:
  const ::znbase::roachpb::Transaction& _internal_txn() const;
  public:
  const ::znbase::roachpb::Transaction& txn() const;
  ::znbase::roachpb::Transaction* release_txn();
  ::znbase::roachpb::Transaction* mutable_txn();
  void set_allocated_txn(::znbase::roachpb::Transaction* txn);

  // bool refresh_invalid = 7;
  void clear_refresh_invalid();
  static const int kRefreshInvalidFieldNumber = 7;
  bool refresh_invalid() const;
  void set_refresh_invalid(bool value);

  // bool stepping_mode_enabled = 9;
  void clear_stepping_mode_enabled();
  static const int kSteppingModeEnabledFieldNumber = 9;
  bool stepping_mode_enabled() const;
  void set_stepping_mode_enabled(bool value);

  void clear_read_seq_num();
  static const int kReadSeqNumFieldNumber = 10;
  ::google::protobuf::int32 read_seq_num() const;
  void set_read_seq_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:znbase.roachpb.LeafTxnInputState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::SequencedWrite > in_flight_writes_;
  ::znbase::roachpb::Transaction* txn_;
  bool refresh_invalid_;
  bool stepping_mode_enabled_;
  ::google::protobuf::int32 read_seq_num_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LeafTxnFinalState : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:znbase.roachpb.LeafTxnFinalState) */ {
 public:
  LeafTxnFinalState();
  virtual ~LeafTxnFinalState();

  LeafTxnFinalState(const LeafTxnFinalState& from);

  inline LeafTxnFinalState& operator=(const LeafTxnFinalState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LeafTxnFinalState(LeafTxnFinalState&& from) noexcept
    : LeafTxnFinalState() {
    *this = ::std::move(from);
  }

  inline LeafTxnFinalState& operator=(LeafTxnFinalState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const LeafTxnFinalState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeafTxnFinalState* internal_default_instance() {
    return reinterpret_cast<const LeafTxnFinalState*>(
               &_LeafTxnFinalState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(LeafTxnFinalState* other);
  friend void swap(LeafTxnFinalState& a, LeafTxnFinalState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LeafTxnFinalState* New() const final {
    return CreateMaybeMessage<LeafTxnFinalState>(NULL);
  }

  LeafTxnFinalState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LeafTxnFinalState>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const LeafTxnFinalState& from);
  void MergeFrom(const LeafTxnFinalState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LeafTxnFinalState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  int refresh_spans_size() const;
  void clear_refresh_spans();
  static const int kRefreshSpansFieldNumber = 4;
  ::znbase::roachpb::Span* mutable_refresh_spans(int index);
  ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::Span >*
      mutable_refresh_spans();
  const ::znbase::roachpb::Span& refresh_spans(int index) const;
  ::znbase::roachpb::Span* add_refresh_spans();
  const ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::Span >&
      refresh_spans() const;

  bool has_txn() const;
  void clear_txn();
  static const int kTxnFieldNumber = 1;
  private:
  const ::znbase::roachpb::Transaction& _internal_txn() const;
  public:
  const ::znbase::roachpb::Transaction& txn() const;
  ::znbase::roachpb::Transaction* release_txn();
  ::znbase::roachpb::Transaction* mutable_txn();
  void set_allocated_txn(::znbase::roachpb::Transaction* txn);

  // int32 deprecated_command_count = 3;
  void clear_deprecated_command_count();
  static const int kDeprecatedCommandCountFieldNumber = 3;
  ::google::protobuf::int32 deprecated_command_count() const;
  void set_deprecated_command_count(::google::protobuf::int32 value);

  // bool refresh_invalid = 7;
  void clear_refresh_invalid();
  static const int kRefreshInvalidFieldNumber = 7;
  bool refresh_invalid() const;
  void set_refresh_invalid(bool value);

  // @@protoc_insertion_point(class_scope:znbase.roachpb.LeafTxnFinalState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::Span > refresh_spans_;
  ::znbase::roachpb::Transaction* txn_;
  ::google::protobuf::int32 deprecated_command_count_;
  bool refresh_invalid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Decimal : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:znbase.roachpb.Decimal) */ {
 public:
  Decimal();
  virtual ~Decimal();

  Decimal(const Decimal& from);

  inline Decimal& operator=(const Decimal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Decimal(Decimal&& from) noexcept
    : Decimal() {
    *this = ::std::move(from);
  }

  inline Decimal& operator=(Decimal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Decimal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Decimal* internal_default_instance() {
    return reinterpret_cast<const Decimal*>(
               &_Decimal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(Decimal* other);
  friend void swap(Decimal& a, Decimal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Decimal* New() const final {
    return CreateMaybeMessage<Decimal>(NULL);
  }

  Decimal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Decimal>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Decimal& from);
  void MergeFrom(const Decimal& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Decimal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 abs = 5;
  int abs_size() const;
  void clear_abs();
  static const int kAbsFieldNumber = 5;
  ::google::protobuf::uint64 abs(int index) const;
  void set_abs(int index, ::google::protobuf::uint64 value);
  void add_abs(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      abs() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_abs();

  // int64 form = 1;
  void clear_form();
  static const int kFormFieldNumber = 1;
  ::google::protobuf::int64 form() const;
  void set_form(::google::protobuf::int64 value);

  // int32 exponent = 3;
  void clear_exponent();
  static const int kExponentFieldNumber = 3;
  ::google::protobuf::int32 exponent() const;
  void set_exponent(::google::protobuf::int32 value);

  // bool negative = 2;
  void clear_negative();
  static const int kNegativeFieldNumber = 2;
  bool negative() const;
  void set_negative(bool value);

  // bool neg = 4;
  void clear_neg();
  static const int kNegFieldNumber = 4;
  bool neg() const;
  void set_neg(bool value);

  // @@protoc_insertion_point(class_scope:znbase.roachpb.Decimal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > abs_;
  mutable int _abs_cached_byte_size_;
  ::google::protobuf::int64 form_;
  ::google::protobuf::int32 exponent_;
  bool negative_;
  bool neg_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VecValue : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:znbase.roachpb.VecValue) */ {
 public:
  VecValue();
  virtual ~VecValue();

  VecValue(const VecValue& from);

  inline VecValue& operator=(const VecValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VecValue(VecValue&& from) noexcept
    : VecValue() {
    *this = ::std::move(from);
  }

  inline VecValue& operator=(VecValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const VecValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VecValue* internal_default_instance() {
    return reinterpret_cast<const VecValue*>(
               &_VecValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(VecValue* other);
  friend void swap(VecValue& a, VecValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VecValue* New() const final {
    return CreateMaybeMessage<VecValue>(NULL);
  }

  VecValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VecValue>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const VecValue& from);
  void MergeFrom(const VecValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VecValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 v_int = 3;
  int v_int_size() const;
  void clear_v_int();
  static const int kVIntFieldNumber = 3;
  ::google::protobuf::int64 v_int(int index) const;
  void set_v_int(int index, ::google::protobuf::int64 value);
  void add_v_int(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      v_int() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_v_int();

  // repeated uint64 v_uint = 4;
  int v_uint_size() const;
  void clear_v_uint();
  static const int kVUintFieldNumber = 4;
  ::google::protobuf::uint64 v_uint(int index) const;
  void set_v_uint(int index, ::google::protobuf::uint64 value);
  void add_v_uint(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      v_uint() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_v_uint();

  // repeated int32 v_int32 = 5;
  int v_int32_size() const;
  void clear_v_int32();
  static const int kVInt32FieldNumber = 5;
  ::google::protobuf::int32 v_int32(int index) const;
  void set_v_int32(int index, ::google::protobuf::int32 value);
  void add_v_int32(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      v_int32() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_v_int32();

  // repeated double v_double = 6;
  int v_double_size() const;
  void clear_v_double();
  static const int kVDoubleFieldNumber = 6;
  double v_double(int index) const;
  void set_v_double(int index, double value);
  void add_v_double(double value);
  const ::google::protobuf::RepeatedField< double >&
      v_double() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_v_double();

  // repeated bytes values = 7;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 7;
  const ::std::string& values(int index) const;
  ::std::string* mutable_values(int index);
  void set_values(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_values(int index, ::std::string&& value);
  #endif
  void set_values(int index, const char* value);
  void set_values(int index, const void* value, size_t size);
  ::std::string* add_values();
  void add_values(const ::std::string& value);
  #if LANG_CXX11
  void add_values(::std::string&& value);
  #endif
  void add_values(const char* value);
  void add_values(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& values() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_values();

  // repeated float v_float = 8;
  int v_float_size() const;
  void clear_v_float();
  static const int kVFloatFieldNumber = 8;
  float v_float(int index) const;
  void set_v_float(int index, float value);
  void add_v_float(float value);
  const ::google::protobuf::RepeatedField< float >&
      v_float() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_v_float();

  // repeated .znbase.roachpb.Decimal v_decimal = 9;
  int v_decimal_size() const;
  void clear_v_decimal();
  static const int kVDecimalFieldNumber = 9;
  ::znbase::roachpb::Decimal* mutable_v_decimal(int index);
  ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::Decimal >*
      mutable_v_decimal();
  const ::znbase::roachpb::Decimal& v_decimal(int index) const;
  ::znbase::roachpb::Decimal* add_v_decimal();
  const ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::Decimal >&
      v_decimal() const;

  // uint32 col_id = 1;
  void clear_col_id();
  static const int kColIdFieldNumber = 1;
  ::google::protobuf::uint32 col_id() const;
  void set_col_id(::google::protobuf::uint32 value);

  // int32 col_type = 2;
  void clear_col_type();
  static const int kColTypeFieldNumber = 2;
  ::google::protobuf::int32 col_type() const;
  void set_col_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:znbase.roachpb.VecValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > v_int_;
  mutable int _v_int_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > v_uint_;
  mutable int _v_uint_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > v_int32_;
  mutable int _v_int32_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > v_double_;
  mutable int _v_double_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> values_;
  ::google::protobuf::RepeatedField< float > v_float_;
  mutable int _v_float_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::Decimal > v_decimal_;
  ::google::protobuf::uint32 col_id_;
  ::google::protobuf::int32 col_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NullValue : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:znbase.roachpb.NullValue) */ {
 public:
  NullValue();
  virtual ~NullValue();

  NullValue(const NullValue& from);

  inline NullValue& operator=(const NullValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NullValue(NullValue&& from) noexcept
    : NullValue() {
    *this = ::std::move(from);
  }

  inline NullValue& operator=(NullValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const NullValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NullValue* internal_default_instance() {
    return reinterpret_cast<const NullValue*>(
               &_NullValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(NullValue* other);
  friend void swap(NullValue& a, NullValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NullValue* New() const final {
    return CreateMaybeMessage<NullValue>(NULL);
  }

  NullValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NullValue>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const NullValue& from);
  void MergeFrom(const NullValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NullValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool index = 1;
  int index_size() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  bool index(int index) const;
  void set_index(int index, bool value);
  void add_index(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      index() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_index();

  // @@protoc_insertion_point(class_scope:znbase.roachpb.NullValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedField< bool > index_;
  mutable int _index_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VecResults : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:znbase.roachpb.VecResults) */ {
 public:
  VecResults();
  virtual ~VecResults();

  VecResults(const VecResults& from);

  inline VecResults& operator=(const VecResults& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VecResults(VecResults&& from) noexcept
    : VecResults() {
    *this = ::std::move(from);
  }

  inline VecResults& operator=(VecResults&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const VecResults& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VecResults* internal_default_instance() {
    return reinterpret_cast<const VecResults*>(
               &_VecResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(VecResults* other);
  friend void swap(VecResults& a, VecResults& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VecResults* New() const final {
    return CreateMaybeMessage<VecResults>(NULL);
  }

  VecResults* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VecResults>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const VecResults& from);
  void MergeFrom(const VecResults& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VecResults* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  int col_ids_size() const;
  void clear_col_ids();
  static const int kColIdsFieldNumber = 2;
  ::google::protobuf::int32 col_ids(int index) const;
  void set_col_ids(int index, ::google::protobuf::int32 value);
  void add_col_ids(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      col_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_col_ids();

  // repeated .znbase.roachpb.VecValue col_values = 3;
  int col_values_size() const;
  void clear_col_values();
  static const int kColValuesFieldNumber = 3;
  ::znbase::roachpb::VecValue* mutable_col_values(int index);
  ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::VecValue >*
      mutable_col_values();
  const ::znbase::roachpb::VecValue& col_values(int index) const;
  ::znbase::roachpb::VecValue* add_col_values();
  const ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::VecValue >&
      col_values() const;

  // repeated .znbase.roachpb.NullValue null_values = 4;
  int null_values_size() const;
  void clear_null_values();
  static const int kNullValuesFieldNumber = 4;
  ::znbase::roachpb::NullValue* mutable_null_values(int index);
  ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::NullValue >*
      mutable_null_values();
  const ::znbase::roachpb::NullValue& null_values(int index) const;
  ::znbase::roachpb::NullValue* add_null_values();
  const ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::NullValue >&
      null_values() const;

  // int64 count = 1;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::int64 count() const;
  void set_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:znbase.roachpb.VecResults)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > col_ids_;
  mutable int _col_ids_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::VecValue > col_values_;
  ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::NullValue > null_values_;
  ::google::protobuf::int64 count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_roachpb_2fdata_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Span

inline void Span::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Span::key() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.Span.key)
  return key_.GetNoArena();
}
inline void Span::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:znbase.roachpb.Span.key)
}
#if LANG_CXX11
inline void Span::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:znbase.roachpb.Span.key)
}
#endif
inline void Span::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:znbase.roachpb.Span.key)
}
inline void Span::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:znbase.roachpb.Span.key)
}
inline ::std::string* Span::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.Span.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Span::release_key() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.Span.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Span::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.Span.key)
}

inline void Span::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Span::end_key() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.Span.end_key)
  return end_key_.GetNoArena();
}
inline void Span::set_end_key(const ::std::string& value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:znbase.roachpb.Span.end_key)
}
#if LANG_CXX11
inline void Span::set_end_key(::std::string&& value) {
  
  end_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:znbase.roachpb.Span.end_key)
}
#endif
inline void Span::set_end_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:znbase.roachpb.Span.end_key)
}
inline void Span::set_end_key(const void* value, size_t size) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:znbase.roachpb.Span.end_key)
}
inline ::std::string* Span::mutable_end_key() {
  
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.Span.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Span::release_end_key() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.Span.end_key)
  
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Span::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    
  } else {
    
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.Span.end_key)
}

// -------------------------------------------------------------------

// Value

// bytes raw_bytes = 1;
inline void Value::clear_raw_bytes() {
  raw_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Value::raw_bytes() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.Value.raw_bytes)
  return raw_bytes_.GetNoArena();
}
inline void Value::set_raw_bytes(const ::std::string& value) {
  
  raw_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:znbase.roachpb.Value.raw_bytes)
}
#if LANG_CXX11
inline void Value::set_raw_bytes(::std::string&& value) {
  
  raw_bytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:znbase.roachpb.Value.raw_bytes)
}
#endif
inline void Value::set_raw_bytes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  raw_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:znbase.roachpb.Value.raw_bytes)
}
inline void Value::set_raw_bytes(const void* value, size_t size) {
  
  raw_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:znbase.roachpb.Value.raw_bytes)
}
inline ::std::string* Value::mutable_raw_bytes() {
  
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.Value.raw_bytes)
  return raw_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Value::release_raw_bytes() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.Value.raw_bytes)
  
  return raw_bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Value::set_allocated_raw_bytes(::std::string* raw_bytes) {
  if (raw_bytes != NULL) {
    
  } else {
    
  }
  raw_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_bytes);
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.Value.raw_bytes)
}

inline bool Value::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
inline const ::znbase::util::hlc::Timestamp& Value::_internal_timestamp() const {
  return *timestamp_;
}
inline const ::znbase::util::hlc::Timestamp& Value::timestamp() const {
  const ::znbase::util::hlc::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.Value.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::util::hlc::Timestamp*>(
      &::znbase::util::hlc::_Timestamp_default_instance_);
}
inline ::znbase::util::hlc::Timestamp* Value::release_timestamp() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.Value.timestamp)
  
  ::znbase::util::hlc::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline ::znbase::util::hlc::Timestamp* Value::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::util::hlc::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.Value.timestamp)
  return timestamp_;
}
inline void Value::set_allocated_timestamp(::znbase::util::hlc::Timestamp* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.Value.timestamp)
}

// -------------------------------------------------------------------

// KeyValue

inline void KeyValue::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.KeyValue.key)
  return key_.GetNoArena();
}
inline void KeyValue::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:znbase.roachpb.KeyValue.key)
}
#if LANG_CXX11
inline void KeyValue::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:znbase.roachpb.KeyValue.key)
}
#endif
inline void KeyValue::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:znbase.roachpb.KeyValue.key)
}
inline void KeyValue::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:znbase.roachpb.KeyValue.key)
}
inline ::std::string* KeyValue::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.KeyValue.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyValue::release_key() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.KeyValue.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValue::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.KeyValue.key)
}

inline bool KeyValue::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void KeyValue::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::znbase::roachpb::Value& KeyValue::_internal_value() const {
  return *value_;
}
inline const ::znbase::roachpb::Value& KeyValue::value() const {
  const ::znbase::roachpb::Value* p = value_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.KeyValue.value)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::roachpb::Value*>(
      &::znbase::roachpb::_Value_default_instance_);
}
inline ::znbase::roachpb::Value* KeyValue::release_value() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.KeyValue.value)
  
  ::znbase::roachpb::Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::znbase::roachpb::Value* KeyValue::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::roachpb::Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.KeyValue.value)
  return value_;
}
inline void KeyValue::set_allocated_value(::znbase::roachpb::Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.KeyValue.value)
}

// -------------------------------------------------------------------

// StoreIdent

inline void StoreIdent::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StoreIdent::cluster_id() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.StoreIdent.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void StoreIdent::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:znbase.roachpb.StoreIdent.cluster_id)
}
#if LANG_CXX11
inline void StoreIdent::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:znbase.roachpb.StoreIdent.cluster_id)
}
#endif
inline void StoreIdent::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:znbase.roachpb.StoreIdent.cluster_id)
}
inline void StoreIdent::set_cluster_id(const void* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:znbase.roachpb.StoreIdent.cluster_id)
}
inline ::std::string* StoreIdent::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.StoreIdent.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StoreIdent::release_cluster_id() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.StoreIdent.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StoreIdent::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.StoreIdent.cluster_id)
}

inline void StoreIdent::clear_node_id() {
  node_id_ = 0;
}
inline ::google::protobuf::int32 StoreIdent::node_id() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.StoreIdent.node_id)
  return node_id_;
}
inline void StoreIdent::set_node_id(::google::protobuf::int32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:znbase.roachpb.StoreIdent.node_id)
}

inline void StoreIdent::clear_store_id() {
  store_id_ = 0;
}
inline ::google::protobuf::int32 StoreIdent::store_id() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.StoreIdent.store_id)
  return store_id_;
}
inline void StoreIdent::set_store_id(::google::protobuf::int32 value) {
  
  store_id_ = value;
  // @@protoc_insertion_point(field_set:znbase.roachpb.StoreIdent.store_id)
}

// -------------------------------------------------------------------

// SplitTrigger

inline bool SplitTrigger::has_left_desc() const {
  return this != internal_default_instance() && left_desc_ != NULL;
}
inline const ::znbase::roachpb::RangeDescriptor& SplitTrigger::_internal_left_desc() const {
  return *left_desc_;
}
inline const ::znbase::roachpb::RangeDescriptor& SplitTrigger::left_desc() const {
  const ::znbase::roachpb::RangeDescriptor* p = left_desc_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.SplitTrigger.left_desc)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::roachpb::RangeDescriptor*>(
      &::znbase::roachpb::_RangeDescriptor_default_instance_);
}
inline ::znbase::roachpb::RangeDescriptor* SplitTrigger::release_left_desc() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.SplitTrigger.left_desc)
  
  ::znbase::roachpb::RangeDescriptor* temp = left_desc_;
  left_desc_ = NULL;
  return temp;
}
inline ::znbase::roachpb::RangeDescriptor* SplitTrigger::mutable_left_desc() {
  
  if (left_desc_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::roachpb::RangeDescriptor>(GetArenaNoVirtual());
    left_desc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.SplitTrigger.left_desc)
  return left_desc_;
}
inline void SplitTrigger::set_allocated_left_desc(::znbase::roachpb::RangeDescriptor* left_desc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(left_desc_);
  }
  if (left_desc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      left_desc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, left_desc, submessage_arena);
    }
    
  } else {
    
  }
  left_desc_ = left_desc;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.SplitTrigger.left_desc)
}

inline bool SplitTrigger::has_right_desc() const {
  return this != internal_default_instance() && right_desc_ != NULL;
}
inline const ::znbase::roachpb::RangeDescriptor& SplitTrigger::_internal_right_desc() const {
  return *right_desc_;
}
inline const ::znbase::roachpb::RangeDescriptor& SplitTrigger::right_desc() const {
  const ::znbase::roachpb::RangeDescriptor* p = right_desc_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.SplitTrigger.right_desc)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::roachpb::RangeDescriptor*>(
      &::znbase::roachpb::_RangeDescriptor_default_instance_);
}
inline ::znbase::roachpb::RangeDescriptor* SplitTrigger::release_right_desc() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.SplitTrigger.right_desc)
  
  ::znbase::roachpb::RangeDescriptor* temp = right_desc_;
  right_desc_ = NULL;
  return temp;
}
inline ::znbase::roachpb::RangeDescriptor* SplitTrigger::mutable_right_desc() {
  
  if (right_desc_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::roachpb::RangeDescriptor>(GetArenaNoVirtual());
    right_desc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.SplitTrigger.right_desc)
  return right_desc_;
}
inline void SplitTrigger::set_allocated_right_desc(::znbase::roachpb::RangeDescriptor* right_desc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(right_desc_);
  }
  if (right_desc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      right_desc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, right_desc, submessage_arena);
    }
    
  } else {
    
  }
  right_desc_ = right_desc;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.SplitTrigger.right_desc)
}

// -------------------------------------------------------------------

// MergeTrigger

inline bool MergeTrigger::has_left_desc() const {
  return this != internal_default_instance() && left_desc_ != NULL;
}
inline const ::znbase::roachpb::RangeDescriptor& MergeTrigger::_internal_left_desc() const {
  return *left_desc_;
}
inline const ::znbase::roachpb::RangeDescriptor& MergeTrigger::left_desc() const {
  const ::znbase::roachpb::RangeDescriptor* p = left_desc_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.MergeTrigger.left_desc)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::roachpb::RangeDescriptor*>(
      &::znbase::roachpb::_RangeDescriptor_default_instance_);
}
inline ::znbase::roachpb::RangeDescriptor* MergeTrigger::release_left_desc() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.MergeTrigger.left_desc)
  
  ::znbase::roachpb::RangeDescriptor* temp = left_desc_;
  left_desc_ = NULL;
  return temp;
}
inline ::znbase::roachpb::RangeDescriptor* MergeTrigger::mutable_left_desc() {
  
  if (left_desc_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::roachpb::RangeDescriptor>(GetArenaNoVirtual());
    left_desc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.MergeTrigger.left_desc)
  return left_desc_;
}
inline void MergeTrigger::set_allocated_left_desc(::znbase::roachpb::RangeDescriptor* left_desc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(left_desc_);
  }
  if (left_desc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      left_desc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, left_desc, submessage_arena);
    }
    
  } else {
    
  }
  left_desc_ = left_desc;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.MergeTrigger.left_desc)
}

inline bool MergeTrigger::has_right_desc() const {
  return this != internal_default_instance() && right_desc_ != NULL;
}
inline const ::znbase::roachpb::RangeDescriptor& MergeTrigger::_internal_right_desc() const {
  return *right_desc_;
}
inline const ::znbase::roachpb::RangeDescriptor& MergeTrigger::right_desc() const {
  const ::znbase::roachpb::RangeDescriptor* p = right_desc_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.MergeTrigger.right_desc)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::roachpb::RangeDescriptor*>(
      &::znbase::roachpb::_RangeDescriptor_default_instance_);
}
inline ::znbase::roachpb::RangeDescriptor* MergeTrigger::release_right_desc() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.MergeTrigger.right_desc)
  
  ::znbase::roachpb::RangeDescriptor* temp = right_desc_;
  right_desc_ = NULL;
  return temp;
}
inline ::znbase::roachpb::RangeDescriptor* MergeTrigger::mutable_right_desc() {
  
  if (right_desc_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::roachpb::RangeDescriptor>(GetArenaNoVirtual());
    right_desc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.MergeTrigger.right_desc)
  return right_desc_;
}
inline void MergeTrigger::set_allocated_right_desc(::znbase::roachpb::RangeDescriptor* right_desc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(right_desc_);
  }
  if (right_desc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      right_desc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, right_desc, submessage_arena);
    }
    
  } else {
    
  }
  right_desc_ = right_desc;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.MergeTrigger.right_desc)
}

inline bool MergeTrigger::has_right_mvcc_stats() const {
  return this != internal_default_instance() && right_mvcc_stats_ != NULL;
}
inline const ::znbase::storage::engine::enginepb::MVCCStats& MergeTrigger::_internal_right_mvcc_stats() const {
  return *right_mvcc_stats_;
}
inline const ::znbase::storage::engine::enginepb::MVCCStats& MergeTrigger::right_mvcc_stats() const {
  const ::znbase::storage::engine::enginepb::MVCCStats* p = right_mvcc_stats_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.MergeTrigger.right_mvcc_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::storage::engine::enginepb::MVCCStats*>(
      &::znbase::storage::engine::enginepb::_MVCCStats_default_instance_);
}
inline ::znbase::storage::engine::enginepb::MVCCStats* MergeTrigger::release_right_mvcc_stats() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.MergeTrigger.right_mvcc_stats)
  
  ::znbase::storage::engine::enginepb::MVCCStats* temp = right_mvcc_stats_;
  right_mvcc_stats_ = NULL;
  return temp;
}
inline ::znbase::storage::engine::enginepb::MVCCStats* MergeTrigger::mutable_right_mvcc_stats() {
  
  if (right_mvcc_stats_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::storage::engine::enginepb::MVCCStats>(GetArenaNoVirtual());
    right_mvcc_stats_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.MergeTrigger.right_mvcc_stats)
  return right_mvcc_stats_;
}
inline void MergeTrigger::set_allocated_right_mvcc_stats(::znbase::storage::engine::enginepb::MVCCStats* right_mvcc_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(right_mvcc_stats_);
  }
  if (right_mvcc_stats) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      right_mvcc_stats = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, right_mvcc_stats, submessage_arena);
    }
    
  } else {
    
  }
  right_mvcc_stats_ = right_mvcc_stats;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.MergeTrigger.right_mvcc_stats)
}

inline bool MergeTrigger::has_freeze_start() const {
  return this != internal_default_instance() && freeze_start_ != NULL;
}
inline const ::znbase::util::hlc::Timestamp& MergeTrigger::_internal_freeze_start() const {
  return *freeze_start_;
}
inline const ::znbase::util::hlc::Timestamp& MergeTrigger::freeze_start() const {
  const ::znbase::util::hlc::Timestamp* p = freeze_start_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.MergeTrigger.freeze_start)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::util::hlc::Timestamp*>(
      &::znbase::util::hlc::_Timestamp_default_instance_);
}
inline ::znbase::util::hlc::Timestamp* MergeTrigger::release_freeze_start() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.MergeTrigger.freeze_start)
  
  ::znbase::util::hlc::Timestamp* temp = freeze_start_;
  freeze_start_ = NULL;
  return temp;
}
inline ::znbase::util::hlc::Timestamp* MergeTrigger::mutable_freeze_start() {
  
  if (freeze_start_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::util::hlc::Timestamp>(GetArenaNoVirtual());
    freeze_start_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.MergeTrigger.freeze_start)
  return freeze_start_;
}
inline void MergeTrigger::set_allocated_freeze_start(::znbase::util::hlc::Timestamp* freeze_start) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(freeze_start_);
  }
  if (freeze_start) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      freeze_start = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, freeze_start, submessage_arena);
    }
    
  } else {
    
  }
  freeze_start_ = freeze_start;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.MergeTrigger.freeze_start)
}

// -------------------------------------------------------------------

// ChangeReplicasTrigger

// .znbase.roachpb.ReplicaChangeType change_type = 1;
inline void ChangeReplicasTrigger::clear_change_type() {
  change_type_ = 0;
}
inline ::znbase::roachpb::ReplicaChangeType ChangeReplicasTrigger::change_type() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.ChangeReplicasTrigger.change_type)
  return static_cast< ::znbase::roachpb::ReplicaChangeType >(change_type_);
}
inline void ChangeReplicasTrigger::set_change_type(::znbase::roachpb::ReplicaChangeType value) {
  
  change_type_ = value;
  // @@protoc_insertion_point(field_set:znbase.roachpb.ChangeReplicasTrigger.change_type)
}

inline bool ChangeReplicasTrigger::has_replica() const {
  return this != internal_default_instance() && replica_ != NULL;
}
inline const ::znbase::roachpb::ReplicaDescriptor& ChangeReplicasTrigger::_internal_replica() const {
  return *replica_;
}
inline const ::znbase::roachpb::ReplicaDescriptor& ChangeReplicasTrigger::replica() const {
  const ::znbase::roachpb::ReplicaDescriptor* p = replica_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.ChangeReplicasTrigger.replica)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::roachpb::ReplicaDescriptor*>(
      &::znbase::roachpb::_ReplicaDescriptor_default_instance_);
}
inline ::znbase::roachpb::ReplicaDescriptor* ChangeReplicasTrigger::release_replica() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.ChangeReplicasTrigger.replica)
  
  ::znbase::roachpb::ReplicaDescriptor* temp = replica_;
  replica_ = NULL;
  return temp;
}
inline ::znbase::roachpb::ReplicaDescriptor* ChangeReplicasTrigger::mutable_replica() {
  
  if (replica_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::roachpb::ReplicaDescriptor>(GetArenaNoVirtual());
    replica_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.ChangeReplicasTrigger.replica)
  return replica_;
}
inline void ChangeReplicasTrigger::set_allocated_replica(::znbase::roachpb::ReplicaDescriptor* replica) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(replica_);
  }
  if (replica) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      replica = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, replica, submessage_arena);
    }
    
  } else {
    
  }
  replica_ = replica;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.ChangeReplicasTrigger.replica)
}

inline int ChangeReplicasTrigger::updated_replicas_size() const {
  return updated_replicas_.size();
}
inline ::znbase::roachpb::ReplicaDescriptor* ChangeReplicasTrigger::mutable_updated_replicas(int index) {
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.ChangeReplicasTrigger.updated_replicas)
  return updated_replicas_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::ReplicaDescriptor >*
ChangeReplicasTrigger::mutable_updated_replicas() {
  // @@protoc_insertion_point(field_mutable_list:znbase.roachpb.ChangeReplicasTrigger.updated_replicas)
  return &updated_replicas_;
}
inline const ::znbase::roachpb::ReplicaDescriptor& ChangeReplicasTrigger::updated_replicas(int index) const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.ChangeReplicasTrigger.updated_replicas)
  return updated_replicas_.Get(index);
}
inline ::znbase::roachpb::ReplicaDescriptor* ChangeReplicasTrigger::add_updated_replicas() {
  // @@protoc_insertion_point(field_add:znbase.roachpb.ChangeReplicasTrigger.updated_replicas)
  return updated_replicas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::ReplicaDescriptor >&
ChangeReplicasTrigger::updated_replicas() const {
  // @@protoc_insertion_point(field_list:znbase.roachpb.ChangeReplicasTrigger.updated_replicas)
  return updated_replicas_;
}

inline void ChangeReplicasTrigger::clear_next_replica_id() {
  next_replica_id_ = 0;
}
inline ::google::protobuf::int32 ChangeReplicasTrigger::next_replica_id() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.ChangeReplicasTrigger.next_replica_id)
  return next_replica_id_;
}
inline void ChangeReplicasTrigger::set_next_replica_id(::google::protobuf::int32 value) {
  
  next_replica_id_ = value;
  // @@protoc_insertion_point(field_set:znbase.roachpb.ChangeReplicasTrigger.next_replica_id)
}

// -------------------------------------------------------------------

// ModifiedSpanTrigger

// bool system_config_span = 1;
inline void ModifiedSpanTrigger::clear_system_config_span() {
  system_config_span_ = false;
}
inline bool ModifiedSpanTrigger::system_config_span() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.ModifiedSpanTrigger.system_config_span)
  return system_config_span_;
}
inline void ModifiedSpanTrigger::set_system_config_span(bool value) {
  
  system_config_span_ = value;
  // @@protoc_insertion_point(field_set:znbase.roachpb.ModifiedSpanTrigger.system_config_span)
}

// .znbase.roachpb.Span node_liveness_span = 2;
inline bool ModifiedSpanTrigger::has_node_liveness_span() const {
  return this != internal_default_instance() && node_liveness_span_ != NULL;
}
inline void ModifiedSpanTrigger::clear_node_liveness_span() {
  if (GetArenaNoVirtual() == NULL && node_liveness_span_ != NULL) {
    delete node_liveness_span_;
  }
  node_liveness_span_ = NULL;
}
inline const ::znbase::roachpb::Span& ModifiedSpanTrigger::_internal_node_liveness_span() const {
  return *node_liveness_span_;
}
inline const ::znbase::roachpb::Span& ModifiedSpanTrigger::node_liveness_span() const {
  const ::znbase::roachpb::Span* p = node_liveness_span_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.ModifiedSpanTrigger.node_liveness_span)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::roachpb::Span*>(
      &::znbase::roachpb::_Span_default_instance_);
}
inline ::znbase::roachpb::Span* ModifiedSpanTrigger::release_node_liveness_span() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.ModifiedSpanTrigger.node_liveness_span)
  
  ::znbase::roachpb::Span* temp = node_liveness_span_;
  node_liveness_span_ = NULL;
  return temp;
}
inline ::znbase::roachpb::Span* ModifiedSpanTrigger::mutable_node_liveness_span() {
  
  if (node_liveness_span_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::roachpb::Span>(GetArenaNoVirtual());
    node_liveness_span_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.ModifiedSpanTrigger.node_liveness_span)
  return node_liveness_span_;
}
inline void ModifiedSpanTrigger::set_allocated_node_liveness_span(::znbase::roachpb::Span* node_liveness_span) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete node_liveness_span_;
  }
  if (node_liveness_span) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      node_liveness_span = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, node_liveness_span, submessage_arena);
    }
    
  } else {
    
  }
  node_liveness_span_ = node_liveness_span;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.ModifiedSpanTrigger.node_liveness_span)
}

// -------------------------------------------------------------------

// InternalCommitTrigger

// .znbase.roachpb.SplitTrigger split_trigger = 1;
inline bool InternalCommitTrigger::has_split_trigger() const {
  return this != internal_default_instance() && split_trigger_ != NULL;
}
inline void InternalCommitTrigger::clear_split_trigger() {
  if (GetArenaNoVirtual() == NULL && split_trigger_ != NULL) {
    delete split_trigger_;
  }
  split_trigger_ = NULL;
}
inline const ::znbase::roachpb::SplitTrigger& InternalCommitTrigger::_internal_split_trigger() const {
  return *split_trigger_;
}
inline const ::znbase::roachpb::SplitTrigger& InternalCommitTrigger::split_trigger() const {
  const ::znbase::roachpb::SplitTrigger* p = split_trigger_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.InternalCommitTrigger.split_trigger)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::roachpb::SplitTrigger*>(
      &::znbase::roachpb::_SplitTrigger_default_instance_);
}
inline ::znbase::roachpb::SplitTrigger* InternalCommitTrigger::release_split_trigger() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.InternalCommitTrigger.split_trigger)
  
  ::znbase::roachpb::SplitTrigger* temp = split_trigger_;
  split_trigger_ = NULL;
  return temp;
}
inline ::znbase::roachpb::SplitTrigger* InternalCommitTrigger::mutable_split_trigger() {
  
  if (split_trigger_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::roachpb::SplitTrigger>(GetArenaNoVirtual());
    split_trigger_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.InternalCommitTrigger.split_trigger)
  return split_trigger_;
}
inline void InternalCommitTrigger::set_allocated_split_trigger(::znbase::roachpb::SplitTrigger* split_trigger) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete split_trigger_;
  }
  if (split_trigger) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      split_trigger = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, split_trigger, submessage_arena);
    }
    
  } else {
    
  }
  split_trigger_ = split_trigger;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.InternalCommitTrigger.split_trigger)
}

// .znbase.roachpb.MergeTrigger merge_trigger = 2;
inline bool InternalCommitTrigger::has_merge_trigger() const {
  return this != internal_default_instance() && merge_trigger_ != NULL;
}
inline void InternalCommitTrigger::clear_merge_trigger() {
  if (GetArenaNoVirtual() == NULL && merge_trigger_ != NULL) {
    delete merge_trigger_;
  }
  merge_trigger_ = NULL;
}
inline const ::znbase::roachpb::MergeTrigger& InternalCommitTrigger::_internal_merge_trigger() const {
  return *merge_trigger_;
}
inline const ::znbase::roachpb::MergeTrigger& InternalCommitTrigger::merge_trigger() const {
  const ::znbase::roachpb::MergeTrigger* p = merge_trigger_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.InternalCommitTrigger.merge_trigger)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::roachpb::MergeTrigger*>(
      &::znbase::roachpb::_MergeTrigger_default_instance_);
}
inline ::znbase::roachpb::MergeTrigger* InternalCommitTrigger::release_merge_trigger() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.InternalCommitTrigger.merge_trigger)
  
  ::znbase::roachpb::MergeTrigger* temp = merge_trigger_;
  merge_trigger_ = NULL;
  return temp;
}
inline ::znbase::roachpb::MergeTrigger* InternalCommitTrigger::mutable_merge_trigger() {
  
  if (merge_trigger_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::roachpb::MergeTrigger>(GetArenaNoVirtual());
    merge_trigger_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.InternalCommitTrigger.merge_trigger)
  return merge_trigger_;
}
inline void InternalCommitTrigger::set_allocated_merge_trigger(::znbase::roachpb::MergeTrigger* merge_trigger) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete merge_trigger_;
  }
  if (merge_trigger) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      merge_trigger = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, merge_trigger, submessage_arena);
    }
    
  } else {
    
  }
  merge_trigger_ = merge_trigger;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.InternalCommitTrigger.merge_trigger)
}

// .znbase.roachpb.ChangeReplicasTrigger change_replicas_trigger = 3;
inline bool InternalCommitTrigger::has_change_replicas_trigger() const {
  return this != internal_default_instance() && change_replicas_trigger_ != NULL;
}
inline void InternalCommitTrigger::clear_change_replicas_trigger() {
  if (GetArenaNoVirtual() == NULL && change_replicas_trigger_ != NULL) {
    delete change_replicas_trigger_;
  }
  change_replicas_trigger_ = NULL;
}
inline const ::znbase::roachpb::ChangeReplicasTrigger& InternalCommitTrigger::_internal_change_replicas_trigger() const {
  return *change_replicas_trigger_;
}
inline const ::znbase::roachpb::ChangeReplicasTrigger& InternalCommitTrigger::change_replicas_trigger() const {
  const ::znbase::roachpb::ChangeReplicasTrigger* p = change_replicas_trigger_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.InternalCommitTrigger.change_replicas_trigger)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::roachpb::ChangeReplicasTrigger*>(
      &::znbase::roachpb::_ChangeReplicasTrigger_default_instance_);
}
inline ::znbase::roachpb::ChangeReplicasTrigger* InternalCommitTrigger::release_change_replicas_trigger() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.InternalCommitTrigger.change_replicas_trigger)
  
  ::znbase::roachpb::ChangeReplicasTrigger* temp = change_replicas_trigger_;
  change_replicas_trigger_ = NULL;
  return temp;
}
inline ::znbase::roachpb::ChangeReplicasTrigger* InternalCommitTrigger::mutable_change_replicas_trigger() {
  
  if (change_replicas_trigger_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::roachpb::ChangeReplicasTrigger>(GetArenaNoVirtual());
    change_replicas_trigger_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.InternalCommitTrigger.change_replicas_trigger)
  return change_replicas_trigger_;
}
inline void InternalCommitTrigger::set_allocated_change_replicas_trigger(::znbase::roachpb::ChangeReplicasTrigger* change_replicas_trigger) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete change_replicas_trigger_;
  }
  if (change_replicas_trigger) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      change_replicas_trigger = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, change_replicas_trigger, submessage_arena);
    }
    
  } else {
    
  }
  change_replicas_trigger_ = change_replicas_trigger;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.InternalCommitTrigger.change_replicas_trigger)
}

// .znbase.roachpb.ModifiedSpanTrigger modified_span_trigger = 4;
inline bool InternalCommitTrigger::has_modified_span_trigger() const {
  return this != internal_default_instance() && modified_span_trigger_ != NULL;
}
inline void InternalCommitTrigger::clear_modified_span_trigger() {
  if (GetArenaNoVirtual() == NULL && modified_span_trigger_ != NULL) {
    delete modified_span_trigger_;
  }
  modified_span_trigger_ = NULL;
}
inline const ::znbase::roachpb::ModifiedSpanTrigger& InternalCommitTrigger::_internal_modified_span_trigger() const {
  return *modified_span_trigger_;
}
inline const ::znbase::roachpb::ModifiedSpanTrigger& InternalCommitTrigger::modified_span_trigger() const {
  const ::znbase::roachpb::ModifiedSpanTrigger* p = modified_span_trigger_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.InternalCommitTrigger.modified_span_trigger)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::roachpb::ModifiedSpanTrigger*>(
      &::znbase::roachpb::_ModifiedSpanTrigger_default_instance_);
}
inline ::znbase::roachpb::ModifiedSpanTrigger* InternalCommitTrigger::release_modified_span_trigger() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.InternalCommitTrigger.modified_span_trigger)
  
  ::znbase::roachpb::ModifiedSpanTrigger* temp = modified_span_trigger_;
  modified_span_trigger_ = NULL;
  return temp;
}
inline ::znbase::roachpb::ModifiedSpanTrigger* InternalCommitTrigger::mutable_modified_span_trigger() {
  
  if (modified_span_trigger_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::roachpb::ModifiedSpanTrigger>(GetArenaNoVirtual());
    modified_span_trigger_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.InternalCommitTrigger.modified_span_trigger)
  return modified_span_trigger_;
}
inline void InternalCommitTrigger::set_allocated_modified_span_trigger(::znbase::roachpb::ModifiedSpanTrigger* modified_span_trigger) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete modified_span_trigger_;
  }
  if (modified_span_trigger) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      modified_span_trigger = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, modified_span_trigger, submessage_arena);
    }
    
  } else {
    
  }
  modified_span_trigger_ = modified_span_trigger;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.InternalCommitTrigger.modified_span_trigger)
}

// -------------------------------------------------------------------

// ObservedTimestamp

inline void ObservedTimestamp::clear_node_id() {
  node_id_ = 0;
}
inline ::google::protobuf::int32 ObservedTimestamp::node_id() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.ObservedTimestamp.node_id)
  return node_id_;
}
inline void ObservedTimestamp::set_node_id(::google::protobuf::int32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:znbase.roachpb.ObservedTimestamp.node_id)
}

inline bool ObservedTimestamp::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
inline const ::znbase::util::hlc::Timestamp& ObservedTimestamp::_internal_timestamp() const {
  return *timestamp_;
}
inline const ::znbase::util::hlc::Timestamp& ObservedTimestamp::timestamp() const {
  const ::znbase::util::hlc::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.ObservedTimestamp.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::util::hlc::Timestamp*>(
      &::znbase::util::hlc::_Timestamp_default_instance_);
}
inline ::znbase::util::hlc::Timestamp* ObservedTimestamp::release_timestamp() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.ObservedTimestamp.timestamp)
  
  ::znbase::util::hlc::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline ::znbase::util::hlc::Timestamp* ObservedTimestamp::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::util::hlc::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.ObservedTimestamp.timestamp)
  return timestamp_;
}
inline void ObservedTimestamp::set_allocated_timestamp(::znbase::util::hlc::Timestamp* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.ObservedTimestamp.timestamp)
}

// -------------------------------------------------------------------

// Transaction

inline bool Transaction::has_meta() const {
  return this != internal_default_instance() && meta_ != NULL;
}
inline const ::znbase::storage::engine::enginepb::TxnMeta& Transaction::_internal_meta() const {
  return *meta_;
}
inline const ::znbase::storage::engine::enginepb::TxnMeta& Transaction::meta() const {
  const ::znbase::storage::engine::enginepb::TxnMeta* p = meta_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.Transaction.meta)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::storage::engine::enginepb::TxnMeta*>(
      &::znbase::storage::engine::enginepb::_TxnMeta_default_instance_);
}
inline ::znbase::storage::engine::enginepb::TxnMeta* Transaction::release_meta() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.Transaction.meta)
  
  ::znbase::storage::engine::enginepb::TxnMeta* temp = meta_;
  meta_ = NULL;
  return temp;
}
inline ::znbase::storage::engine::enginepb::TxnMeta* Transaction::mutable_meta() {
  
  if (meta_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::storage::engine::enginepb::TxnMeta>(GetArenaNoVirtual());
    meta_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.Transaction.meta)
  return meta_;
}
inline void Transaction::set_allocated_meta(::znbase::storage::engine::enginepb::TxnMeta* meta) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(meta_);
  }
  if (meta) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      meta = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.Transaction.meta)
}

// string name = 2;
inline void Transaction::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transaction::name() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.Transaction.name)
  return name_.GetNoArena();
}
inline void Transaction::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:znbase.roachpb.Transaction.name)
}
#if LANG_CXX11
inline void Transaction::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:znbase.roachpb.Transaction.name)
}
#endif
inline void Transaction::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:znbase.roachpb.Transaction.name)
}
inline void Transaction::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:znbase.roachpb.Transaction.name)
}
inline ::std::string* Transaction::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.Transaction.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_name() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.Transaction.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.Transaction.name)
}

// .znbase.roachpb.TransactionStatus status = 4;
inline void Transaction::clear_status() {
  status_ = 0;
}
inline ::znbase::roachpb::TransactionStatus Transaction::status() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.Transaction.status)
  return static_cast< ::znbase::roachpb::TransactionStatus >(status_);
}
inline void Transaction::set_status(::znbase::roachpb::TransactionStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:znbase.roachpb.Transaction.status)
}

inline bool Transaction::has_last_heartbeat() const {
  return this != internal_default_instance() && last_heartbeat_ != NULL;
}
inline const ::znbase::util::hlc::Timestamp& Transaction::_internal_last_heartbeat() const {
  return *last_heartbeat_;
}
inline const ::znbase::util::hlc::Timestamp& Transaction::last_heartbeat() const {
  const ::znbase::util::hlc::Timestamp* p = last_heartbeat_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.Transaction.last_heartbeat)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::util::hlc::Timestamp*>(
      &::znbase::util::hlc::_Timestamp_default_instance_);
}
inline ::znbase::util::hlc::Timestamp* Transaction::release_last_heartbeat() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.Transaction.last_heartbeat)
  
  ::znbase::util::hlc::Timestamp* temp = last_heartbeat_;
  last_heartbeat_ = NULL;
  return temp;
}
inline ::znbase::util::hlc::Timestamp* Transaction::mutable_last_heartbeat() {
  
  if (last_heartbeat_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::util::hlc::Timestamp>(GetArenaNoVirtual());
    last_heartbeat_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.Transaction.last_heartbeat)
  return last_heartbeat_;
}
inline void Transaction::set_allocated_last_heartbeat(::znbase::util::hlc::Timestamp* last_heartbeat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(last_heartbeat_);
  }
  if (last_heartbeat) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      last_heartbeat = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, last_heartbeat, submessage_arena);
    }
    
  } else {
    
  }
  last_heartbeat_ = last_heartbeat;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.Transaction.last_heartbeat)
}

// bool commit_timestamp_fixed = 16;
inline void Transaction::clear_commit_timestamp_fixed() {
  commit_timestamp_fixed_ = false;
}
inline bool Transaction::commit_timestamp_fixed() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.Transaction.commit_timestamp_fixed)
  return commit_timestamp_fixed_;
}
inline void Transaction::set_commit_timestamp_fixed(bool value) {
  
  commit_timestamp_fixed_ = value;
  // @@protoc_insertion_point(field_set:znbase.roachpb.Transaction.commit_timestamp_fixed)
}

inline bool Transaction::has_read_timestamp() const {
  return this != internal_default_instance() && read_timestamp_ != NULL;
}
inline const ::znbase::util::hlc::Timestamp& Transaction::_internal_read_timestamp() const {
  return *read_timestamp_;
}
inline const ::znbase::util::hlc::Timestamp& Transaction::read_timestamp() const {
  const ::znbase::util::hlc::Timestamp* p = read_timestamp_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.Transaction.read_timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::util::hlc::Timestamp*>(
      &::znbase::util::hlc::_Timestamp_default_instance_);
}
inline ::znbase::util::hlc::Timestamp* Transaction::release_read_timestamp() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.Transaction.read_timestamp)
  
  ::znbase::util::hlc::Timestamp* temp = read_timestamp_;
  read_timestamp_ = NULL;
  return temp;
}
inline ::znbase::util::hlc::Timestamp* Transaction::mutable_read_timestamp() {
  
  if (read_timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::util::hlc::Timestamp>(GetArenaNoVirtual());
    read_timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.Transaction.read_timestamp)
  return read_timestamp_;
}
inline void Transaction::set_allocated_read_timestamp(::znbase::util::hlc::Timestamp* read_timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(read_timestamp_);
  }
  if (read_timestamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      read_timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, read_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  read_timestamp_ = read_timestamp;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.Transaction.read_timestamp)
}

inline bool Transaction::has_max_timestamp() const {
  return this != internal_default_instance() && max_timestamp_ != NULL;
}
inline const ::znbase::util::hlc::Timestamp& Transaction::_internal_max_timestamp() const {
  return *max_timestamp_;
}
inline const ::znbase::util::hlc::Timestamp& Transaction::max_timestamp() const {
  const ::znbase::util::hlc::Timestamp* p = max_timestamp_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.Transaction.max_timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::util::hlc::Timestamp*>(
      &::znbase::util::hlc::_Timestamp_default_instance_);
}
inline ::znbase::util::hlc::Timestamp* Transaction::release_max_timestamp() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.Transaction.max_timestamp)
  
  ::znbase::util::hlc::Timestamp* temp = max_timestamp_;
  max_timestamp_ = NULL;
  return temp;
}
inline ::znbase::util::hlc::Timestamp* Transaction::mutable_max_timestamp() {
  
  if (max_timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::util::hlc::Timestamp>(GetArenaNoVirtual());
    max_timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.Transaction.max_timestamp)
  return max_timestamp_;
}
inline void Transaction::set_allocated_max_timestamp(::znbase::util::hlc::Timestamp* max_timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(max_timestamp_);
  }
  if (max_timestamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      max_timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  max_timestamp_ = max_timestamp;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.Transaction.max_timestamp)
}

inline int Transaction::observed_timestamps_size() const {
  return observed_timestamps_.size();
}
inline void Transaction::clear_observed_timestamps() {
  observed_timestamps_.Clear();
}
inline ::znbase::roachpb::ObservedTimestamp* Transaction::mutable_observed_timestamps(int index) {
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.Transaction.observed_timestamps)
  return observed_timestamps_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::ObservedTimestamp >*
Transaction::mutable_observed_timestamps() {
  // @@protoc_insertion_point(field_mutable_list:znbase.roachpb.Transaction.observed_timestamps)
  return &observed_timestamps_;
}
inline const ::znbase::roachpb::ObservedTimestamp& Transaction::observed_timestamps(int index) const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.Transaction.observed_timestamps)
  return observed_timestamps_.Get(index);
}
inline ::znbase::roachpb::ObservedTimestamp* Transaction::add_observed_timestamps() {
  // @@protoc_insertion_point(field_add:znbase.roachpb.Transaction.observed_timestamps)
  return observed_timestamps_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::ObservedTimestamp >&
Transaction::observed_timestamps() const {
  // @@protoc_insertion_point(field_list:znbase.roachpb.Transaction.observed_timestamps)
  return observed_timestamps_;
}

// bool write_too_old = 12;
inline void Transaction::clear_write_too_old() {
  write_too_old_ = false;
}
inline bool Transaction::write_too_old() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.Transaction.write_too_old)
  return write_too_old_;
}
inline void Transaction::set_write_too_old(bool value) {
  
  write_too_old_ = value;
  // @@protoc_insertion_point(field_set:znbase.roachpb.Transaction.write_too_old)
}

inline int Transaction::lock_spans_size() const {
  return lock_spans_.size();
}
inline void Transaction::clear_lock_spans() {
  lock_spans_.Clear();
}
inline ::znbase::roachpb::Span* Transaction::mutable_lock_spans(int index) {
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.Transaction.lock_spans)
  return lock_spans_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::Span >*
Transaction::mutable_lock_spans() {
  // @@protoc_insertion_point(field_mutable_list:znbase.roachpb.Transaction.lock_spans)
  return &lock_spans_;
}
inline const ::znbase::roachpb::Span& Transaction::lock_spans(int index) const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.Transaction.lock_spans)
  return lock_spans_.Get(index);
}
inline ::znbase::roachpb::Span* Transaction::add_lock_spans() {
  // @@protoc_insertion_point(field_add:znbase.roachpb.Transaction.lock_spans)
  return lock_spans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::Span >&
Transaction::lock_spans() const {
  // @@protoc_insertion_point(field_list:znbase.roachpb.Transaction.lock_spans)
  return lock_spans_;
}

inline int Transaction::in_flight_writes_size() const {
  return in_flight_writes_.size();
}
inline void Transaction::clear_in_flight_writes() {
  in_flight_writes_.Clear();
}
inline ::znbase::roachpb::SequencedWrite* Transaction::mutable_in_flight_writes(int index) {
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.Transaction.in_flight_writes)
  return in_flight_writes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::SequencedWrite >*
Transaction::mutable_in_flight_writes() {
  // @@protoc_insertion_point(field_mutable_list:znbase.roachpb.Transaction.in_flight_writes)
  return &in_flight_writes_;
}
inline const ::znbase::roachpb::SequencedWrite& Transaction::in_flight_writes(int index) const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.Transaction.in_flight_writes)
  return in_flight_writes_.Get(index);
}
inline ::znbase::roachpb::SequencedWrite* Transaction::add_in_flight_writes() {
  // @@protoc_insertion_point(field_add:znbase.roachpb.Transaction.in_flight_writes)
  return in_flight_writes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::SequencedWrite >&
Transaction::in_flight_writes() const {
  // @@protoc_insertion_point(field_list:znbase.roachpb.Transaction.in_flight_writes)
  return in_flight_writes_;
}

inline int Transaction::ignored_seqnums_size() const {
  return ignored_seqnums_.size();
}
inline ::znbase::storage::engine::enginepb::IgnoredSeqNumRange* Transaction::mutable_ignored_seqnums(int index) {
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.Transaction.ignored_seqnums)
  return ignored_seqnums_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::znbase::storage::engine::enginepb::IgnoredSeqNumRange >*
Transaction::mutable_ignored_seqnums() {
  // @@protoc_insertion_point(field_mutable_list:znbase.roachpb.Transaction.ignored_seqnums)
  return &ignored_seqnums_;
}
inline const ::znbase::storage::engine::enginepb::IgnoredSeqNumRange& Transaction::ignored_seqnums(int index) const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.Transaction.ignored_seqnums)
  return ignored_seqnums_.Get(index);
}
inline ::znbase::storage::engine::enginepb::IgnoredSeqNumRange* Transaction::add_ignored_seqnums() {
  // @@protoc_insertion_point(field_add:znbase.roachpb.Transaction.ignored_seqnums)
  return ignored_seqnums_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::znbase::storage::engine::enginepb::IgnoredSeqNumRange >&
Transaction::ignored_seqnums() const {
  // @@protoc_insertion_point(field_list:znbase.roachpb.Transaction.ignored_seqnums)
  return ignored_seqnums_;
}

// -------------------------------------------------------------------

// TransactionRecord

inline bool TransactionRecord::has_meta() const {
  return this != internal_default_instance() && meta_ != NULL;
}
inline const ::znbase::storage::engine::enginepb::TxnMeta& TransactionRecord::_internal_meta() const {
  return *meta_;
}
inline const ::znbase::storage::engine::enginepb::TxnMeta& TransactionRecord::meta() const {
  const ::znbase::storage::engine::enginepb::TxnMeta* p = meta_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.TransactionRecord.meta)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::storage::engine::enginepb::TxnMeta*>(
      &::znbase::storage::engine::enginepb::_TxnMeta_default_instance_);
}
inline ::znbase::storage::engine::enginepb::TxnMeta* TransactionRecord::release_meta() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.TransactionRecord.meta)
  
  ::znbase::storage::engine::enginepb::TxnMeta* temp = meta_;
  meta_ = NULL;
  return temp;
}
inline ::znbase::storage::engine::enginepb::TxnMeta* TransactionRecord::mutable_meta() {
  
  if (meta_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::storage::engine::enginepb::TxnMeta>(GetArenaNoVirtual());
    meta_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.TransactionRecord.meta)
  return meta_;
}
inline void TransactionRecord::set_allocated_meta(::znbase::storage::engine::enginepb::TxnMeta* meta) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(meta_);
  }
  if (meta) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      meta = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.TransactionRecord.meta)
}

// .znbase.roachpb.TransactionStatus status = 4;
inline void TransactionRecord::clear_status() {
  status_ = 0;
}
inline ::znbase::roachpb::TransactionStatus TransactionRecord::status() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.TransactionRecord.status)
  return static_cast< ::znbase::roachpb::TransactionStatus >(status_);
}
inline void TransactionRecord::set_status(::znbase::roachpb::TransactionStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:znbase.roachpb.TransactionRecord.status)
}

inline bool TransactionRecord::has_last_heartbeat() const {
  return this != internal_default_instance() && last_heartbeat_ != NULL;
}
inline const ::znbase::util::hlc::Timestamp& TransactionRecord::_internal_last_heartbeat() const {
  return *last_heartbeat_;
}
inline const ::znbase::util::hlc::Timestamp& TransactionRecord::last_heartbeat() const {
  const ::znbase::util::hlc::Timestamp* p = last_heartbeat_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.TransactionRecord.last_heartbeat)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::util::hlc::Timestamp*>(
      &::znbase::util::hlc::_Timestamp_default_instance_);
}
inline ::znbase::util::hlc::Timestamp* TransactionRecord::release_last_heartbeat() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.TransactionRecord.last_heartbeat)
  
  ::znbase::util::hlc::Timestamp* temp = last_heartbeat_;
  last_heartbeat_ = NULL;
  return temp;
}
inline ::znbase::util::hlc::Timestamp* TransactionRecord::mutable_last_heartbeat() {
  
  if (last_heartbeat_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::util::hlc::Timestamp>(GetArenaNoVirtual());
    last_heartbeat_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.TransactionRecord.last_heartbeat)
  return last_heartbeat_;
}
inline void TransactionRecord::set_allocated_last_heartbeat(::znbase::util::hlc::Timestamp* last_heartbeat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(last_heartbeat_);
  }
  if (last_heartbeat) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      last_heartbeat = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, last_heartbeat, submessage_arena);
    }
    
  } else {
    
  }
  last_heartbeat_ = last_heartbeat;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.TransactionRecord.last_heartbeat)
}

inline int TransactionRecord::lock_spans_size() const {
  return lock_spans_.size();
}
inline void TransactionRecord::clear_lock_spans() {
  lock_spans_.Clear();
}
inline ::znbase::roachpb::Span* TransactionRecord::mutable_lock_spans(int index) {
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.TransactionRecord.lock_spans)
  return lock_spans_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::Span >*
TransactionRecord::mutable_lock_spans() {
  // @@protoc_insertion_point(field_mutable_list:znbase.roachpb.TransactionRecord.lock_spans)
  return &lock_spans_;
}
inline const ::znbase::roachpb::Span& TransactionRecord::lock_spans(int index) const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.TransactionRecord.lock_spans)
  return lock_spans_.Get(index);
}
inline ::znbase::roachpb::Span* TransactionRecord::add_lock_spans() {
  // @@protoc_insertion_point(field_add:znbase.roachpb.TransactionRecord.lock_spans)
  return lock_spans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::Span >&
TransactionRecord::lock_spans() const {
  // @@protoc_insertion_point(field_list:znbase.roachpb.TransactionRecord.lock_spans)
  return lock_spans_;
}

inline int TransactionRecord::in_flight_writes_size() const {
  return in_flight_writes_.size();
}
inline void TransactionRecord::clear_in_flight_writes() {
  in_flight_writes_.Clear();
}
inline ::znbase::roachpb::SequencedWrite* TransactionRecord::mutable_in_flight_writes(int index) {
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.TransactionRecord.in_flight_writes)
  return in_flight_writes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::SequencedWrite >*
TransactionRecord::mutable_in_flight_writes() {
  // @@protoc_insertion_point(field_mutable_list:znbase.roachpb.TransactionRecord.in_flight_writes)
  return &in_flight_writes_;
}
inline const ::znbase::roachpb::SequencedWrite& TransactionRecord::in_flight_writes(int index) const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.TransactionRecord.in_flight_writes)
  return in_flight_writes_.Get(index);
}
inline ::znbase::roachpb::SequencedWrite* TransactionRecord::add_in_flight_writes() {
  // @@protoc_insertion_point(field_add:znbase.roachpb.TransactionRecord.in_flight_writes)
  return in_flight_writes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::SequencedWrite >&
TransactionRecord::in_flight_writes() const {
  // @@protoc_insertion_point(field_list:znbase.roachpb.TransactionRecord.in_flight_writes)
  return in_flight_writes_;
}

inline int TransactionRecord::ignored_seqnums_size() const {
  return ignored_seqnums_.size();
}
inline ::znbase::storage::engine::enginepb::IgnoredSeqNumRange* TransactionRecord::mutable_ignored_seqnums(int index) {
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.TransactionRecord.ignored_seqnums)
  return ignored_seqnums_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::znbase::storage::engine::enginepb::IgnoredSeqNumRange >*
TransactionRecord::mutable_ignored_seqnums() {
  // @@protoc_insertion_point(field_mutable_list:znbase.roachpb.TransactionRecord.ignored_seqnums)
  return &ignored_seqnums_;
}
inline const ::znbase::storage::engine::enginepb::IgnoredSeqNumRange& TransactionRecord::ignored_seqnums(int index) const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.TransactionRecord.ignored_seqnums)
  return ignored_seqnums_.Get(index);
}
inline ::znbase::storage::engine::enginepb::IgnoredSeqNumRange* TransactionRecord::add_ignored_seqnums() {
  // @@protoc_insertion_point(field_add:znbase.roachpb.TransactionRecord.ignored_seqnums)
  return ignored_seqnums_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::znbase::storage::engine::enginepb::IgnoredSeqNumRange >&
TransactionRecord::ignored_seqnums() const {
  // @@protoc_insertion_point(field_list:znbase.roachpb.TransactionRecord.ignored_seqnums)
  return ignored_seqnums_;
}

// -------------------------------------------------------------------

// Intent_SingleKeySpan

inline void Intent_SingleKeySpan::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Intent_SingleKeySpan::key() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.Intent.SingleKeySpan.key)
  return key_.GetNoArena();
}
inline void Intent_SingleKeySpan::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:znbase.roachpb.Intent.SingleKeySpan.key)
}
#if LANG_CXX11
inline void Intent_SingleKeySpan::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:znbase.roachpb.Intent.SingleKeySpan.key)
}
#endif
inline void Intent_SingleKeySpan::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:znbase.roachpb.Intent.SingleKeySpan.key)
}
inline void Intent_SingleKeySpan::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:znbase.roachpb.Intent.SingleKeySpan.key)
}
inline ::std::string* Intent_SingleKeySpan::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.Intent.SingleKeySpan.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Intent_SingleKeySpan::release_key() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.Intent.SingleKeySpan.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Intent_SingleKeySpan::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.Intent.SingleKeySpan.key)
}

// -------------------------------------------------------------------

// Intent

inline bool Intent::has_single_key_span() const {
  return this != internal_default_instance() && single_key_span_ != NULL;
}
inline void Intent::clear_single_key_span() {
  if (GetArenaNoVirtual() == NULL && single_key_span_ != NULL) {
    delete single_key_span_;
  }
  single_key_span_ = NULL;
}
inline const ::znbase::roachpb::Intent_SingleKeySpan& Intent::_internal_single_key_span() const {
  return *single_key_span_;
}
inline const ::znbase::roachpb::Intent_SingleKeySpan& Intent::single_key_span() const {
  const ::znbase::roachpb::Intent_SingleKeySpan* p = single_key_span_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.Intent.single_key_span)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::roachpb::Intent_SingleKeySpan*>(
      &::znbase::roachpb::_Intent_SingleKeySpan_default_instance_);
}
inline ::znbase::roachpb::Intent_SingleKeySpan* Intent::release_single_key_span() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.Intent.single_key_span)
  
  ::znbase::roachpb::Intent_SingleKeySpan* temp = single_key_span_;
  single_key_span_ = NULL;
  return temp;
}
inline ::znbase::roachpb::Intent_SingleKeySpan* Intent::mutable_single_key_span() {
  
  if (single_key_span_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::roachpb::Intent_SingleKeySpan>(GetArenaNoVirtual());
    single_key_span_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.Intent.single_key_span)
  return single_key_span_;
}
inline void Intent::set_allocated_single_key_span(::znbase::roachpb::Intent_SingleKeySpan* single_key_span) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete single_key_span_;
  }
  if (single_key_span) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      single_key_span = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, single_key_span, submessage_arena);
    }
    
  } else {
    
  }
  single_key_span_ = single_key_span;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.Intent.single_key_span)
}

inline bool Intent::has_txn() const {
  return this != internal_default_instance() && txn_ != NULL;
}
inline const ::znbase::storage::engine::enginepb::TxnMeta& Intent::_internal_txn() const {
  return *txn_;
}
inline const ::znbase::storage::engine::enginepb::TxnMeta& Intent::txn() const {
  const ::znbase::storage::engine::enginepb::TxnMeta* p = txn_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.Intent.txn)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::storage::engine::enginepb::TxnMeta*>(
      &::znbase::storage::engine::enginepb::_TxnMeta_default_instance_);
}
inline ::znbase::storage::engine::enginepb::TxnMeta* Intent::release_txn() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.Intent.txn)
  
  ::znbase::storage::engine::enginepb::TxnMeta* temp = txn_;
  txn_ = NULL;
  return temp;
}
inline ::znbase::storage::engine::enginepb::TxnMeta* Intent::mutable_txn() {
  
  if (txn_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::storage::engine::enginepb::TxnMeta>(GetArenaNoVirtual());
    txn_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.Intent.txn)
  return txn_;
}
inline void Intent::set_allocated_txn(::znbase::storage::engine::enginepb::TxnMeta* txn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(txn_);
  }
  if (txn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      txn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, txn, submessage_arena);
    }
    
  } else {
    
  }
  txn_ = txn;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.Intent.txn)
}

inline bool Intent::has_intent_timestamp() const {
  return this != internal_default_instance() && intent_timestamp_ != NULL;
}
inline const ::znbase::util::hlc::Timestamp& Intent::_internal_intent_timestamp() const {
  return *intent_timestamp_;
}
inline const ::znbase::util::hlc::Timestamp& Intent::intent_timestamp() const {
  const ::znbase::util::hlc::Timestamp* p = intent_timestamp_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.Intent.intent_timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::util::hlc::Timestamp*>(
      &::znbase::util::hlc::_Timestamp_default_instance_);
}
inline ::znbase::util::hlc::Timestamp* Intent::release_intent_timestamp() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.Intent.intent_timestamp)
  
  ::znbase::util::hlc::Timestamp* temp = intent_timestamp_;
  intent_timestamp_ = NULL;
  return temp;
}
inline ::znbase::util::hlc::Timestamp* Intent::mutable_intent_timestamp() {
  
  if (intent_timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::util::hlc::Timestamp>(GetArenaNoVirtual());
    intent_timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.Intent.intent_timestamp)
  return intent_timestamp_;
}
inline void Intent::set_allocated_intent_timestamp(::znbase::util::hlc::Timestamp* intent_timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(intent_timestamp_);
  }
  if (intent_timestamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      intent_timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, intent_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  intent_timestamp_ = intent_timestamp;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.Intent.intent_timestamp)
}

// -------------------------------------------------------------------

// LockAcquisition

inline bool LockAcquisition::has_span() const {
  return this != internal_default_instance() && span_ != NULL;
}
inline void LockAcquisition::clear_span() {
  if (GetArenaNoVirtual() == NULL && span_ != NULL) {
    delete span_;
  }
  span_ = NULL;
}
inline const ::znbase::roachpb::Span& LockAcquisition::_internal_span() const {
  return *span_;
}
inline const ::znbase::roachpb::Span& LockAcquisition::span() const {
  const ::znbase::roachpb::Span* p = span_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.LockAcquisition.span)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::roachpb::Span*>(
      &::znbase::roachpb::_Span_default_instance_);
}
inline ::znbase::roachpb::Span* LockAcquisition::release_span() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.LockAcquisition.span)
  
  ::znbase::roachpb::Span* temp = span_;
  span_ = NULL;
  return temp;
}
inline ::znbase::roachpb::Span* LockAcquisition::mutable_span() {
  
  if (span_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::roachpb::Span>(GetArenaNoVirtual());
    span_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.LockAcquisition.span)
  return span_;
}
inline void LockAcquisition::set_allocated_span(::znbase::roachpb::Span* span) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete span_;
  }
  if (span) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      span = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, span, submessage_arena);
    }
    
  } else {
    
  }
  span_ = span;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.LockAcquisition.span)
}

inline bool LockAcquisition::has_txn() const {
  return this != internal_default_instance() && txn_ != NULL;
}
inline const ::znbase::storage::engine::enginepb::TxnMeta& LockAcquisition::_internal_txn() const {
  return *txn_;
}
inline const ::znbase::storage::engine::enginepb::TxnMeta& LockAcquisition::txn() const {
  const ::znbase::storage::engine::enginepb::TxnMeta* p = txn_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.LockAcquisition.txn)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::storage::engine::enginepb::TxnMeta*>(
      &::znbase::storage::engine::enginepb::_TxnMeta_default_instance_);
}
inline ::znbase::storage::engine::enginepb::TxnMeta* LockAcquisition::release_txn() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.LockAcquisition.txn)
  
  ::znbase::storage::engine::enginepb::TxnMeta* temp = txn_;
  txn_ = NULL;
  return temp;
}
inline ::znbase::storage::engine::enginepb::TxnMeta* LockAcquisition::mutable_txn() {
  
  if (txn_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::storage::engine::enginepb::TxnMeta>(GetArenaNoVirtual());
    txn_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.LockAcquisition.txn)
  return txn_;
}
inline void LockAcquisition::set_allocated_txn(::znbase::storage::engine::enginepb::TxnMeta* txn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(txn_);
  }
  if (txn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      txn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, txn, submessage_arena);
    }
    
  } else {
    
  }
  txn_ = txn;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.LockAcquisition.txn)
}

// .znbase.storage.concurrency.lock.Durability durability = 3;
inline void LockAcquisition::clear_durability() {
  durability_ = 0;
}
inline ::znbase::storage::concurrency::lock::Durability LockAcquisition::durability() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.LockAcquisition.durability)
  return static_cast< ::znbase::storage::concurrency::lock::Durability >(durability_);
}
inline void LockAcquisition::set_durability(::znbase::storage::concurrency::lock::Durability value) {
  
  durability_ = value;
  // @@protoc_insertion_point(field_set:znbase.roachpb.LockAcquisition.durability)
}

// -------------------------------------------------------------------

// LockUpdate

inline bool LockUpdate::has_span() const {
  return this != internal_default_instance() && span_ != NULL;
}
inline void LockUpdate::clear_span() {
  if (GetArenaNoVirtual() == NULL && span_ != NULL) {
    delete span_;
  }
  span_ = NULL;
}
inline const ::znbase::roachpb::Span& LockUpdate::_internal_span() const {
  return *span_;
}
inline const ::znbase::roachpb::Span& LockUpdate::span() const {
  const ::znbase::roachpb::Span* p = span_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.LockUpdate.span)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::roachpb::Span*>(
      &::znbase::roachpb::_Span_default_instance_);
}
inline ::znbase::roachpb::Span* LockUpdate::release_span() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.LockUpdate.span)
  
  ::znbase::roachpb::Span* temp = span_;
  span_ = NULL;
  return temp;
}
inline ::znbase::roachpb::Span* LockUpdate::mutable_span() {
  
  if (span_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::roachpb::Span>(GetArenaNoVirtual());
    span_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.LockUpdate.span)
  return span_;
}
inline void LockUpdate::set_allocated_span(::znbase::roachpb::Span* span) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete span_;
  }
  if (span) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      span = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, span, submessage_arena);
    }
    
  } else {
    
  }
  span_ = span;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.LockUpdate.span)
}

inline bool LockUpdate::has_txn() const {
  return this != internal_default_instance() && txn_ != NULL;
}
inline const ::znbase::storage::engine::enginepb::TxnMeta& LockUpdate::_internal_txn() const {
  return *txn_;
}
inline const ::znbase::storage::engine::enginepb::TxnMeta& LockUpdate::txn() const {
  const ::znbase::storage::engine::enginepb::TxnMeta* p = txn_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.LockUpdate.txn)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::storage::engine::enginepb::TxnMeta*>(
      &::znbase::storage::engine::enginepb::_TxnMeta_default_instance_);
}
inline ::znbase::storage::engine::enginepb::TxnMeta* LockUpdate::release_txn() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.LockUpdate.txn)
  
  ::znbase::storage::engine::enginepb::TxnMeta* temp = txn_;
  txn_ = NULL;
  return temp;
}
inline ::znbase::storage::engine::enginepb::TxnMeta* LockUpdate::mutable_txn() {
  
  if (txn_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::storage::engine::enginepb::TxnMeta>(GetArenaNoVirtual());
    txn_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.LockUpdate.txn)
  return txn_;
}
inline void LockUpdate::set_allocated_txn(::znbase::storage::engine::enginepb::TxnMeta* txn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(txn_);
  }
  if (txn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      txn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, txn, submessage_arena);
    }
    
  } else {
    
  }
  txn_ = txn;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.LockUpdate.txn)
}

// .znbase.roachpb.TransactionStatus status = 3;
inline void LockUpdate::clear_status() {
  status_ = 0;
}
inline ::znbase::roachpb::TransactionStatus LockUpdate::status() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.LockUpdate.status)
  return static_cast< ::znbase::roachpb::TransactionStatus >(status_);
}
inline void LockUpdate::set_status(::znbase::roachpb::TransactionStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:znbase.roachpb.LockUpdate.status)
}

inline int LockUpdate::ignored_seqnums_size() const {
  return ignored_seqnums_.size();
}
inline ::znbase::storage::engine::enginepb::IgnoredSeqNumRange* LockUpdate::mutable_ignored_seqnums(int index) {
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.LockUpdate.ignored_seqnums)
  return ignored_seqnums_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::znbase::storage::engine::enginepb::IgnoredSeqNumRange >*
LockUpdate::mutable_ignored_seqnums() {
  // @@protoc_insertion_point(field_mutable_list:znbase.roachpb.LockUpdate.ignored_seqnums)
  return &ignored_seqnums_;
}
inline const ::znbase::storage::engine::enginepb::IgnoredSeqNumRange& LockUpdate::ignored_seqnums(int index) const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.LockUpdate.ignored_seqnums)
  return ignored_seqnums_.Get(index);
}
inline ::znbase::storage::engine::enginepb::IgnoredSeqNumRange* LockUpdate::add_ignored_seqnums() {
  // @@protoc_insertion_point(field_add:znbase.roachpb.LockUpdate.ignored_seqnums)
  return ignored_seqnums_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::znbase::storage::engine::enginepb::IgnoredSeqNumRange >&
LockUpdate::ignored_seqnums() const {
  // @@protoc_insertion_point(field_list:znbase.roachpb.LockUpdate.ignored_seqnums)
  return ignored_seqnums_;
}

// -------------------------------------------------------------------

// SequencedWrite

inline void SequencedWrite::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SequencedWrite::key() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.SequencedWrite.key)
  return key_.GetNoArena();
}
inline void SequencedWrite::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:znbase.roachpb.SequencedWrite.key)
}
#if LANG_CXX11
inline void SequencedWrite::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:znbase.roachpb.SequencedWrite.key)
}
#endif
inline void SequencedWrite::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:znbase.roachpb.SequencedWrite.key)
}
inline void SequencedWrite::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:znbase.roachpb.SequencedWrite.key)
}
inline ::std::string* SequencedWrite::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.SequencedWrite.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SequencedWrite::release_key() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.SequencedWrite.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SequencedWrite::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.SequencedWrite.key)
}

inline void SequencedWrite::clear_sequence() {
  sequence_ = 0;
}
inline ::google::protobuf::int32 SequencedWrite::sequence() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.SequencedWrite.sequence)
  return sequence_;
}
inline void SequencedWrite::set_sequence(::google::protobuf::int32 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:znbase.roachpb.SequencedWrite.sequence)
}

// -------------------------------------------------------------------

// Lease

inline bool Lease::has_start() const {
  return this != internal_default_instance() && start_ != NULL;
}
inline const ::znbase::util::hlc::Timestamp& Lease::_internal_start() const {
  return *start_;
}
inline const ::znbase::util::hlc::Timestamp& Lease::start() const {
  const ::znbase::util::hlc::Timestamp* p = start_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.Lease.start)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::util::hlc::Timestamp*>(
      &::znbase::util::hlc::_Timestamp_default_instance_);
}
inline ::znbase::util::hlc::Timestamp* Lease::release_start() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.Lease.start)
  
  ::znbase::util::hlc::Timestamp* temp = start_;
  start_ = NULL;
  return temp;
}
inline ::znbase::util::hlc::Timestamp* Lease::mutable_start() {
  
  if (start_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::util::hlc::Timestamp>(GetArenaNoVirtual());
    start_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.Lease.start)
  return start_;
}
inline void Lease::set_allocated_start(::znbase::util::hlc::Timestamp* start) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(start_);
  }
  if (start) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      start = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.Lease.start)
}

inline bool Lease::has_expiration() const {
  return this != internal_default_instance() && expiration_ != NULL;
}
inline const ::znbase::util::hlc::Timestamp& Lease::_internal_expiration() const {
  return *expiration_;
}
inline const ::znbase::util::hlc::Timestamp& Lease::expiration() const {
  const ::znbase::util::hlc::Timestamp* p = expiration_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.Lease.expiration)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::util::hlc::Timestamp*>(
      &::znbase::util::hlc::_Timestamp_default_instance_);
}
inline ::znbase::util::hlc::Timestamp* Lease::release_expiration() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.Lease.expiration)
  
  ::znbase::util::hlc::Timestamp* temp = expiration_;
  expiration_ = NULL;
  return temp;
}
inline ::znbase::util::hlc::Timestamp* Lease::mutable_expiration() {
  
  if (expiration_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::util::hlc::Timestamp>(GetArenaNoVirtual());
    expiration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.Lease.expiration)
  return expiration_;
}
inline void Lease::set_allocated_expiration(::znbase::util::hlc::Timestamp* expiration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(expiration_);
  }
  if (expiration) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      expiration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expiration, submessage_arena);
    }
    
  } else {
    
  }
  expiration_ = expiration;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.Lease.expiration)
}

inline bool Lease::has_replica() const {
  return this != internal_default_instance() && replica_ != NULL;
}
inline const ::znbase::roachpb::ReplicaDescriptor& Lease::_internal_replica() const {
  return *replica_;
}
inline const ::znbase::roachpb::ReplicaDescriptor& Lease::replica() const {
  const ::znbase::roachpb::ReplicaDescriptor* p = replica_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.Lease.replica)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::roachpb::ReplicaDescriptor*>(
      &::znbase::roachpb::_ReplicaDescriptor_default_instance_);
}
inline ::znbase::roachpb::ReplicaDescriptor* Lease::release_replica() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.Lease.replica)
  
  ::znbase::roachpb::ReplicaDescriptor* temp = replica_;
  replica_ = NULL;
  return temp;
}
inline ::znbase::roachpb::ReplicaDescriptor* Lease::mutable_replica() {
  
  if (replica_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::roachpb::ReplicaDescriptor>(GetArenaNoVirtual());
    replica_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.Lease.replica)
  return replica_;
}
inline void Lease::set_allocated_replica(::znbase::roachpb::ReplicaDescriptor* replica) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(replica_);
  }
  if (replica) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      replica = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, replica, submessage_arena);
    }
    
  } else {
    
  }
  replica_ = replica;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.Lease.replica)
}

inline bool Lease::has_deprecated_start_stasis() const {
  return this != internal_default_instance() && deprecated_start_stasis_ != NULL;
}
inline const ::znbase::util::hlc::Timestamp& Lease::_internal_deprecated_start_stasis() const {
  return *deprecated_start_stasis_;
}
inline const ::znbase::util::hlc::Timestamp& Lease::deprecated_start_stasis() const {
  const ::znbase::util::hlc::Timestamp* p = deprecated_start_stasis_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.Lease.deprecated_start_stasis)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::util::hlc::Timestamp*>(
      &::znbase::util::hlc::_Timestamp_default_instance_);
}
inline ::znbase::util::hlc::Timestamp* Lease::release_deprecated_start_stasis() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.Lease.deprecated_start_stasis)
  
  ::znbase::util::hlc::Timestamp* temp = deprecated_start_stasis_;
  deprecated_start_stasis_ = NULL;
  return temp;
}
inline ::znbase::util::hlc::Timestamp* Lease::mutable_deprecated_start_stasis() {
  
  if (deprecated_start_stasis_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::util::hlc::Timestamp>(GetArenaNoVirtual());
    deprecated_start_stasis_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.Lease.deprecated_start_stasis)
  return deprecated_start_stasis_;
}
inline void Lease::set_allocated_deprecated_start_stasis(::znbase::util::hlc::Timestamp* deprecated_start_stasis) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(deprecated_start_stasis_);
  }
  if (deprecated_start_stasis) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      deprecated_start_stasis = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, deprecated_start_stasis, submessage_arena);
    }
    
  } else {
    
  }
  deprecated_start_stasis_ = deprecated_start_stasis;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.Lease.deprecated_start_stasis)
}

inline bool Lease::has_proposed_ts() const {
  return this != internal_default_instance() && proposed_ts_ != NULL;
}
inline const ::znbase::util::hlc::Timestamp& Lease::_internal_proposed_ts() const {
  return *proposed_ts_;
}
inline const ::znbase::util::hlc::Timestamp& Lease::proposed_ts() const {
  const ::znbase::util::hlc::Timestamp* p = proposed_ts_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.Lease.proposed_ts)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::util::hlc::Timestamp*>(
      &::znbase::util::hlc::_Timestamp_default_instance_);
}
inline ::znbase::util::hlc::Timestamp* Lease::release_proposed_ts() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.Lease.proposed_ts)
  
  ::znbase::util::hlc::Timestamp* temp = proposed_ts_;
  proposed_ts_ = NULL;
  return temp;
}
inline ::znbase::util::hlc::Timestamp* Lease::mutable_proposed_ts() {
  
  if (proposed_ts_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::util::hlc::Timestamp>(GetArenaNoVirtual());
    proposed_ts_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.Lease.proposed_ts)
  return proposed_ts_;
}
inline void Lease::set_allocated_proposed_ts(::znbase::util::hlc::Timestamp* proposed_ts) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(proposed_ts_);
  }
  if (proposed_ts) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      proposed_ts = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, proposed_ts, submessage_arena);
    }
    
  } else {
    
  }
  proposed_ts_ = proposed_ts;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.Lease.proposed_ts)
}

// int64 epoch = 6;
inline void Lease::clear_epoch() {
  epoch_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Lease::epoch() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.Lease.epoch)
  return epoch_;
}
inline void Lease::set_epoch(::google::protobuf::int64 value) {
  
  epoch_ = value;
  // @@protoc_insertion_point(field_set:znbase.roachpb.Lease.epoch)
}

inline void Lease::clear_sequence() {
  sequence_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Lease::sequence() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.Lease.sequence)
  return sequence_;
}
inline void Lease::set_sequence(::google::protobuf::int64 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:znbase.roachpb.Lease.sequence)
}

// -------------------------------------------------------------------

// AbortSpanEntry

inline void AbortSpanEntry::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AbortSpanEntry::key() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.AbortSpanEntry.key)
  return key_.GetNoArena();
}
inline void AbortSpanEntry::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:znbase.roachpb.AbortSpanEntry.key)
}
#if LANG_CXX11
inline void AbortSpanEntry::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:znbase.roachpb.AbortSpanEntry.key)
}
#endif
inline void AbortSpanEntry::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:znbase.roachpb.AbortSpanEntry.key)
}
inline void AbortSpanEntry::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:znbase.roachpb.AbortSpanEntry.key)
}
inline ::std::string* AbortSpanEntry::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.AbortSpanEntry.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AbortSpanEntry::release_key() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.AbortSpanEntry.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AbortSpanEntry::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.AbortSpanEntry.key)
}

inline bool AbortSpanEntry::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
inline const ::znbase::util::hlc::Timestamp& AbortSpanEntry::_internal_timestamp() const {
  return *timestamp_;
}
inline const ::znbase::util::hlc::Timestamp& AbortSpanEntry::timestamp() const {
  const ::znbase::util::hlc::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.AbortSpanEntry.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::util::hlc::Timestamp*>(
      &::znbase::util::hlc::_Timestamp_default_instance_);
}
inline ::znbase::util::hlc::Timestamp* AbortSpanEntry::release_timestamp() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.AbortSpanEntry.timestamp)
  
  ::znbase::util::hlc::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline ::znbase::util::hlc::Timestamp* AbortSpanEntry::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::util::hlc::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.AbortSpanEntry.timestamp)
  return timestamp_;
}
inline void AbortSpanEntry::set_allocated_timestamp(::znbase::util::hlc::Timestamp* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.AbortSpanEntry.timestamp)
}

inline void AbortSpanEntry::clear_priority() {
  priority_ = 0;
}
inline ::google::protobuf::int32 AbortSpanEntry::priority() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.AbortSpanEntry.priority)
  return priority_;
}
inline void AbortSpanEntry::set_priority(::google::protobuf::int32 value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:znbase.roachpb.AbortSpanEntry.priority)
}

// -------------------------------------------------------------------

// TxnCoordMeta

inline bool TxnCoordMeta::has_txn() const {
  return this != internal_default_instance() && txn_ != NULL;
}
inline void TxnCoordMeta::clear_txn() {
  if (GetArenaNoVirtual() == NULL && txn_ != NULL) {
    delete txn_;
  }
  txn_ = NULL;
}
inline const ::znbase::roachpb::Transaction& TxnCoordMeta::_internal_txn() const {
  return *txn_;
}
inline const ::znbase::roachpb::Transaction& TxnCoordMeta::txn() const {
  const ::znbase::roachpb::Transaction* p = txn_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.TxnCoordMeta.txn)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::roachpb::Transaction*>(
      &::znbase::roachpb::_Transaction_default_instance_);
}
inline ::znbase::roachpb::Transaction* TxnCoordMeta::release_txn() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.TxnCoordMeta.txn)
  
  ::znbase::roachpb::Transaction* temp = txn_;
  txn_ = NULL;
  return temp;
}
inline ::znbase::roachpb::Transaction* TxnCoordMeta::mutable_txn() {
  
  if (txn_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::roachpb::Transaction>(GetArenaNoVirtual());
    txn_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.TxnCoordMeta.txn)
  return txn_;
}
inline void TxnCoordMeta::set_allocated_txn(::znbase::roachpb::Transaction* txn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete txn_;
  }
  if (txn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      txn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, txn, submessage_arena);
    }
    
  } else {
    
  }
  txn_ = txn;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.TxnCoordMeta.txn)
}

// int32 command_count = 3;
inline void TxnCoordMeta::clear_command_count() {
  command_count_ = 0;
}
inline ::google::protobuf::int32 TxnCoordMeta::command_count() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.TxnCoordMeta.command_count)
  return command_count_;
}
inline void TxnCoordMeta::set_command_count(::google::protobuf::int32 value) {
  
  command_count_ = value;
  // @@protoc_insertion_point(field_set:znbase.roachpb.TxnCoordMeta.command_count)
}

inline int TxnCoordMeta::refresh_spans_size() const {
  return refresh_spans_.size();
}
inline void TxnCoordMeta::clear_refresh_spans() {
  refresh_spans_.Clear();
}
inline ::znbase::roachpb::Span* TxnCoordMeta::mutable_refresh_spans(int index) {
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.TxnCoordMeta.refresh_spans)
  return refresh_spans_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::Span >*
TxnCoordMeta::mutable_refresh_spans() {
  // @@protoc_insertion_point(field_mutable_list:znbase.roachpb.TxnCoordMeta.refresh_spans)
  return &refresh_spans_;
}
inline const ::znbase::roachpb::Span& TxnCoordMeta::refresh_spans(int index) const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.TxnCoordMeta.refresh_spans)
  return refresh_spans_.Get(index);
}
inline ::znbase::roachpb::Span* TxnCoordMeta::add_refresh_spans() {
  // @@protoc_insertion_point(field_add:znbase.roachpb.TxnCoordMeta.refresh_spans)
  return refresh_spans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::Span >&
TxnCoordMeta::refresh_spans() const {
  // @@protoc_insertion_point(field_list:znbase.roachpb.TxnCoordMeta.refresh_spans)
  return refresh_spans_;
}

// bool refresh_invalid = 7;
inline void TxnCoordMeta::clear_refresh_invalid() {
  refresh_invalid_ = false;
}
inline bool TxnCoordMeta::refresh_invalid() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.TxnCoordMeta.refresh_invalid)
  return refresh_invalid_;
}
inline void TxnCoordMeta::set_refresh_invalid(bool value) {
  
  refresh_invalid_ = value;
  // @@protoc_insertion_point(field_set:znbase.roachpb.TxnCoordMeta.refresh_invalid)
}

inline int TxnCoordMeta::in_flight_writes_size() const {
  return in_flight_writes_.size();
}
inline void TxnCoordMeta::clear_in_flight_writes() {
  in_flight_writes_.Clear();
}
inline ::znbase::roachpb::SequencedWrite* TxnCoordMeta::mutable_in_flight_writes(int index) {
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.TxnCoordMeta.in_flight_writes)
  return in_flight_writes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::SequencedWrite >*
TxnCoordMeta::mutable_in_flight_writes() {
  // @@protoc_insertion_point(field_mutable_list:znbase.roachpb.TxnCoordMeta.in_flight_writes)
  return &in_flight_writes_;
}
inline const ::znbase::roachpb::SequencedWrite& TxnCoordMeta::in_flight_writes(int index) const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.TxnCoordMeta.in_flight_writes)
  return in_flight_writes_.Get(index);
}
inline ::znbase::roachpb::SequencedWrite* TxnCoordMeta::add_in_flight_writes() {
  // @@protoc_insertion_point(field_add:znbase.roachpb.TxnCoordMeta.in_flight_writes)
  return in_flight_writes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::SequencedWrite >&
TxnCoordMeta::in_flight_writes() const {
  // @@protoc_insertion_point(field_list:znbase.roachpb.TxnCoordMeta.in_flight_writes)
  return in_flight_writes_;
}

// -------------------------------------------------------------------

// LeafTxnInputState

inline bool LeafTxnInputState::has_txn() const {
  return this != internal_default_instance() && txn_ != NULL;
}
inline void LeafTxnInputState::clear_txn() {
  if (GetArenaNoVirtual() == NULL && txn_ != NULL) {
    delete txn_;
  }
  txn_ = NULL;
}
inline const ::znbase::roachpb::Transaction& LeafTxnInputState::_internal_txn() const {
  return *txn_;
}
inline const ::znbase::roachpb::Transaction& LeafTxnInputState::txn() const {
  const ::znbase::roachpb::Transaction* p = txn_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.LeafTxnInputState.txn)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::roachpb::Transaction*>(
      &::znbase::roachpb::_Transaction_default_instance_);
}
inline ::znbase::roachpb::Transaction* LeafTxnInputState::release_txn() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.LeafTxnInputState.txn)
  
  ::znbase::roachpb::Transaction* temp = txn_;
  txn_ = NULL;
  return temp;
}
inline ::znbase::roachpb::Transaction* LeafTxnInputState::mutable_txn() {
  
  if (txn_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::roachpb::Transaction>(GetArenaNoVirtual());
    txn_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.LeafTxnInputState.txn)
  return txn_;
}
inline void LeafTxnInputState::set_allocated_txn(::znbase::roachpb::Transaction* txn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete txn_;
  }
  if (txn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      txn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, txn, submessage_arena);
    }
    
  } else {
    
  }
  txn_ = txn;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.LeafTxnInputState.txn)
}

// bool refresh_invalid = 7;
inline void LeafTxnInputState::clear_refresh_invalid() {
  refresh_invalid_ = false;
}
inline bool LeafTxnInputState::refresh_invalid() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.LeafTxnInputState.refresh_invalid)
  return refresh_invalid_;
}
inline void LeafTxnInputState::set_refresh_invalid(bool value) {
  
  refresh_invalid_ = value;
  // @@protoc_insertion_point(field_set:znbase.roachpb.LeafTxnInputState.refresh_invalid)
}

inline int LeafTxnInputState::in_flight_writes_size() const {
  return in_flight_writes_.size();
}
inline void LeafTxnInputState::clear_in_flight_writes() {
  in_flight_writes_.Clear();
}
inline ::znbase::roachpb::SequencedWrite* LeafTxnInputState::mutable_in_flight_writes(int index) {
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.LeafTxnInputState.in_flight_writes)
  return in_flight_writes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::SequencedWrite >*
LeafTxnInputState::mutable_in_flight_writes() {
  // @@protoc_insertion_point(field_mutable_list:znbase.roachpb.LeafTxnInputState.in_flight_writes)
  return &in_flight_writes_;
}
inline const ::znbase::roachpb::SequencedWrite& LeafTxnInputState::in_flight_writes(int index) const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.LeafTxnInputState.in_flight_writes)
  return in_flight_writes_.Get(index);
}
inline ::znbase::roachpb::SequencedWrite* LeafTxnInputState::add_in_flight_writes() {
  // @@protoc_insertion_point(field_add:znbase.roachpb.LeafTxnInputState.in_flight_writes)
  return in_flight_writes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::SequencedWrite >&
LeafTxnInputState::in_flight_writes() const {
  // @@protoc_insertion_point(field_list:znbase.roachpb.LeafTxnInputState.in_flight_writes)
  return in_flight_writes_;
}

// bool stepping_mode_enabled = 9;
inline void LeafTxnInputState::clear_stepping_mode_enabled() {
  stepping_mode_enabled_ = false;
}
inline bool LeafTxnInputState::stepping_mode_enabled() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.LeafTxnInputState.stepping_mode_enabled)
  return stepping_mode_enabled_;
}
inline void LeafTxnInputState::set_stepping_mode_enabled(bool value) {
  
  stepping_mode_enabled_ = value;
  // @@protoc_insertion_point(field_set:znbase.roachpb.LeafTxnInputState.stepping_mode_enabled)
}

inline void LeafTxnInputState::clear_read_seq_num() {
  read_seq_num_ = 0;
}
inline ::google::protobuf::int32 LeafTxnInputState::read_seq_num() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.LeafTxnInputState.read_seq_num)
  return read_seq_num_;
}
inline void LeafTxnInputState::set_read_seq_num(::google::protobuf::int32 value) {
  
  read_seq_num_ = value;
  // @@protoc_insertion_point(field_set:znbase.roachpb.LeafTxnInputState.read_seq_num)
}

// -------------------------------------------------------------------

// LeafTxnFinalState

inline bool LeafTxnFinalState::has_txn() const {
  return this != internal_default_instance() && txn_ != NULL;
}
inline void LeafTxnFinalState::clear_txn() {
  if (GetArenaNoVirtual() == NULL && txn_ != NULL) {
    delete txn_;
  }
  txn_ = NULL;
}
inline const ::znbase::roachpb::Transaction& LeafTxnFinalState::_internal_txn() const {
  return *txn_;
}
inline const ::znbase::roachpb::Transaction& LeafTxnFinalState::txn() const {
  const ::znbase::roachpb::Transaction* p = txn_;
  // @@protoc_insertion_point(field_get:znbase.roachpb.LeafTxnFinalState.txn)
  return p != NULL ? *p : *reinterpret_cast<const ::znbase::roachpb::Transaction*>(
      &::znbase::roachpb::_Transaction_default_instance_);
}
inline ::znbase::roachpb::Transaction* LeafTxnFinalState::release_txn() {
  // @@protoc_insertion_point(field_release:znbase.roachpb.LeafTxnFinalState.txn)
  
  ::znbase::roachpb::Transaction* temp = txn_;
  txn_ = NULL;
  return temp;
}
inline ::znbase::roachpb::Transaction* LeafTxnFinalState::mutable_txn() {
  
  if (txn_ == NULL) {
    auto* p = CreateMaybeMessage<::znbase::roachpb::Transaction>(GetArenaNoVirtual());
    txn_ = p;
  }
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.LeafTxnFinalState.txn)
  return txn_;
}
inline void LeafTxnFinalState::set_allocated_txn(::znbase::roachpb::Transaction* txn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete txn_;
  }
  if (txn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      txn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, txn, submessage_arena);
    }
    
  } else {
    
  }
  txn_ = txn;
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.LeafTxnFinalState.txn)
}

// int32 deprecated_command_count = 3;
inline void LeafTxnFinalState::clear_deprecated_command_count() {
  deprecated_command_count_ = 0;
}
inline ::google::protobuf::int32 LeafTxnFinalState::deprecated_command_count() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.LeafTxnFinalState.deprecated_command_count)
  return deprecated_command_count_;
}
inline void LeafTxnFinalState::set_deprecated_command_count(::google::protobuf::int32 value) {
  
  deprecated_command_count_ = value;
  // @@protoc_insertion_point(field_set:znbase.roachpb.LeafTxnFinalState.deprecated_command_count)
}

inline int LeafTxnFinalState::refresh_spans_size() const {
  return refresh_spans_.size();
}
inline void LeafTxnFinalState::clear_refresh_spans() {
  refresh_spans_.Clear();
}
inline ::znbase::roachpb::Span* LeafTxnFinalState::mutable_refresh_spans(int index) {
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.LeafTxnFinalState.refresh_spans)
  return refresh_spans_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::Span >*
LeafTxnFinalState::mutable_refresh_spans() {
  // @@protoc_insertion_point(field_mutable_list:znbase.roachpb.LeafTxnFinalState.refresh_spans)
  return &refresh_spans_;
}
inline const ::znbase::roachpb::Span& LeafTxnFinalState::refresh_spans(int index) const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.LeafTxnFinalState.refresh_spans)
  return refresh_spans_.Get(index);
}
inline ::znbase::roachpb::Span* LeafTxnFinalState::add_refresh_spans() {
  // @@protoc_insertion_point(field_add:znbase.roachpb.LeafTxnFinalState.refresh_spans)
  return refresh_spans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::Span >&
LeafTxnFinalState::refresh_spans() const {
  // @@protoc_insertion_point(field_list:znbase.roachpb.LeafTxnFinalState.refresh_spans)
  return refresh_spans_;
}

// bool refresh_invalid = 7;
inline void LeafTxnFinalState::clear_refresh_invalid() {
  refresh_invalid_ = false;
}
inline bool LeafTxnFinalState::refresh_invalid() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.LeafTxnFinalState.refresh_invalid)
  return refresh_invalid_;
}
inline void LeafTxnFinalState::set_refresh_invalid(bool value) {
  
  refresh_invalid_ = value;
  // @@protoc_insertion_point(field_set:znbase.roachpb.LeafTxnFinalState.refresh_invalid)
}

// -------------------------------------------------------------------

// Decimal

// int64 form = 1;
inline void Decimal::clear_form() {
  form_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Decimal::form() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.Decimal.form)
  return form_;
}
inline void Decimal::set_form(::google::protobuf::int64 value) {
  
  form_ = value;
  // @@protoc_insertion_point(field_set:znbase.roachpb.Decimal.form)
}

// bool negative = 2;
inline void Decimal::clear_negative() {
  negative_ = false;
}
inline bool Decimal::negative() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.Decimal.negative)
  return negative_;
}
inline void Decimal::set_negative(bool value) {
  
  negative_ = value;
  // @@protoc_insertion_point(field_set:znbase.roachpb.Decimal.negative)
}

// int32 exponent = 3;
inline void Decimal::clear_exponent() {
  exponent_ = 0;
}
inline ::google::protobuf::int32 Decimal::exponent() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.Decimal.exponent)
  return exponent_;
}
inline void Decimal::set_exponent(::google::protobuf::int32 value) {
  
  exponent_ = value;
  // @@protoc_insertion_point(field_set:znbase.roachpb.Decimal.exponent)
}

// bool neg = 4;
inline void Decimal::clear_neg() {
  neg_ = false;
}
inline bool Decimal::neg() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.Decimal.neg)
  return neg_;
}
inline void Decimal::set_neg(bool value) {
  
  neg_ = value;
  // @@protoc_insertion_point(field_set:znbase.roachpb.Decimal.neg)
}

// repeated uint64 abs = 5;
inline int Decimal::abs_size() const {
  return abs_.size();
}
inline void Decimal::clear_abs() {
  abs_.Clear();
}
inline ::google::protobuf::uint64 Decimal::abs(int index) const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.Decimal.abs)
  return abs_.Get(index);
}
inline void Decimal::set_abs(int index, ::google::protobuf::uint64 value) {
  abs_.Set(index, value);
  // @@protoc_insertion_point(field_set:znbase.roachpb.Decimal.abs)
}
inline void Decimal::add_abs(::google::protobuf::uint64 value) {
  abs_.Add(value);
  // @@protoc_insertion_point(field_add:znbase.roachpb.Decimal.abs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Decimal::abs() const {
  // @@protoc_insertion_point(field_list:znbase.roachpb.Decimal.abs)
  return abs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Decimal::mutable_abs() {
  // @@protoc_insertion_point(field_mutable_list:znbase.roachpb.Decimal.abs)
  return &abs_;
}

// -------------------------------------------------------------------

// VecValue

// uint32 col_id = 1;
inline void VecValue::clear_col_id() {
  col_id_ = 0u;
}
inline ::google::protobuf::uint32 VecValue::col_id() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.VecValue.col_id)
  return col_id_;
}
inline void VecValue::set_col_id(::google::protobuf::uint32 value) {
  
  col_id_ = value;
  // @@protoc_insertion_point(field_set:znbase.roachpb.VecValue.col_id)
}

// int32 col_type = 2;
inline void VecValue::clear_col_type() {
  col_type_ = 0;
}
inline ::google::protobuf::int32 VecValue::col_type() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.VecValue.col_type)
  return col_type_;
}
inline void VecValue::set_col_type(::google::protobuf::int32 value) {
  
  col_type_ = value;
  // @@protoc_insertion_point(field_set:znbase.roachpb.VecValue.col_type)
}

// repeated int64 v_int = 3;
inline int VecValue::v_int_size() const {
  return v_int_.size();
}
inline void VecValue::clear_v_int() {
  v_int_.Clear();
}
inline ::google::protobuf::int64 VecValue::v_int(int index) const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.VecValue.v_int)
  return v_int_.Get(index);
}
inline void VecValue::set_v_int(int index, ::google::protobuf::int64 value) {
  v_int_.Set(index, value);
  // @@protoc_insertion_point(field_set:znbase.roachpb.VecValue.v_int)
}
inline void VecValue::add_v_int(::google::protobuf::int64 value) {
  v_int_.Add(value);
  // @@protoc_insertion_point(field_add:znbase.roachpb.VecValue.v_int)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
VecValue::v_int() const {
  // @@protoc_insertion_point(field_list:znbase.roachpb.VecValue.v_int)
  return v_int_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
VecValue::mutable_v_int() {
  // @@protoc_insertion_point(field_mutable_list:znbase.roachpb.VecValue.v_int)
  return &v_int_;
}

// repeated uint64 v_uint = 4;
inline int VecValue::v_uint_size() const {
  return v_uint_.size();
}
inline void VecValue::clear_v_uint() {
  v_uint_.Clear();
}
inline ::google::protobuf::uint64 VecValue::v_uint(int index) const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.VecValue.v_uint)
  return v_uint_.Get(index);
}
inline void VecValue::set_v_uint(int index, ::google::protobuf::uint64 value) {
  v_uint_.Set(index, value);
  // @@protoc_insertion_point(field_set:znbase.roachpb.VecValue.v_uint)
}
inline void VecValue::add_v_uint(::google::protobuf::uint64 value) {
  v_uint_.Add(value);
  // @@protoc_insertion_point(field_add:znbase.roachpb.VecValue.v_uint)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
VecValue::v_uint() const {
  // @@protoc_insertion_point(field_list:znbase.roachpb.VecValue.v_uint)
  return v_uint_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
VecValue::mutable_v_uint() {
  // @@protoc_insertion_point(field_mutable_list:znbase.roachpb.VecValue.v_uint)
  return &v_uint_;
}

// repeated int32 v_int32 = 5;
inline int VecValue::v_int32_size() const {
  return v_int32_.size();
}
inline void VecValue::clear_v_int32() {
  v_int32_.Clear();
}
inline ::google::protobuf::int32 VecValue::v_int32(int index) const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.VecValue.v_int32)
  return v_int32_.Get(index);
}
inline void VecValue::set_v_int32(int index, ::google::protobuf::int32 value) {
  v_int32_.Set(index, value);
  // @@protoc_insertion_point(field_set:znbase.roachpb.VecValue.v_int32)
}
inline void VecValue::add_v_int32(::google::protobuf::int32 value) {
  v_int32_.Add(value);
  // @@protoc_insertion_point(field_add:znbase.roachpb.VecValue.v_int32)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
VecValue::v_int32() const {
  // @@protoc_insertion_point(field_list:znbase.roachpb.VecValue.v_int32)
  return v_int32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
VecValue::mutable_v_int32() {
  // @@protoc_insertion_point(field_mutable_list:znbase.roachpb.VecValue.v_int32)
  return &v_int32_;
}

// repeated double v_double = 6;
inline int VecValue::v_double_size() const {
  return v_double_.size();
}
inline void VecValue::clear_v_double() {
  v_double_.Clear();
}
inline double VecValue::v_double(int index) const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.VecValue.v_double)
  return v_double_.Get(index);
}
inline void VecValue::set_v_double(int index, double value) {
  v_double_.Set(index, value);
  // @@protoc_insertion_point(field_set:znbase.roachpb.VecValue.v_double)
}
inline void VecValue::add_v_double(double value) {
  v_double_.Add(value);
  // @@protoc_insertion_point(field_add:znbase.roachpb.VecValue.v_double)
}
inline const ::google::protobuf::RepeatedField< double >&
VecValue::v_double() const {
  // @@protoc_insertion_point(field_list:znbase.roachpb.VecValue.v_double)
  return v_double_;
}
inline ::google::protobuf::RepeatedField< double >*
VecValue::mutable_v_double() {
  // @@protoc_insertion_point(field_mutable_list:znbase.roachpb.VecValue.v_double)
  return &v_double_;
}

// repeated bytes values = 7;
inline int VecValue::values_size() const {
  return values_.size();
}
inline void VecValue::clear_values() {
  values_.Clear();
}
inline const ::std::string& VecValue::values(int index) const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.VecValue.values)
  return values_.Get(index);
}
inline ::std::string* VecValue::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.VecValue.values)
  return values_.Mutable(index);
}
inline void VecValue::set_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:znbase.roachpb.VecValue.values)
  values_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void VecValue::set_values(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:znbase.roachpb.VecValue.values)
  values_.Mutable(index)->assign(std::move(value));
}
#endif
inline void VecValue::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:znbase.roachpb.VecValue.values)
}
inline void VecValue::set_values(int index, const void* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:znbase.roachpb.VecValue.values)
}
inline ::std::string* VecValue::add_values() {
  // @@protoc_insertion_point(field_add_mutable:znbase.roachpb.VecValue.values)
  return values_.Add();
}
inline void VecValue::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:znbase.roachpb.VecValue.values)
}
#if LANG_CXX11
inline void VecValue::add_values(::std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:znbase.roachpb.VecValue.values)
}
#endif
inline void VecValue::add_values(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:znbase.roachpb.VecValue.values)
}
inline void VecValue::add_values(const void* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:znbase.roachpb.VecValue.values)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VecValue::values() const {
  // @@protoc_insertion_point(field_list:znbase.roachpb.VecValue.values)
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VecValue::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:znbase.roachpb.VecValue.values)
  return &values_;
}

// repeated float v_float = 8;
inline int VecValue::v_float_size() const {
  return v_float_.size();
}
inline void VecValue::clear_v_float() {
  v_float_.Clear();
}
inline float VecValue::v_float(int index) const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.VecValue.v_float)
  return v_float_.Get(index);
}
inline void VecValue::set_v_float(int index, float value) {
  v_float_.Set(index, value);
  // @@protoc_insertion_point(field_set:znbase.roachpb.VecValue.v_float)
}
inline void VecValue::add_v_float(float value) {
  v_float_.Add(value);
  // @@protoc_insertion_point(field_add:znbase.roachpb.VecValue.v_float)
}
inline const ::google::protobuf::RepeatedField< float >&
VecValue::v_float() const {
  // @@protoc_insertion_point(field_list:znbase.roachpb.VecValue.v_float)
  return v_float_;
}
inline ::google::protobuf::RepeatedField< float >*
VecValue::mutable_v_float() {
  // @@protoc_insertion_point(field_mutable_list:znbase.roachpb.VecValue.v_float)
  return &v_float_;
}

// repeated .znbase.roachpb.Decimal v_decimal = 9;
inline int VecValue::v_decimal_size() const {
  return v_decimal_.size();
}
inline void VecValue::clear_v_decimal() {
  v_decimal_.Clear();
}
inline ::znbase::roachpb::Decimal* VecValue::mutable_v_decimal(int index) {
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.VecValue.v_decimal)
  return v_decimal_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::Decimal >*
VecValue::mutable_v_decimal() {
  // @@protoc_insertion_point(field_mutable_list:znbase.roachpb.VecValue.v_decimal)
  return &v_decimal_;
}
inline const ::znbase::roachpb::Decimal& VecValue::v_decimal(int index) const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.VecValue.v_decimal)
  return v_decimal_.Get(index);
}
inline ::znbase::roachpb::Decimal* VecValue::add_v_decimal() {
  // @@protoc_insertion_point(field_add:znbase.roachpb.VecValue.v_decimal)
  return v_decimal_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::Decimal >&
VecValue::v_decimal() const {
  // @@protoc_insertion_point(field_list:znbase.roachpb.VecValue.v_decimal)
  return v_decimal_;
}

// -------------------------------------------------------------------

// NullValue

// repeated bool index = 1;
inline int NullValue::index_size() const {
  return index_.size();
}
inline void NullValue::clear_index() {
  index_.Clear();
}
inline bool NullValue::index(int index) const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.NullValue.index)
  return index_.Get(index);
}
inline void NullValue::set_index(int index, bool value) {
  index_.Set(index, value);
  // @@protoc_insertion_point(field_set:znbase.roachpb.NullValue.index)
}
inline void NullValue::add_index(bool value) {
  index_.Add(value);
  // @@protoc_insertion_point(field_add:znbase.roachpb.NullValue.index)
}
inline const ::google::protobuf::RepeatedField< bool >&
NullValue::index() const {
  // @@protoc_insertion_point(field_list:znbase.roachpb.NullValue.index)
  return index_;
}
inline ::google::protobuf::RepeatedField< bool >*
NullValue::mutable_index() {
  // @@protoc_insertion_point(field_mutable_list:znbase.roachpb.NullValue.index)
  return &index_;
}

// -------------------------------------------------------------------

// VecResults

// int64 count = 1;
inline void VecResults::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VecResults::count() const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.VecResults.count)
  return count_;
}
inline void VecResults::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:znbase.roachpb.VecResults.count)
}

inline int VecResults::col_ids_size() const {
  return col_ids_.size();
}
inline void VecResults::clear_col_ids() {
  col_ids_.Clear();
}
inline ::google::protobuf::int32 VecResults::col_ids(int index) const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.VecResults.col_ids)
  return col_ids_.Get(index);
}
inline void VecResults::set_col_ids(int index, ::google::protobuf::int32 value) {
  col_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:znbase.roachpb.VecResults.col_ids)
}
inline void VecResults::add_col_ids(::google::protobuf::int32 value) {
  col_ids_.Add(value);
  // @@protoc_insertion_point(field_add:znbase.roachpb.VecResults.col_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
VecResults::col_ids() const {
  // @@protoc_insertion_point(field_list:znbase.roachpb.VecResults.col_ids)
  return col_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
VecResults::mutable_col_ids() {
  // @@protoc_insertion_point(field_mutable_list:znbase.roachpb.VecResults.col_ids)
  return &col_ids_;
}

// repeated .znbase.roachpb.VecValue col_values = 3;
inline int VecResults::col_values_size() const {
  return col_values_.size();
}
inline void VecResults::clear_col_values() {
  col_values_.Clear();
}
inline ::znbase::roachpb::VecValue* VecResults::mutable_col_values(int index) {
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.VecResults.col_values)
  return col_values_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::VecValue >*
VecResults::mutable_col_values() {
  // @@protoc_insertion_point(field_mutable_list:znbase.roachpb.VecResults.col_values)
  return &col_values_;
}
inline const ::znbase::roachpb::VecValue& VecResults::col_values(int index) const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.VecResults.col_values)
  return col_values_.Get(index);
}
inline ::znbase::roachpb::VecValue* VecResults::add_col_values() {
  // @@protoc_insertion_point(field_add:znbase.roachpb.VecResults.col_values)
  return col_values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::VecValue >&
VecResults::col_values() const {
  // @@protoc_insertion_point(field_list:znbase.roachpb.VecResults.col_values)
  return col_values_;
}

// repeated .znbase.roachpb.NullValue null_values = 4;
inline int VecResults::null_values_size() const {
  return null_values_.size();
}
inline void VecResults::clear_null_values() {
  null_values_.Clear();
}
inline ::znbase::roachpb::NullValue* VecResults::mutable_null_values(int index) {
  // @@protoc_insertion_point(field_mutable:znbase.roachpb.VecResults.null_values)
  return null_values_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::NullValue >*
VecResults::mutable_null_values() {
  // @@protoc_insertion_point(field_mutable_list:znbase.roachpb.VecResults.null_values)
  return &null_values_;
}
inline const ::znbase::roachpb::NullValue& VecResults::null_values(int index) const {
  // @@protoc_insertion_point(field_get:znbase.roachpb.VecResults.null_values)
  return null_values_.Get(index);
}
inline ::znbase::roachpb::NullValue* VecResults::add_null_values() {
  // @@protoc_insertion_point(field_add:znbase.roachpb.VecResults.null_values)
  return null_values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::znbase::roachpb::NullValue >&
VecResults::null_values() const {
  // @@protoc_insertion_point(field_list:znbase.roachpb.VecResults.null_values)
  return null_values_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace roachpb
}  // namespace znbase

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::znbase::roachpb::ValueType> : ::std::true_type {};
template <> struct is_proto_enum< ::znbase::roachpb::ReplicaChangeType> : ::std::true_type {};
template <> struct is_proto_enum< ::znbase::roachpb::TransactionStatus> : ::std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_roachpb_2fdata_2eproto
