// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: roachpb/data.proto

#include "roachpb/data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_roachpb_2fdata_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Decimal;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Intent_SingleKeySpan;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NullValue;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SequencedWrite;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Span;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ChangeReplicasTrigger;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ModifiedSpanTrigger;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ObservedTimestamp;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SplitTrigger;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Value;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_VecValue;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_MergeTrigger;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fdata_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_Transaction;
}  // namespace protobuf_roachpb_2fdata_2eproto
namespace protobuf_roachpb_2fmetadata_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fmetadata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReplicaDescriptor;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fmetadata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RangeDescriptor;
}  // namespace protobuf_roachpb_2fmetadata_2eproto
namespace protobuf_storage_2fengine_2fenginepb_2fmvcc3_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_storage_2fengine_2fenginepb_2fmvcc3_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_IgnoredSeqNumRange;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_storage_2fengine_2fenginepb_2fmvcc3_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TxnMeta;
}  // namespace protobuf_storage_2fengine_2fenginepb_2fmvcc3_2eproto
namespace protobuf_storage_2fengine_2fenginepb_2fmvcc_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_storage_2fengine_2fenginepb_2fmvcc_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MVCCStats;
}  // namespace protobuf_storage_2fengine_2fenginepb_2fmvcc_2eproto
namespace protobuf_util_2fhlc_2ftimestamp_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_util_2fhlc_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp;
}  // namespace protobuf_util_2fhlc_2ftimestamp_2eproto
namespace znbase {
namespace roachpb {
class SpanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Span>
      _instance;
} _Span_default_instance_;
class ValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Value>
      _instance;
} _Value_default_instance_;
class KeyValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KeyValue>
      _instance;
} _KeyValue_default_instance_;
class StoreIdentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StoreIdent>
      _instance;
} _StoreIdent_default_instance_;
class SplitTriggerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SplitTrigger>
      _instance;
} _SplitTrigger_default_instance_;
class MergeTriggerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MergeTrigger>
      _instance;
} _MergeTrigger_default_instance_;
class ChangeReplicasTriggerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChangeReplicasTrigger>
      _instance;
} _ChangeReplicasTrigger_default_instance_;
class ModifiedSpanTriggerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ModifiedSpanTrigger>
      _instance;
} _ModifiedSpanTrigger_default_instance_;
class InternalCommitTriggerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InternalCommitTrigger>
      _instance;
} _InternalCommitTrigger_default_instance_;
class ObservedTimestampDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObservedTimestamp>
      _instance;
} _ObservedTimestamp_default_instance_;
class TransactionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Transaction>
      _instance;
} _Transaction_default_instance_;
class TransactionRecordDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransactionRecord>
      _instance;
} _TransactionRecord_default_instance_;
class Intent_SingleKeySpanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Intent_SingleKeySpan>
      _instance;
} _Intent_SingleKeySpan_default_instance_;
class IntentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Intent>
      _instance;
} _Intent_default_instance_;
class LockAcquisitionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LockAcquisition>
      _instance;
} _LockAcquisition_default_instance_;
class LockUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LockUpdate>
      _instance;
} _LockUpdate_default_instance_;
class SequencedWriteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SequencedWrite>
      _instance;
} _SequencedWrite_default_instance_;
class LeaseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Lease>
      _instance;
} _Lease_default_instance_;
class AbortSpanEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AbortSpanEntry>
      _instance;
} _AbortSpanEntry_default_instance_;
class TxnCoordMetaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TxnCoordMeta>
      _instance;
} _TxnCoordMeta_default_instance_;
class LeafTxnInputStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LeafTxnInputState>
      _instance;
} _LeafTxnInputState_default_instance_;
class LeafTxnFinalStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LeafTxnFinalState>
      _instance;
} _LeafTxnFinalState_default_instance_;
class DecimalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Decimal>
      _instance;
} _Decimal_default_instance_;
class VecValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VecValue>
      _instance;
} _VecValue_default_instance_;
class NullValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NullValue>
      _instance;
} _NullValue_default_instance_;
class VecResultsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VecResults>
      _instance;
} _VecResults_default_instance_;
}  // namespace roachpb
}  // namespace znbase
namespace protobuf_roachpb_2fdata_2eproto {
static void InitDefaultsSpan() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_Span_default_instance_;
    new (ptr) ::znbase::roachpb::Span();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::Span::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Span =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSpan}, {}};

static void InitDefaultsValue() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_Value_default_instance_;
    new (ptr) ::znbase::roachpb::Value();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::Value::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Value =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsValue}, {
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsKeyValue() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_KeyValue_default_instance_;
    new (ptr) ::znbase::roachpb::KeyValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::KeyValue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_KeyValue =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsKeyValue}, {
      &protobuf_roachpb_2fdata_2eproto::scc_info_Value.base,}};

static void InitDefaultsStoreIdent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_StoreIdent_default_instance_;
    new (ptr) ::znbase::roachpb::StoreIdent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::StoreIdent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StoreIdent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStoreIdent}, {}};

static void InitDefaultsSplitTrigger() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_SplitTrigger_default_instance_;
    new (ptr) ::znbase::roachpb::SplitTrigger();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::SplitTrigger::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SplitTrigger =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSplitTrigger}, {
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_RangeDescriptor.base,}};

static void InitDefaultsMergeTrigger() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_MergeTrigger_default_instance_;
    new (ptr) ::znbase::roachpb::MergeTrigger();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::MergeTrigger::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_MergeTrigger =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsMergeTrigger}, {
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_RangeDescriptor.base,
      &protobuf_storage_2fengine_2fenginepb_2fmvcc_2eproto::scc_info_MVCCStats.base,
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsChangeReplicasTrigger() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_ChangeReplicasTrigger_default_instance_;
    new (ptr) ::znbase::roachpb::ChangeReplicasTrigger();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::ChangeReplicasTrigger::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ChangeReplicasTrigger =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsChangeReplicasTrigger}, {
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_ReplicaDescriptor.base,}};

static void InitDefaultsModifiedSpanTrigger() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_ModifiedSpanTrigger_default_instance_;
    new (ptr) ::znbase::roachpb::ModifiedSpanTrigger();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::ModifiedSpanTrigger::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ModifiedSpanTrigger =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsModifiedSpanTrigger}, {
      &protobuf_roachpb_2fdata_2eproto::scc_info_Span.base,}};

static void InitDefaultsInternalCommitTrigger() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_InternalCommitTrigger_default_instance_;
    new (ptr) ::znbase::roachpb::InternalCommitTrigger();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::InternalCommitTrigger::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_InternalCommitTrigger =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsInternalCommitTrigger}, {
      &protobuf_roachpb_2fdata_2eproto::scc_info_SplitTrigger.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_MergeTrigger.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_ChangeReplicasTrigger.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_ModifiedSpanTrigger.base,}};

static void InitDefaultsObservedTimestamp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_ObservedTimestamp_default_instance_;
    new (ptr) ::znbase::roachpb::ObservedTimestamp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::ObservedTimestamp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ObservedTimestamp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsObservedTimestamp}, {
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsTransaction() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_Transaction_default_instance_;
    new (ptr) ::znbase::roachpb::Transaction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::Transaction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_Transaction =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsTransaction}, {
      &protobuf_storage_2fengine_2fenginepb_2fmvcc3_2eproto::scc_info_TxnMeta.base,
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_ObservedTimestamp.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_Span.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_SequencedWrite.base,
      &protobuf_storage_2fengine_2fenginepb_2fmvcc3_2eproto::scc_info_IgnoredSeqNumRange.base,}};

static void InitDefaultsTransactionRecord() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_TransactionRecord_default_instance_;
    new (ptr) ::znbase::roachpb::TransactionRecord();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::TransactionRecord::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_TransactionRecord =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsTransactionRecord}, {
      &protobuf_storage_2fengine_2fenginepb_2fmvcc3_2eproto::scc_info_TxnMeta.base,
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_Span.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_SequencedWrite.base,
      &protobuf_storage_2fengine_2fenginepb_2fmvcc3_2eproto::scc_info_IgnoredSeqNumRange.base,}};

static void InitDefaultsIntent_SingleKeySpan() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_Intent_SingleKeySpan_default_instance_;
    new (ptr) ::znbase::roachpb::Intent_SingleKeySpan();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::Intent_SingleKeySpan::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Intent_SingleKeySpan =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIntent_SingleKeySpan}, {}};

static void InitDefaultsIntent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_Intent_default_instance_;
    new (ptr) ::znbase::roachpb::Intent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::Intent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Intent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsIntent}, {
      &protobuf_roachpb_2fdata_2eproto::scc_info_Intent_SingleKeySpan.base,
      &protobuf_storage_2fengine_2fenginepb_2fmvcc3_2eproto::scc_info_TxnMeta.base,
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsLockAcquisition() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_LockAcquisition_default_instance_;
    new (ptr) ::znbase::roachpb::LockAcquisition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::LockAcquisition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LockAcquisition =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLockAcquisition}, {
      &protobuf_roachpb_2fdata_2eproto::scc_info_Span.base,
      &protobuf_storage_2fengine_2fenginepb_2fmvcc3_2eproto::scc_info_TxnMeta.base,}};

static void InitDefaultsLockUpdate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_LockUpdate_default_instance_;
    new (ptr) ::znbase::roachpb::LockUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::LockUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_LockUpdate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsLockUpdate}, {
      &protobuf_roachpb_2fdata_2eproto::scc_info_Span.base,
      &protobuf_storage_2fengine_2fenginepb_2fmvcc3_2eproto::scc_info_TxnMeta.base,
      &protobuf_storage_2fengine_2fenginepb_2fmvcc3_2eproto::scc_info_IgnoredSeqNumRange.base,}};

static void InitDefaultsSequencedWrite() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_SequencedWrite_default_instance_;
    new (ptr) ::znbase::roachpb::SequencedWrite();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::SequencedWrite::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SequencedWrite =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSequencedWrite}, {}};

static void InitDefaultsLease() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_Lease_default_instance_;
    new (ptr) ::znbase::roachpb::Lease();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::Lease::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Lease =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLease}, {
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_ReplicaDescriptor.base,}};

static void InitDefaultsAbortSpanEntry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_AbortSpanEntry_default_instance_;
    new (ptr) ::znbase::roachpb::AbortSpanEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::AbortSpanEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AbortSpanEntry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAbortSpanEntry}, {
      &protobuf_util_2fhlc_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsTxnCoordMeta() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_TxnCoordMeta_default_instance_;
    new (ptr) ::znbase::roachpb::TxnCoordMeta();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::TxnCoordMeta::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_TxnCoordMeta =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsTxnCoordMeta}, {
      &protobuf_roachpb_2fdata_2eproto::scc_info_Transaction.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_Span.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_SequencedWrite.base,}};

static void InitDefaultsLeafTxnInputState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_LeafTxnInputState_default_instance_;
    new (ptr) ::znbase::roachpb::LeafTxnInputState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::LeafTxnInputState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LeafTxnInputState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLeafTxnInputState}, {
      &protobuf_roachpb_2fdata_2eproto::scc_info_Transaction.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_SequencedWrite.base,}};

static void InitDefaultsLeafTxnFinalState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_LeafTxnFinalState_default_instance_;
    new (ptr) ::znbase::roachpb::LeafTxnFinalState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::LeafTxnFinalState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LeafTxnFinalState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLeafTxnFinalState}, {
      &protobuf_roachpb_2fdata_2eproto::scc_info_Transaction.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_Span.base,}};

static void InitDefaultsDecimal() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_Decimal_default_instance_;
    new (ptr) ::znbase::roachpb::Decimal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::Decimal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Decimal =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDecimal}, {}};

static void InitDefaultsVecValue() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_VecValue_default_instance_;
    new (ptr) ::znbase::roachpb::VecValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::VecValue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VecValue =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVecValue}, {
      &protobuf_roachpb_2fdata_2eproto::scc_info_Decimal.base,}};

static void InitDefaultsNullValue() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_NullValue_default_instance_;
    new (ptr) ::znbase::roachpb::NullValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::NullValue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NullValue =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNullValue}, {}};

static void InitDefaultsVecResults() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_VecResults_default_instance_;
    new (ptr) ::znbase::roachpb::VecResults();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::VecResults::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_VecResults =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsVecResults}, {
      &protobuf_roachpb_2fdata_2eproto::scc_info_VecValue.base,
      &protobuf_roachpb_2fdata_2eproto::scc_info_NullValue.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Span.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Value.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KeyValue.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StoreIdent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SplitTrigger.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MergeTrigger.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChangeReplicasTrigger.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ModifiedSpanTrigger.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InternalCommitTrigger.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ObservedTimestamp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Transaction.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransactionRecord.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Intent_SingleKeySpan.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Intent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LockAcquisition.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LockUpdate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SequencedWrite.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Lease.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AbortSpanEntry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TxnCoordMeta.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LeafTxnInputState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LeafTxnFinalState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Decimal.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VecValue.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NullValue.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VecResults.base);
}

}  // namespace protobuf_roachpb_2fdata_2eproto
namespace znbase {
namespace roachpb {
bool ValueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
    case 10:
    case 11:
    case 100:
      return true;
    default:
      return false;
  }
}

bool ReplicaChangeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

bool TransactionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Span::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span::kKeyFieldNumber;
const int Span::kEndKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span::Span()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_Span.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.Span)
}
Span::Span(const Span& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.end_key().size() > 0) {
    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.Span)
}

void Span::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Span::~Span() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.Span)
  SharedDtor();
}

void Span::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Span::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Span& Span::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_Span.base);
  return *internal_default_instance();
}


void Span::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.Span)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Span::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.Span)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.Span)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.Span)
  return false;
#undef DO_
}

void Span::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.Span)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->key(), output);
  }

  if (this->end_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->end_key(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.Span)
}

size_t Span::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.Span)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  if (this->end_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->end_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Span::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Span*>(&from));
}

void Span::MergeFrom(const Span& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.Span)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.end_key().size() > 0) {

    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
}

void Span::CopyFrom(const Span& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.Span)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span::IsInitialized() const {
  return true;
}

void Span::Swap(Span* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span::InternalSwap(Span* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  end_key_.Swap(&other->end_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Span::GetTypeName() const {
  return "znbase.roachpb.Span";
}


// ===================================================================

void Value::InitAsDefaultInstance() {
  ::znbase::roachpb::_Value_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::znbase::util::hlc::Timestamp*>(
      ::znbase::util::hlc::Timestamp::internal_default_instance());
}
void Value::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Value::kRawBytesFieldNumber;
const int Value::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Value::Value()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_Value.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.Value)
}
Value::Value(const Value& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  raw_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.raw_bytes().size() > 0) {
    raw_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_bytes_);
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::znbase::util::hlc::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.Value)
}

void Value::SharedCtor() {
  raw_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = NULL;
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.Value)
  SharedDtor();
}

void Value::SharedDtor() {
  raw_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void Value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Value& Value::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_Value.base);
  return *internal_default_instance();
}


void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.Value)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raw_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  _internal_metadata_.Clear();
}

bool Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.Value)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes raw_bytes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.Value)
  return false;
#undef DO_
}

void Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.Value)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes raw_bytes = 1;
  if (this->raw_bytes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->raw_bytes(), output);
  }

  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_timestamp(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.Value)
}

size_t Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.Value)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // bytes raw_bytes = 1;
  if (this->raw_bytes().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->raw_bytes());
  }

  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Value::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Value*>(&from));
}

void Value::MergeFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.Value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.raw_bytes().size() > 0) {

    raw_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_bytes_);
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::znbase::util::hlc::Timestamp::MergeFrom(from.timestamp());
  }
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  return true;
}

void Value::Swap(Value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Value::InternalSwap(Value* other) {
  using std::swap;
  raw_bytes_.Swap(&other->raw_bytes_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Value::GetTypeName() const {
  return "znbase.roachpb.Value";
}


// ===================================================================

void KeyValue::InitAsDefaultInstance() {
  ::znbase::roachpb::_KeyValue_default_instance_._instance.get_mutable()->value_ = const_cast< ::znbase::roachpb::Value*>(
      ::znbase::roachpb::Value::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyValue::kKeyFieldNumber;
const int KeyValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyValue::KeyValue()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_KeyValue.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.KeyValue)
}
KeyValue::KeyValue(const KeyValue& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_value()) {
    value_ = new ::znbase::roachpb::Value(*from.value_);
  } else {
    value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.KeyValue)
}

void KeyValue::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
}

KeyValue::~KeyValue() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.KeyValue)
  SharedDtor();
}

void KeyValue::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void KeyValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyValue& KeyValue::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_KeyValue.base);
  return *internal_default_instance();
}


void KeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.KeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  _internal_metadata_.Clear();
}

bool KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.KeyValue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.KeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.KeyValue)
  return false;
#undef DO_
}

void KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.KeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_value(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.KeyValue)
}

size_t KeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.KeyValue)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyValue::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const KeyValue*>(&from));
}

void KeyValue::MergeFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_value()) {
    mutable_value()->::znbase::roachpb::Value::MergeFrom(from.value());
  }
}

void KeyValue::CopyFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValue::IsInitialized() const {
  return true;
}

void KeyValue::Swap(KeyValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyValue::InternalSwap(KeyValue* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string KeyValue::GetTypeName() const {
  return "znbase.roachpb.KeyValue";
}


// ===================================================================

void StoreIdent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoreIdent::kClusterIdFieldNumber;
const int StoreIdent::kNodeIdFieldNumber;
const int StoreIdent::kStoreIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoreIdent::StoreIdent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_StoreIdent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.StoreIdent)
}
StoreIdent::StoreIdent(const StoreIdent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&store_id_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(store_id_));
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.StoreIdent)
}

void StoreIdent::SharedCtor() {
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&store_id_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(store_id_));
}

StoreIdent::~StoreIdent() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.StoreIdent)
  SharedDtor();
}

void StoreIdent::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StoreIdent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoreIdent& StoreIdent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_StoreIdent.base);
  return *internal_default_instance();
}


void StoreIdent::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.StoreIdent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&store_id_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(store_id_));
  _internal_metadata_.Clear();
}

bool StoreIdent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.StoreIdent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cluster_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &store_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.StoreIdent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.StoreIdent)
  return false;
#undef DO_
}

void StoreIdent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.StoreIdent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->cluster_id(), output);
  }

  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->node_id(), output);
  }

  if (this->store_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->store_id(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.StoreIdent)
}

size_t StoreIdent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.StoreIdent)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cluster_id());
  }

  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_id());
  }

  if (this->store_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->store_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoreIdent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StoreIdent*>(&from));
}

void StoreIdent::MergeFrom(const StoreIdent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.StoreIdent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.store_id() != 0) {
    set_store_id(from.store_id());
  }
}

void StoreIdent::CopyFrom(const StoreIdent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.StoreIdent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreIdent::IsInitialized() const {
  return true;
}

void StoreIdent::Swap(StoreIdent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreIdent::InternalSwap(StoreIdent* other) {
  using std::swap;
  cluster_id_.Swap(&other->cluster_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(node_id_, other->node_id_);
  swap(store_id_, other->store_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string StoreIdent::GetTypeName() const {
  return "znbase.roachpb.StoreIdent";
}


// ===================================================================

void SplitTrigger::InitAsDefaultInstance() {
  ::znbase::roachpb::_SplitTrigger_default_instance_._instance.get_mutable()->left_desc_ = const_cast< ::znbase::roachpb::RangeDescriptor*>(
      ::znbase::roachpb::RangeDescriptor::internal_default_instance());
  ::znbase::roachpb::_SplitTrigger_default_instance_._instance.get_mutable()->right_desc_ = const_cast< ::znbase::roachpb::RangeDescriptor*>(
      ::znbase::roachpb::RangeDescriptor::internal_default_instance());
}
void SplitTrigger::clear_left_desc() {
  if (GetArenaNoVirtual() == NULL && left_desc_ != NULL) {
    delete left_desc_;
  }
  left_desc_ = NULL;
}
void SplitTrigger::clear_right_desc() {
  if (GetArenaNoVirtual() == NULL && right_desc_ != NULL) {
    delete right_desc_;
  }
  right_desc_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SplitTrigger::kLeftDescFieldNumber;
const int SplitTrigger::kRightDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SplitTrigger::SplitTrigger()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_SplitTrigger.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.SplitTrigger)
}
SplitTrigger::SplitTrigger(const SplitTrigger& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_left_desc()) {
    left_desc_ = new ::znbase::roachpb::RangeDescriptor(*from.left_desc_);
  } else {
    left_desc_ = NULL;
  }
  if (from.has_right_desc()) {
    right_desc_ = new ::znbase::roachpb::RangeDescriptor(*from.right_desc_);
  } else {
    right_desc_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.SplitTrigger)
}

void SplitTrigger::SharedCtor() {
  ::memset(&left_desc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_desc_) -
      reinterpret_cast<char*>(&left_desc_)) + sizeof(right_desc_));
}

SplitTrigger::~SplitTrigger() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.SplitTrigger)
  SharedDtor();
}

void SplitTrigger::SharedDtor() {
  if (this != internal_default_instance()) delete left_desc_;
  if (this != internal_default_instance()) delete right_desc_;
}

void SplitTrigger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SplitTrigger& SplitTrigger::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_SplitTrigger.base);
  return *internal_default_instance();
}


void SplitTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.SplitTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && left_desc_ != NULL) {
    delete left_desc_;
  }
  left_desc_ = NULL;
  if (GetArenaNoVirtual() == NULL && right_desc_ != NULL) {
    delete right_desc_;
  }
  right_desc_ = NULL;
  _internal_metadata_.Clear();
}

bool SplitTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.SplitTrigger)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_left_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_right_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.SplitTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.SplitTrigger)
  return false;
#undef DO_
}

void SplitTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.SplitTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_left_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_left_desc(), output);
  }

  if (this->has_right_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_right_desc(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.SplitTrigger)
}

size_t SplitTrigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.SplitTrigger)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_left_desc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *left_desc_);
  }

  if (this->has_right_desc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *right_desc_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SplitTrigger::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SplitTrigger*>(&from));
}

void SplitTrigger::MergeFrom(const SplitTrigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.SplitTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_left_desc()) {
    mutable_left_desc()->::znbase::roachpb::RangeDescriptor::MergeFrom(from.left_desc());
  }
  if (from.has_right_desc()) {
    mutable_right_desc()->::znbase::roachpb::RangeDescriptor::MergeFrom(from.right_desc());
  }
}

void SplitTrigger::CopyFrom(const SplitTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.SplitTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitTrigger::IsInitialized() const {
  return true;
}

void SplitTrigger::Swap(SplitTrigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SplitTrigger::InternalSwap(SplitTrigger* other) {
  using std::swap;
  swap(left_desc_, other->left_desc_);
  swap(right_desc_, other->right_desc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SplitTrigger::GetTypeName() const {
  return "znbase.roachpb.SplitTrigger";
}


// ===================================================================

void MergeTrigger::InitAsDefaultInstance() {
  ::znbase::roachpb::_MergeTrigger_default_instance_._instance.get_mutable()->left_desc_ = const_cast< ::znbase::roachpb::RangeDescriptor*>(
      ::znbase::roachpb::RangeDescriptor::internal_default_instance());
  ::znbase::roachpb::_MergeTrigger_default_instance_._instance.get_mutable()->right_desc_ = const_cast< ::znbase::roachpb::RangeDescriptor*>(
      ::znbase::roachpb::RangeDescriptor::internal_default_instance());
  ::znbase::roachpb::_MergeTrigger_default_instance_._instance.get_mutable()->right_mvcc_stats_ = const_cast< ::znbase::storage::engine::enginepb::MVCCStats*>(
      ::znbase::storage::engine::enginepb::MVCCStats::internal_default_instance());
  ::znbase::roachpb::_MergeTrigger_default_instance_._instance.get_mutable()->freeze_start_ = const_cast< ::znbase::util::hlc::Timestamp*>(
      ::znbase::util::hlc::Timestamp::internal_default_instance());
}
void MergeTrigger::clear_left_desc() {
  if (GetArenaNoVirtual() == NULL && left_desc_ != NULL) {
    delete left_desc_;
  }
  left_desc_ = NULL;
}
void MergeTrigger::clear_right_desc() {
  if (GetArenaNoVirtual() == NULL && right_desc_ != NULL) {
    delete right_desc_;
  }
  right_desc_ = NULL;
}
void MergeTrigger::clear_right_mvcc_stats() {
  if (GetArenaNoVirtual() == NULL && right_mvcc_stats_ != NULL) {
    delete right_mvcc_stats_;
  }
  right_mvcc_stats_ = NULL;
}
void MergeTrigger::clear_freeze_start() {
  if (GetArenaNoVirtual() == NULL && freeze_start_ != NULL) {
    delete freeze_start_;
  }
  freeze_start_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MergeTrigger::kLeftDescFieldNumber;
const int MergeTrigger::kRightDescFieldNumber;
const int MergeTrigger::kRightMvccStatsFieldNumber;
const int MergeTrigger::kFreezeStartFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MergeTrigger::MergeTrigger()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_MergeTrigger.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.MergeTrigger)
}
MergeTrigger::MergeTrigger(const MergeTrigger& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_left_desc()) {
    left_desc_ = new ::znbase::roachpb::RangeDescriptor(*from.left_desc_);
  } else {
    left_desc_ = NULL;
  }
  if (from.has_right_desc()) {
    right_desc_ = new ::znbase::roachpb::RangeDescriptor(*from.right_desc_);
  } else {
    right_desc_ = NULL;
  }
  if (from.has_right_mvcc_stats()) {
    right_mvcc_stats_ = new ::znbase::storage::engine::enginepb::MVCCStats(*from.right_mvcc_stats_);
  } else {
    right_mvcc_stats_ = NULL;
  }
  if (from.has_freeze_start()) {
    freeze_start_ = new ::znbase::util::hlc::Timestamp(*from.freeze_start_);
  } else {
    freeze_start_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.MergeTrigger)
}

void MergeTrigger::SharedCtor() {
  ::memset(&left_desc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&freeze_start_) -
      reinterpret_cast<char*>(&left_desc_)) + sizeof(freeze_start_));
}

MergeTrigger::~MergeTrigger() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.MergeTrigger)
  SharedDtor();
}

void MergeTrigger::SharedDtor() {
  if (this != internal_default_instance()) delete left_desc_;
  if (this != internal_default_instance()) delete right_desc_;
  if (this != internal_default_instance()) delete right_mvcc_stats_;
  if (this != internal_default_instance()) delete freeze_start_;
}

void MergeTrigger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MergeTrigger& MergeTrigger::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_MergeTrigger.base);
  return *internal_default_instance();
}


void MergeTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.MergeTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && left_desc_ != NULL) {
    delete left_desc_;
  }
  left_desc_ = NULL;
  if (GetArenaNoVirtual() == NULL && right_desc_ != NULL) {
    delete right_desc_;
  }
  right_desc_ = NULL;
  if (GetArenaNoVirtual() == NULL && right_mvcc_stats_ != NULL) {
    delete right_mvcc_stats_;
  }
  right_mvcc_stats_ = NULL;
  if (GetArenaNoVirtual() == NULL && freeze_start_ != NULL) {
    delete freeze_start_;
  }
  freeze_start_ = NULL;
  _internal_metadata_.Clear();
}

bool MergeTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.MergeTrigger)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_left_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_right_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_right_mvcc_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_freeze_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.MergeTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.MergeTrigger)
  return false;
#undef DO_
}

void MergeTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.MergeTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_left_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_left_desc(), output);
  }

  if (this->has_right_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_right_desc(), output);
  }

  if (this->has_right_mvcc_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_right_mvcc_stats(), output);
  }

  if (this->has_freeze_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_freeze_start(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.MergeTrigger)
}

size_t MergeTrigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.MergeTrigger)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_left_desc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *left_desc_);
  }

  if (this->has_right_desc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *right_desc_);
  }

  if (this->has_right_mvcc_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *right_mvcc_stats_);
  }

  if (this->has_freeze_start()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *freeze_start_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MergeTrigger::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MergeTrigger*>(&from));
}

void MergeTrigger::MergeFrom(const MergeTrigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.MergeTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_left_desc()) {
    mutable_left_desc()->::znbase::roachpb::RangeDescriptor::MergeFrom(from.left_desc());
  }
  if (from.has_right_desc()) {
    mutable_right_desc()->::znbase::roachpb::RangeDescriptor::MergeFrom(from.right_desc());
  }
  if (from.has_right_mvcc_stats()) {
    mutable_right_mvcc_stats()->::znbase::storage::engine::enginepb::MVCCStats::MergeFrom(from.right_mvcc_stats());
  }
  if (from.has_freeze_start()) {
    mutable_freeze_start()->::znbase::util::hlc::Timestamp::MergeFrom(from.freeze_start());
  }
}

void MergeTrigger::CopyFrom(const MergeTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.MergeTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeTrigger::IsInitialized() const {
  return true;
}

void MergeTrigger::Swap(MergeTrigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MergeTrigger::InternalSwap(MergeTrigger* other) {
  using std::swap;
  swap(left_desc_, other->left_desc_);
  swap(right_desc_, other->right_desc_);
  swap(right_mvcc_stats_, other->right_mvcc_stats_);
  swap(freeze_start_, other->freeze_start_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string MergeTrigger::GetTypeName() const {
  return "znbase.roachpb.MergeTrigger";
}


// ===================================================================

void ChangeReplicasTrigger::InitAsDefaultInstance() {
  ::znbase::roachpb::_ChangeReplicasTrigger_default_instance_._instance.get_mutable()->replica_ = const_cast< ::znbase::roachpb::ReplicaDescriptor*>(
      ::znbase::roachpb::ReplicaDescriptor::internal_default_instance());
}
void ChangeReplicasTrigger::clear_replica() {
  if (GetArenaNoVirtual() == NULL && replica_ != NULL) {
    delete replica_;
  }
  replica_ = NULL;
}
void ChangeReplicasTrigger::clear_updated_replicas() {
  updated_replicas_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeReplicasTrigger::kChangeTypeFieldNumber;
const int ChangeReplicasTrigger::kReplicaFieldNumber;
const int ChangeReplicasTrigger::kUpdatedReplicasFieldNumber;
const int ChangeReplicasTrigger::kNextReplicaIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeReplicasTrigger::ChangeReplicasTrigger()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_ChangeReplicasTrigger.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.ChangeReplicasTrigger)
}
ChangeReplicasTrigger::ChangeReplicasTrigger(const ChangeReplicasTrigger& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      updated_replicas_(from.updated_replicas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_replica()) {
    replica_ = new ::znbase::roachpb::ReplicaDescriptor(*from.replica_);
  } else {
    replica_ = NULL;
  }
  ::memcpy(&change_type_, &from.change_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&next_replica_id_) -
    reinterpret_cast<char*>(&change_type_)) + sizeof(next_replica_id_));
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.ChangeReplicasTrigger)
}

void ChangeReplicasTrigger::SharedCtor() {
  ::memset(&replica_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_replica_id_) -
      reinterpret_cast<char*>(&replica_)) + sizeof(next_replica_id_));
}

ChangeReplicasTrigger::~ChangeReplicasTrigger() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.ChangeReplicasTrigger)
  SharedDtor();
}

void ChangeReplicasTrigger::SharedDtor() {
  if (this != internal_default_instance()) delete replica_;
}

void ChangeReplicasTrigger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangeReplicasTrigger& ChangeReplicasTrigger::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_ChangeReplicasTrigger.base);
  return *internal_default_instance();
}


void ChangeReplicasTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.ChangeReplicasTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updated_replicas_.Clear();
  if (GetArenaNoVirtual() == NULL && replica_ != NULL) {
    delete replica_;
  }
  replica_ = NULL;
  ::memset(&change_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_replica_id_) -
      reinterpret_cast<char*>(&change_type_)) + sizeof(next_replica_id_));
  _internal_metadata_.Clear();
}

bool ChangeReplicasTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.ChangeReplicasTrigger)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .znbase.roachpb.ReplicaChangeType change_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_change_type(static_cast< ::znbase::roachpb::ReplicaChangeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_replica()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_updated_replicas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_replica_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.ChangeReplicasTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.ChangeReplicasTrigger)
  return false;
#undef DO_
}

void ChangeReplicasTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.ChangeReplicasTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .znbase.roachpb.ReplicaChangeType change_type = 1;
  if (this->change_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->change_type(), output);
  }

  if (this->has_replica()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_replica(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->updated_replicas_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3,
      this->updated_replicas(static_cast<int>(i)),
      output);
  }

  if (this->next_replica_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->next_replica_id(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.ChangeReplicasTrigger)
}

size_t ChangeReplicasTrigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.ChangeReplicasTrigger)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->updated_replicas_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->updated_replicas(static_cast<int>(i)));
    }
  }

  if (this->has_replica()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *replica_);
  }

  // .znbase.roachpb.ReplicaChangeType change_type = 1;
  if (this->change_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
  }

  if (this->next_replica_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->next_replica_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeReplicasTrigger::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChangeReplicasTrigger*>(&from));
}

void ChangeReplicasTrigger::MergeFrom(const ChangeReplicasTrigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.ChangeReplicasTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  updated_replicas_.MergeFrom(from.updated_replicas_);
  if (from.has_replica()) {
    mutable_replica()->::znbase::roachpb::ReplicaDescriptor::MergeFrom(from.replica());
  }
  if (from.change_type() != 0) {
    set_change_type(from.change_type());
  }
  if (from.next_replica_id() != 0) {
    set_next_replica_id(from.next_replica_id());
  }
}

void ChangeReplicasTrigger::CopyFrom(const ChangeReplicasTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.ChangeReplicasTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeReplicasTrigger::IsInitialized() const {
  return true;
}

void ChangeReplicasTrigger::Swap(ChangeReplicasTrigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeReplicasTrigger::InternalSwap(ChangeReplicasTrigger* other) {
  using std::swap;
  CastToBase(&updated_replicas_)->InternalSwap(CastToBase(&other->updated_replicas_));
  swap(replica_, other->replica_);
  swap(change_type_, other->change_type_);
  swap(next_replica_id_, other->next_replica_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ChangeReplicasTrigger::GetTypeName() const {
  return "znbase.roachpb.ChangeReplicasTrigger";
}


// ===================================================================

void ModifiedSpanTrigger::InitAsDefaultInstance() {
  ::znbase::roachpb::_ModifiedSpanTrigger_default_instance_._instance.get_mutable()->node_liveness_span_ = const_cast< ::znbase::roachpb::Span*>(
      ::znbase::roachpb::Span::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModifiedSpanTrigger::kSystemConfigSpanFieldNumber;
const int ModifiedSpanTrigger::kNodeLivenessSpanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModifiedSpanTrigger::ModifiedSpanTrigger()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_ModifiedSpanTrigger.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.ModifiedSpanTrigger)
}
ModifiedSpanTrigger::ModifiedSpanTrigger(const ModifiedSpanTrigger& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_node_liveness_span()) {
    node_liveness_span_ = new ::znbase::roachpb::Span(*from.node_liveness_span_);
  } else {
    node_liveness_span_ = NULL;
  }
  system_config_span_ = from.system_config_span_;
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.ModifiedSpanTrigger)
}

void ModifiedSpanTrigger::SharedCtor() {
  ::memset(&node_liveness_span_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&system_config_span_) -
      reinterpret_cast<char*>(&node_liveness_span_)) + sizeof(system_config_span_));
}

ModifiedSpanTrigger::~ModifiedSpanTrigger() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.ModifiedSpanTrigger)
  SharedDtor();
}

void ModifiedSpanTrigger::SharedDtor() {
  if (this != internal_default_instance()) delete node_liveness_span_;
}

void ModifiedSpanTrigger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModifiedSpanTrigger& ModifiedSpanTrigger::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_ModifiedSpanTrigger.base);
  return *internal_default_instance();
}


void ModifiedSpanTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.ModifiedSpanTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && node_liveness_span_ != NULL) {
    delete node_liveness_span_;
  }
  node_liveness_span_ = NULL;
  system_config_span_ = false;
  _internal_metadata_.Clear();
}

bool ModifiedSpanTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.ModifiedSpanTrigger)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool system_config_span = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &system_config_span_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .znbase.roachpb.Span node_liveness_span = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_node_liveness_span()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.ModifiedSpanTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.ModifiedSpanTrigger)
  return false;
#undef DO_
}

void ModifiedSpanTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.ModifiedSpanTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool system_config_span = 1;
  if (this->system_config_span() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->system_config_span(), output);
  }

  // .znbase.roachpb.Span node_liveness_span = 2;
  if (this->has_node_liveness_span()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_node_liveness_span(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.ModifiedSpanTrigger)
}

size_t ModifiedSpanTrigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.ModifiedSpanTrigger)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .znbase.roachpb.Span node_liveness_span = 2;
  if (this->has_node_liveness_span()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *node_liveness_span_);
  }

  // bool system_config_span = 1;
  if (this->system_config_span() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModifiedSpanTrigger::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ModifiedSpanTrigger*>(&from));
}

void ModifiedSpanTrigger::MergeFrom(const ModifiedSpanTrigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.ModifiedSpanTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_node_liveness_span()) {
    mutable_node_liveness_span()->::znbase::roachpb::Span::MergeFrom(from.node_liveness_span());
  }
  if (from.system_config_span() != 0) {
    set_system_config_span(from.system_config_span());
  }
}

void ModifiedSpanTrigger::CopyFrom(const ModifiedSpanTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.ModifiedSpanTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifiedSpanTrigger::IsInitialized() const {
  return true;
}

void ModifiedSpanTrigger::Swap(ModifiedSpanTrigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModifiedSpanTrigger::InternalSwap(ModifiedSpanTrigger* other) {
  using std::swap;
  swap(node_liveness_span_, other->node_liveness_span_);
  swap(system_config_span_, other->system_config_span_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ModifiedSpanTrigger::GetTypeName() const {
  return "znbase.roachpb.ModifiedSpanTrigger";
}


// ===================================================================

void InternalCommitTrigger::InitAsDefaultInstance() {
  ::znbase::roachpb::_InternalCommitTrigger_default_instance_._instance.get_mutable()->split_trigger_ = const_cast< ::znbase::roachpb::SplitTrigger*>(
      ::znbase::roachpb::SplitTrigger::internal_default_instance());
  ::znbase::roachpb::_InternalCommitTrigger_default_instance_._instance.get_mutable()->merge_trigger_ = const_cast< ::znbase::roachpb::MergeTrigger*>(
      ::znbase::roachpb::MergeTrigger::internal_default_instance());
  ::znbase::roachpb::_InternalCommitTrigger_default_instance_._instance.get_mutable()->change_replicas_trigger_ = const_cast< ::znbase::roachpb::ChangeReplicasTrigger*>(
      ::znbase::roachpb::ChangeReplicasTrigger::internal_default_instance());
  ::znbase::roachpb::_InternalCommitTrigger_default_instance_._instance.get_mutable()->modified_span_trigger_ = const_cast< ::znbase::roachpb::ModifiedSpanTrigger*>(
      ::znbase::roachpb::ModifiedSpanTrigger::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InternalCommitTrigger::kSplitTriggerFieldNumber;
const int InternalCommitTrigger::kMergeTriggerFieldNumber;
const int InternalCommitTrigger::kChangeReplicasTriggerFieldNumber;
const int InternalCommitTrigger::kModifiedSpanTriggerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InternalCommitTrigger::InternalCommitTrigger()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_InternalCommitTrigger.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.InternalCommitTrigger)
}
InternalCommitTrigger::InternalCommitTrigger(const InternalCommitTrigger& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_split_trigger()) {
    split_trigger_ = new ::znbase::roachpb::SplitTrigger(*from.split_trigger_);
  } else {
    split_trigger_ = NULL;
  }
  if (from.has_merge_trigger()) {
    merge_trigger_ = new ::znbase::roachpb::MergeTrigger(*from.merge_trigger_);
  } else {
    merge_trigger_ = NULL;
  }
  if (from.has_change_replicas_trigger()) {
    change_replicas_trigger_ = new ::znbase::roachpb::ChangeReplicasTrigger(*from.change_replicas_trigger_);
  } else {
    change_replicas_trigger_ = NULL;
  }
  if (from.has_modified_span_trigger()) {
    modified_span_trigger_ = new ::znbase::roachpb::ModifiedSpanTrigger(*from.modified_span_trigger_);
  } else {
    modified_span_trigger_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.InternalCommitTrigger)
}

void InternalCommitTrigger::SharedCtor() {
  ::memset(&split_trigger_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&modified_span_trigger_) -
      reinterpret_cast<char*>(&split_trigger_)) + sizeof(modified_span_trigger_));
}

InternalCommitTrigger::~InternalCommitTrigger() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.InternalCommitTrigger)
  SharedDtor();
}

void InternalCommitTrigger::SharedDtor() {
  if (this != internal_default_instance()) delete split_trigger_;
  if (this != internal_default_instance()) delete merge_trigger_;
  if (this != internal_default_instance()) delete change_replicas_trigger_;
  if (this != internal_default_instance()) delete modified_span_trigger_;
}

void InternalCommitTrigger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InternalCommitTrigger& InternalCommitTrigger::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_InternalCommitTrigger.base);
  return *internal_default_instance();
}


void InternalCommitTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.InternalCommitTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && split_trigger_ != NULL) {
    delete split_trigger_;
  }
  split_trigger_ = NULL;
  if (GetArenaNoVirtual() == NULL && merge_trigger_ != NULL) {
    delete merge_trigger_;
  }
  merge_trigger_ = NULL;
  if (GetArenaNoVirtual() == NULL && change_replicas_trigger_ != NULL) {
    delete change_replicas_trigger_;
  }
  change_replicas_trigger_ = NULL;
  if (GetArenaNoVirtual() == NULL && modified_span_trigger_ != NULL) {
    delete modified_span_trigger_;
  }
  modified_span_trigger_ = NULL;
  _internal_metadata_.Clear();
}

bool InternalCommitTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.InternalCommitTrigger)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .znbase.roachpb.SplitTrigger split_trigger = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_split_trigger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .znbase.roachpb.MergeTrigger merge_trigger = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_merge_trigger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .znbase.roachpb.ChangeReplicasTrigger change_replicas_trigger = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_change_replicas_trigger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .znbase.roachpb.ModifiedSpanTrigger modified_span_trigger = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_modified_span_trigger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.InternalCommitTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.InternalCommitTrigger)
  return false;
#undef DO_
}

void InternalCommitTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.InternalCommitTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .znbase.roachpb.SplitTrigger split_trigger = 1;
  if (this->has_split_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_split_trigger(), output);
  }

  // .znbase.roachpb.MergeTrigger merge_trigger = 2;
  if (this->has_merge_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_merge_trigger(), output);
  }

  // .znbase.roachpb.ChangeReplicasTrigger change_replicas_trigger = 3;
  if (this->has_change_replicas_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_change_replicas_trigger(), output);
  }

  // .znbase.roachpb.ModifiedSpanTrigger modified_span_trigger = 4;
  if (this->has_modified_span_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_modified_span_trigger(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.InternalCommitTrigger)
}

size_t InternalCommitTrigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.InternalCommitTrigger)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .znbase.roachpb.SplitTrigger split_trigger = 1;
  if (this->has_split_trigger()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *split_trigger_);
  }

  // .znbase.roachpb.MergeTrigger merge_trigger = 2;
  if (this->has_merge_trigger()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *merge_trigger_);
  }

  // .znbase.roachpb.ChangeReplicasTrigger change_replicas_trigger = 3;
  if (this->has_change_replicas_trigger()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *change_replicas_trigger_);
  }

  // .znbase.roachpb.ModifiedSpanTrigger modified_span_trigger = 4;
  if (this->has_modified_span_trigger()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *modified_span_trigger_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InternalCommitTrigger::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InternalCommitTrigger*>(&from));
}

void InternalCommitTrigger::MergeFrom(const InternalCommitTrigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.InternalCommitTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_split_trigger()) {
    mutable_split_trigger()->::znbase::roachpb::SplitTrigger::MergeFrom(from.split_trigger());
  }
  if (from.has_merge_trigger()) {
    mutable_merge_trigger()->::znbase::roachpb::MergeTrigger::MergeFrom(from.merge_trigger());
  }
  if (from.has_change_replicas_trigger()) {
    mutable_change_replicas_trigger()->::znbase::roachpb::ChangeReplicasTrigger::MergeFrom(from.change_replicas_trigger());
  }
  if (from.has_modified_span_trigger()) {
    mutable_modified_span_trigger()->::znbase::roachpb::ModifiedSpanTrigger::MergeFrom(from.modified_span_trigger());
  }
}

void InternalCommitTrigger::CopyFrom(const InternalCommitTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.InternalCommitTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalCommitTrigger::IsInitialized() const {
  return true;
}

void InternalCommitTrigger::Swap(InternalCommitTrigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalCommitTrigger::InternalSwap(InternalCommitTrigger* other) {
  using std::swap;
  swap(split_trigger_, other->split_trigger_);
  swap(merge_trigger_, other->merge_trigger_);
  swap(change_replicas_trigger_, other->change_replicas_trigger_);
  swap(modified_span_trigger_, other->modified_span_trigger_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string InternalCommitTrigger::GetTypeName() const {
  return "znbase.roachpb.InternalCommitTrigger";
}


// ===================================================================

void ObservedTimestamp::InitAsDefaultInstance() {
  ::znbase::roachpb::_ObservedTimestamp_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::znbase::util::hlc::Timestamp*>(
      ::znbase::util::hlc::Timestamp::internal_default_instance());
}
void ObservedTimestamp::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObservedTimestamp::kNodeIdFieldNumber;
const int ObservedTimestamp::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObservedTimestamp::ObservedTimestamp()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_ObservedTimestamp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.ObservedTimestamp)
}
ObservedTimestamp::ObservedTimestamp(const ObservedTimestamp& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::znbase::util::hlc::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  node_id_ = from.node_id_;
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.ObservedTimestamp)
}

void ObservedTimestamp::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_id_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(node_id_));
}

ObservedTimestamp::~ObservedTimestamp() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.ObservedTimestamp)
  SharedDtor();
}

void ObservedTimestamp::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
}

void ObservedTimestamp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObservedTimestamp& ObservedTimestamp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_ObservedTimestamp.base);
  return *internal_default_instance();
}


void ObservedTimestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.ObservedTimestamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  node_id_ = 0;
  _internal_metadata_.Clear();
}

bool ObservedTimestamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.ObservedTimestamp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.ObservedTimestamp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.ObservedTimestamp)
  return false;
#undef DO_
}

void ObservedTimestamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.ObservedTimestamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_timestamp(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.ObservedTimestamp)
}

size_t ObservedTimestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.ObservedTimestamp)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObservedTimestamp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ObservedTimestamp*>(&from));
}

void ObservedTimestamp::MergeFrom(const ObservedTimestamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.ObservedTimestamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    mutable_timestamp()->::znbase::util::hlc::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
}

void ObservedTimestamp::CopyFrom(const ObservedTimestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.ObservedTimestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObservedTimestamp::IsInitialized() const {
  return true;
}

void ObservedTimestamp::Swap(ObservedTimestamp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObservedTimestamp::InternalSwap(ObservedTimestamp* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(node_id_, other->node_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ObservedTimestamp::GetTypeName() const {
  return "znbase.roachpb.ObservedTimestamp";
}


// ===================================================================

void Transaction::InitAsDefaultInstance() {
  ::znbase::roachpb::_Transaction_default_instance_._instance.get_mutable()->meta_ = const_cast< ::znbase::storage::engine::enginepb::TxnMeta*>(
      ::znbase::storage::engine::enginepb::TxnMeta::internal_default_instance());
  ::znbase::roachpb::_Transaction_default_instance_._instance.get_mutable()->last_heartbeat_ = const_cast< ::znbase::util::hlc::Timestamp*>(
      ::znbase::util::hlc::Timestamp::internal_default_instance());
  ::znbase::roachpb::_Transaction_default_instance_._instance.get_mutable()->read_timestamp_ = const_cast< ::znbase::util::hlc::Timestamp*>(
      ::znbase::util::hlc::Timestamp::internal_default_instance());
  ::znbase::roachpb::_Transaction_default_instance_._instance.get_mutable()->max_timestamp_ = const_cast< ::znbase::util::hlc::Timestamp*>(
      ::znbase::util::hlc::Timestamp::internal_default_instance());
}
void Transaction::clear_meta() {
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) {
    delete meta_;
  }
  meta_ = NULL;
}
void Transaction::clear_last_heartbeat() {
  if (GetArenaNoVirtual() == NULL && last_heartbeat_ != NULL) {
    delete last_heartbeat_;
  }
  last_heartbeat_ = NULL;
}
void Transaction::clear_read_timestamp() {
  if (GetArenaNoVirtual() == NULL && read_timestamp_ != NULL) {
    delete read_timestamp_;
  }
  read_timestamp_ = NULL;
}
void Transaction::clear_max_timestamp() {
  if (GetArenaNoVirtual() == NULL && max_timestamp_ != NULL) {
    delete max_timestamp_;
  }
  max_timestamp_ = NULL;
}
void Transaction::clear_ignored_seqnums() {
  ignored_seqnums_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transaction::kMetaFieldNumber;
const int Transaction::kNameFieldNumber;
const int Transaction::kStatusFieldNumber;
const int Transaction::kLastHeartbeatFieldNumber;
const int Transaction::kCommitTimestampFixedFieldNumber;
const int Transaction::kReadTimestampFieldNumber;
const int Transaction::kMaxTimestampFieldNumber;
const int Transaction::kObservedTimestampsFieldNumber;
const int Transaction::kWriteTooOldFieldNumber;
const int Transaction::kLockSpansFieldNumber;
const int Transaction::kInFlightWritesFieldNumber;
const int Transaction::kIgnoredSeqnumsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transaction::Transaction()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_Transaction.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      observed_timestamps_(from.observed_timestamps_),
      lock_spans_(from.lock_spans_),
      in_flight_writes_(from.in_flight_writes_),
      ignored_seqnums_(from.ignored_seqnums_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_meta()) {
    meta_ = new ::znbase::storage::engine::enginepb::TxnMeta(*from.meta_);
  } else {
    meta_ = NULL;
  }
  if (from.has_last_heartbeat()) {
    last_heartbeat_ = new ::znbase::util::hlc::Timestamp(*from.last_heartbeat_);
  } else {
    last_heartbeat_ = NULL;
  }
  if (from.has_max_timestamp()) {
    max_timestamp_ = new ::znbase::util::hlc::Timestamp(*from.max_timestamp_);
  } else {
    max_timestamp_ = NULL;
  }
  if (from.has_read_timestamp()) {
    read_timestamp_ = new ::znbase::util::hlc::Timestamp(*from.read_timestamp_);
  } else {
    read_timestamp_ = NULL;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&write_too_old_) -
    reinterpret_cast<char*>(&status_)) + sizeof(write_too_old_));
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.Transaction)
}

void Transaction::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&write_too_old_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(write_too_old_));
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.Transaction)
  SharedDtor();
}

void Transaction::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete last_heartbeat_;
  if (this != internal_default_instance()) delete max_timestamp_;
  if (this != internal_default_instance()) delete read_timestamp_;
}

void Transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction& Transaction::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_Transaction.base);
  return *internal_default_instance();
}


void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.Transaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  observed_timestamps_.Clear();
  lock_spans_.Clear();
  in_flight_writes_.Clear();
  ignored_seqnums_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) {
    delete meta_;
  }
  meta_ = NULL;
  if (GetArenaNoVirtual() == NULL && last_heartbeat_ != NULL) {
    delete last_heartbeat_;
  }
  last_heartbeat_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_timestamp_ != NULL) {
    delete max_timestamp_;
  }
  max_timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && read_timestamp_ != NULL) {
    delete read_timestamp_;
  }
  read_timestamp_ = NULL;
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&write_too_old_) -
      reinterpret_cast<char*>(&status_)) + sizeof(write_too_old_));
  _internal_metadata_.Clear();
}

bool Transaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.Transaction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "znbase.roachpb.Transaction.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .znbase.roachpb.TransactionStatus status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::znbase::roachpb::TransactionStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_last_heartbeat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_max_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_observed_timestamps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lock_spans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool write_too_old = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &write_too_old_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_read_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool commit_timestamp_fixed = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &commit_timestamp_fixed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_in_flight_writes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ignored_seqnums()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.Transaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.Transaction)
  return false;
#undef DO_
}

void Transaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.Transaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_meta(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "znbase.roachpb.Transaction.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .znbase.roachpb.TransactionStatus status = 4;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  if (this->has_last_heartbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_last_heartbeat(), output);
  }

  if (this->has_max_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->_internal_max_timestamp(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->observed_timestamps_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8,
      this->observed_timestamps(static_cast<int>(i)),
      output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lock_spans_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11,
      this->lock_spans(static_cast<int>(i)),
      output);
  }

  // bool write_too_old = 12;
  if (this->write_too_old() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->write_too_old(), output);
  }

  if (this->has_read_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->_internal_read_timestamp(), output);
  }

  // bool commit_timestamp_fixed = 16;
  if (this->commit_timestamp_fixed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->commit_timestamp_fixed(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->in_flight_writes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17,
      this->in_flight_writes(static_cast<int>(i)),
      output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ignored_seqnums_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18,
      this->ignored_seqnums(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.Transaction)
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.Transaction)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->observed_timestamps_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->observed_timestamps(static_cast<int>(i)));
    }
  }

  {
    unsigned int count = static_cast<unsigned int>(this->lock_spans_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lock_spans(static_cast<int>(i)));
    }
  }

  {
    unsigned int count = static_cast<unsigned int>(this->in_flight_writes_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->in_flight_writes(static_cast<int>(i)));
    }
  }

  {
    unsigned int count = static_cast<unsigned int>(this->ignored_seqnums_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ignored_seqnums(static_cast<int>(i)));
    }
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (this->has_meta()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  if (this->has_last_heartbeat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *last_heartbeat_);
  }

  if (this->has_max_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *max_timestamp_);
  }

  if (this->has_read_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *read_timestamp_);
  }

  // .znbase.roachpb.TransactionStatus status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // bool commit_timestamp_fixed = 16;
  if (this->commit_timestamp_fixed() != 0) {
    total_size += 2 + 1;
  }

  // bool write_too_old = 12;
  if (this->write_too_old() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Transaction*>(&from));
}

void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  observed_timestamps_.MergeFrom(from.observed_timestamps_);
  lock_spans_.MergeFrom(from.lock_spans_);
  in_flight_writes_.MergeFrom(from.in_flight_writes_);
  ignored_seqnums_.MergeFrom(from.ignored_seqnums_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_meta()) {
    mutable_meta()->::znbase::storage::engine::enginepb::TxnMeta::MergeFrom(from.meta());
  }
  if (from.has_last_heartbeat()) {
    mutable_last_heartbeat()->::znbase::util::hlc::Timestamp::MergeFrom(from.last_heartbeat());
  }
  if (from.has_max_timestamp()) {
    mutable_max_timestamp()->::znbase::util::hlc::Timestamp::MergeFrom(from.max_timestamp());
  }
  if (from.has_read_timestamp()) {
    mutable_read_timestamp()->::znbase::util::hlc::Timestamp::MergeFrom(from.read_timestamp());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.commit_timestamp_fixed() != 0) {
    set_commit_timestamp_fixed(from.commit_timestamp_fixed());
  }
  if (from.write_too_old() != 0) {
    set_write_too_old(from.write_too_old());
  }
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  return true;
}

void Transaction::Swap(Transaction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  CastToBase(&observed_timestamps_)->InternalSwap(CastToBase(&other->observed_timestamps_));
  CastToBase(&lock_spans_)->InternalSwap(CastToBase(&other->lock_spans_));
  CastToBase(&in_flight_writes_)->InternalSwap(CastToBase(&other->in_flight_writes_));
  CastToBase(&ignored_seqnums_)->InternalSwap(CastToBase(&other->ignored_seqnums_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(meta_, other->meta_);
  swap(last_heartbeat_, other->last_heartbeat_);
  swap(max_timestamp_, other->max_timestamp_);
  swap(read_timestamp_, other->read_timestamp_);
  swap(status_, other->status_);
  swap(commit_timestamp_fixed_, other->commit_timestamp_fixed_);
  swap(write_too_old_, other->write_too_old_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Transaction::GetTypeName() const {
  return "znbase.roachpb.Transaction";
}


// ===================================================================

void TransactionRecord::InitAsDefaultInstance() {
  ::znbase::roachpb::_TransactionRecord_default_instance_._instance.get_mutable()->meta_ = const_cast< ::znbase::storage::engine::enginepb::TxnMeta*>(
      ::znbase::storage::engine::enginepb::TxnMeta::internal_default_instance());
  ::znbase::roachpb::_TransactionRecord_default_instance_._instance.get_mutable()->last_heartbeat_ = const_cast< ::znbase::util::hlc::Timestamp*>(
      ::znbase::util::hlc::Timestamp::internal_default_instance());
}
void TransactionRecord::clear_meta() {
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) {
    delete meta_;
  }
  meta_ = NULL;
}
void TransactionRecord::clear_last_heartbeat() {
  if (GetArenaNoVirtual() == NULL && last_heartbeat_ != NULL) {
    delete last_heartbeat_;
  }
  last_heartbeat_ = NULL;
}
void TransactionRecord::clear_ignored_seqnums() {
  ignored_seqnums_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionRecord::kMetaFieldNumber;
const int TransactionRecord::kStatusFieldNumber;
const int TransactionRecord::kLastHeartbeatFieldNumber;
const int TransactionRecord::kLockSpansFieldNumber;
const int TransactionRecord::kInFlightWritesFieldNumber;
const int TransactionRecord::kIgnoredSeqnumsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionRecord::TransactionRecord()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_TransactionRecord.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.TransactionRecord)
}
TransactionRecord::TransactionRecord(const TransactionRecord& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      lock_spans_(from.lock_spans_),
      in_flight_writes_(from.in_flight_writes_),
      ignored_seqnums_(from.ignored_seqnums_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_meta()) {
    meta_ = new ::znbase::storage::engine::enginepb::TxnMeta(*from.meta_);
  } else {
    meta_ = NULL;
  }
  if (from.has_last_heartbeat()) {
    last_heartbeat_ = new ::znbase::util::hlc::Timestamp(*from.last_heartbeat_);
  } else {
    last_heartbeat_ = NULL;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.TransactionRecord)
}

void TransactionRecord::SharedCtor() {
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(status_));
}

TransactionRecord::~TransactionRecord() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.TransactionRecord)
  SharedDtor();
}

void TransactionRecord::SharedDtor() {
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete last_heartbeat_;
}

void TransactionRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionRecord& TransactionRecord::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_TransactionRecord.base);
  return *internal_default_instance();
}


void TransactionRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.TransactionRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lock_spans_.Clear();
  in_flight_writes_.Clear();
  ignored_seqnums_.Clear();
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) {
    delete meta_;
  }
  meta_ = NULL;
  if (GetArenaNoVirtual() == NULL && last_heartbeat_ != NULL) {
    delete last_heartbeat_;
  }
  last_heartbeat_ = NULL;
  status_ = 0;
  _internal_metadata_.Clear();
}

bool TransactionRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.TransactionRecord)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .znbase.roachpb.TransactionStatus status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::znbase::roachpb::TransactionStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_last_heartbeat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lock_spans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_in_flight_writes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ignored_seqnums()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.TransactionRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.TransactionRecord)
  return false;
#undef DO_
}

void TransactionRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.TransactionRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_meta(), output);
  }

  // .znbase.roachpb.TransactionStatus status = 4;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  if (this->has_last_heartbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_last_heartbeat(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lock_spans_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11,
      this->lock_spans(static_cast<int>(i)),
      output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->in_flight_writes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17,
      this->in_flight_writes(static_cast<int>(i)),
      output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ignored_seqnums_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18,
      this->ignored_seqnums(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.TransactionRecord)
}

size_t TransactionRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.TransactionRecord)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->lock_spans_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lock_spans(static_cast<int>(i)));
    }
  }

  {
    unsigned int count = static_cast<unsigned int>(this->in_flight_writes_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->in_flight_writes(static_cast<int>(i)));
    }
  }

  {
    unsigned int count = static_cast<unsigned int>(this->ignored_seqnums_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ignored_seqnums(static_cast<int>(i)));
    }
  }

  if (this->has_meta()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  if (this->has_last_heartbeat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *last_heartbeat_);
  }

  // .znbase.roachpb.TransactionStatus status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionRecord::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TransactionRecord*>(&from));
}

void TransactionRecord::MergeFrom(const TransactionRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.TransactionRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lock_spans_.MergeFrom(from.lock_spans_);
  in_flight_writes_.MergeFrom(from.in_flight_writes_);
  ignored_seqnums_.MergeFrom(from.ignored_seqnums_);
  if (from.has_meta()) {
    mutable_meta()->::znbase::storage::engine::enginepb::TxnMeta::MergeFrom(from.meta());
  }
  if (from.has_last_heartbeat()) {
    mutable_last_heartbeat()->::znbase::util::hlc::Timestamp::MergeFrom(from.last_heartbeat());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void TransactionRecord::CopyFrom(const TransactionRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.TransactionRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionRecord::IsInitialized() const {
  return true;
}

void TransactionRecord::Swap(TransactionRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionRecord::InternalSwap(TransactionRecord* other) {
  using std::swap;
  CastToBase(&lock_spans_)->InternalSwap(CastToBase(&other->lock_spans_));
  CastToBase(&in_flight_writes_)->InternalSwap(CastToBase(&other->in_flight_writes_));
  CastToBase(&ignored_seqnums_)->InternalSwap(CastToBase(&other->ignored_seqnums_));
  swap(meta_, other->meta_);
  swap(last_heartbeat_, other->last_heartbeat_);
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string TransactionRecord::GetTypeName() const {
  return "znbase.roachpb.TransactionRecord";
}


// ===================================================================

void Intent_SingleKeySpan::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Intent_SingleKeySpan::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Intent_SingleKeySpan::Intent_SingleKeySpan()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_Intent_SingleKeySpan.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.Intent.SingleKeySpan)
}
Intent_SingleKeySpan::Intent_SingleKeySpan(const Intent_SingleKeySpan& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.Intent.SingleKeySpan)
}

void Intent_SingleKeySpan::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Intent_SingleKeySpan::~Intent_SingleKeySpan() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.Intent.SingleKeySpan)
  SharedDtor();
}

void Intent_SingleKeySpan::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Intent_SingleKeySpan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Intent_SingleKeySpan& Intent_SingleKeySpan::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_Intent_SingleKeySpan.base);
  return *internal_default_instance();
}


void Intent_SingleKeySpan::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.Intent.SingleKeySpan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Intent_SingleKeySpan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.Intent.SingleKeySpan)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.Intent.SingleKeySpan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.Intent.SingleKeySpan)
  return false;
#undef DO_
}

void Intent_SingleKeySpan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.Intent.SingleKeySpan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->key(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.Intent.SingleKeySpan)
}

size_t Intent_SingleKeySpan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.Intent.SingleKeySpan)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Intent_SingleKeySpan::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Intent_SingleKeySpan*>(&from));
}

void Intent_SingleKeySpan::MergeFrom(const Intent_SingleKeySpan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.Intent.SingleKeySpan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void Intent_SingleKeySpan::CopyFrom(const Intent_SingleKeySpan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.Intent.SingleKeySpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Intent_SingleKeySpan::IsInitialized() const {
  return true;
}

void Intent_SingleKeySpan::Swap(Intent_SingleKeySpan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Intent_SingleKeySpan::InternalSwap(Intent_SingleKeySpan* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Intent_SingleKeySpan::GetTypeName() const {
  return "znbase.roachpb.Intent.SingleKeySpan";
}


// ===================================================================

void Intent::InitAsDefaultInstance() {
  ::znbase::roachpb::_Intent_default_instance_._instance.get_mutable()->single_key_span_ = const_cast< ::znbase::roachpb::Intent_SingleKeySpan*>(
      ::znbase::roachpb::Intent_SingleKeySpan::internal_default_instance());
  ::znbase::roachpb::_Intent_default_instance_._instance.get_mutable()->txn_ = const_cast< ::znbase::storage::engine::enginepb::TxnMeta*>(
      ::znbase::storage::engine::enginepb::TxnMeta::internal_default_instance());
  ::znbase::roachpb::_Intent_default_instance_._instance.get_mutable()->intent_timestamp_ = const_cast< ::znbase::util::hlc::Timestamp*>(
      ::znbase::util::hlc::Timestamp::internal_default_instance());
}
void Intent::clear_txn() {
  if (GetArenaNoVirtual() == NULL && txn_ != NULL) {
    delete txn_;
  }
  txn_ = NULL;
}
void Intent::clear_intent_timestamp() {
  if (GetArenaNoVirtual() == NULL && intent_timestamp_ != NULL) {
    delete intent_timestamp_;
  }
  intent_timestamp_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Intent::kSingleKeySpanFieldNumber;
const int Intent::kTxnFieldNumber;
const int Intent::kIntentTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Intent::Intent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_Intent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.Intent)
}
Intent::Intent(const Intent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_single_key_span()) {
    single_key_span_ = new ::znbase::roachpb::Intent_SingleKeySpan(*from.single_key_span_);
  } else {
    single_key_span_ = NULL;
  }
  if (from.has_txn()) {
    txn_ = new ::znbase::storage::engine::enginepb::TxnMeta(*from.txn_);
  } else {
    txn_ = NULL;
  }
  if (from.has_intent_timestamp()) {
    intent_timestamp_ = new ::znbase::util::hlc::Timestamp(*from.intent_timestamp_);
  } else {
    intent_timestamp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.Intent)
}

void Intent::SharedCtor() {
  ::memset(&single_key_span_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&intent_timestamp_) -
      reinterpret_cast<char*>(&single_key_span_)) + sizeof(intent_timestamp_));
}

Intent::~Intent() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.Intent)
  SharedDtor();
}

void Intent::SharedDtor() {
  if (this != internal_default_instance()) delete single_key_span_;
  if (this != internal_default_instance()) delete txn_;
  if (this != internal_default_instance()) delete intent_timestamp_;
}

void Intent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Intent& Intent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_Intent.base);
  return *internal_default_instance();
}


void Intent::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.Intent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && single_key_span_ != NULL) {
    delete single_key_span_;
  }
  single_key_span_ = NULL;
  if (GetArenaNoVirtual() == NULL && txn_ != NULL) {
    delete txn_;
  }
  txn_ = NULL;
  if (GetArenaNoVirtual() == NULL && intent_timestamp_ != NULL) {
    delete intent_timestamp_;
  }
  intent_timestamp_ = NULL;
  _internal_metadata_.Clear();
}

bool Intent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.Intent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_single_key_span()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_intent_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.Intent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.Intent)
  return false;
#undef DO_
}

void Intent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.Intent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_single_key_span()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_single_key_span(), output);
  }

  if (this->has_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_txn(), output);
  }

  if (this->has_intent_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_intent_timestamp(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.Intent)
}

size_t Intent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.Intent)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_single_key_span()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *single_key_span_);
  }

  if (this->has_txn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *txn_);
  }

  if (this->has_intent_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *intent_timestamp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Intent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Intent*>(&from));
}

void Intent::MergeFrom(const Intent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.Intent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_single_key_span()) {
    mutable_single_key_span()->::znbase::roachpb::Intent_SingleKeySpan::MergeFrom(from.single_key_span());
  }
  if (from.has_txn()) {
    mutable_txn()->::znbase::storage::engine::enginepb::TxnMeta::MergeFrom(from.txn());
  }
  if (from.has_intent_timestamp()) {
    mutable_intent_timestamp()->::znbase::util::hlc::Timestamp::MergeFrom(from.intent_timestamp());
  }
}

void Intent::CopyFrom(const Intent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.Intent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Intent::IsInitialized() const {
  return true;
}

void Intent::Swap(Intent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Intent::InternalSwap(Intent* other) {
  using std::swap;
  swap(single_key_span_, other->single_key_span_);
  swap(txn_, other->txn_);
  swap(intent_timestamp_, other->intent_timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Intent::GetTypeName() const {
  return "znbase.roachpb.Intent";
}


// ===================================================================

void LockAcquisition::InitAsDefaultInstance() {
  ::znbase::roachpb::_LockAcquisition_default_instance_._instance.get_mutable()->span_ = const_cast< ::znbase::roachpb::Span*>(
      ::znbase::roachpb::Span::internal_default_instance());
  ::znbase::roachpb::_LockAcquisition_default_instance_._instance.get_mutable()->txn_ = const_cast< ::znbase::storage::engine::enginepb::TxnMeta*>(
      ::znbase::storage::engine::enginepb::TxnMeta::internal_default_instance());
}
void LockAcquisition::clear_txn() {
  if (GetArenaNoVirtual() == NULL && txn_ != NULL) {
    delete txn_;
  }
  txn_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LockAcquisition::kSpanFieldNumber;
const int LockAcquisition::kTxnFieldNumber;
const int LockAcquisition::kDurabilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LockAcquisition::LockAcquisition()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_LockAcquisition.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.LockAcquisition)
}
LockAcquisition::LockAcquisition(const LockAcquisition& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_span()) {
    span_ = new ::znbase::roachpb::Span(*from.span_);
  } else {
    span_ = NULL;
  }
  if (from.has_txn()) {
    txn_ = new ::znbase::storage::engine::enginepb::TxnMeta(*from.txn_);
  } else {
    txn_ = NULL;
  }
  durability_ = from.durability_;
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.LockAcquisition)
}

void LockAcquisition::SharedCtor() {
  ::memset(&span_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&durability_) -
      reinterpret_cast<char*>(&span_)) + sizeof(durability_));
}

LockAcquisition::~LockAcquisition() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.LockAcquisition)
  SharedDtor();
}

void LockAcquisition::SharedDtor() {
  if (this != internal_default_instance()) delete span_;
  if (this != internal_default_instance()) delete txn_;
}

void LockAcquisition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LockAcquisition& LockAcquisition::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_LockAcquisition.base);
  return *internal_default_instance();
}


void LockAcquisition::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.LockAcquisition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && span_ != NULL) {
    delete span_;
  }
  span_ = NULL;
  if (GetArenaNoVirtual() == NULL && txn_ != NULL) {
    delete txn_;
  }
  txn_ = NULL;
  durability_ = 0;
  _internal_metadata_.Clear();
}

bool LockAcquisition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.LockAcquisition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_span()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .znbase.storage.concurrency.lock.Durability durability = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_durability(static_cast< ::znbase::storage::concurrency::lock::Durability >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.LockAcquisition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.LockAcquisition)
  return false;
#undef DO_
}

void LockAcquisition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.LockAcquisition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_span()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_span(), output);
  }

  if (this->has_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_txn(), output);
  }

  // .znbase.storage.concurrency.lock.Durability durability = 3;
  if (this->durability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->durability(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.LockAcquisition)
}

size_t LockAcquisition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.LockAcquisition)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_span()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *span_);
  }

  if (this->has_txn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *txn_);
  }

  // .znbase.storage.concurrency.lock.Durability durability = 3;
  if (this->durability() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->durability());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LockAcquisition::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LockAcquisition*>(&from));
}

void LockAcquisition::MergeFrom(const LockAcquisition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.LockAcquisition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_span()) {
    mutable_span()->::znbase::roachpb::Span::MergeFrom(from.span());
  }
  if (from.has_txn()) {
    mutable_txn()->::znbase::storage::engine::enginepb::TxnMeta::MergeFrom(from.txn());
  }
  if (from.durability() != 0) {
    set_durability(from.durability());
  }
}

void LockAcquisition::CopyFrom(const LockAcquisition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.LockAcquisition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockAcquisition::IsInitialized() const {
  return true;
}

void LockAcquisition::Swap(LockAcquisition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LockAcquisition::InternalSwap(LockAcquisition* other) {
  using std::swap;
  swap(span_, other->span_);
  swap(txn_, other->txn_);
  swap(durability_, other->durability_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string LockAcquisition::GetTypeName() const {
  return "znbase.roachpb.LockAcquisition";
}


// ===================================================================

void LockUpdate::InitAsDefaultInstance() {
  ::znbase::roachpb::_LockUpdate_default_instance_._instance.get_mutable()->span_ = const_cast< ::znbase::roachpb::Span*>(
      ::znbase::roachpb::Span::internal_default_instance());
  ::znbase::roachpb::_LockUpdate_default_instance_._instance.get_mutable()->txn_ = const_cast< ::znbase::storage::engine::enginepb::TxnMeta*>(
      ::znbase::storage::engine::enginepb::TxnMeta::internal_default_instance());
}
void LockUpdate::clear_txn() {
  if (GetArenaNoVirtual() == NULL && txn_ != NULL) {
    delete txn_;
  }
  txn_ = NULL;
}
void LockUpdate::clear_ignored_seqnums() {
  ignored_seqnums_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LockUpdate::kSpanFieldNumber;
const int LockUpdate::kTxnFieldNumber;
const int LockUpdate::kStatusFieldNumber;
const int LockUpdate::kIgnoredSeqnumsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LockUpdate::LockUpdate()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_LockUpdate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.LockUpdate)
}
LockUpdate::LockUpdate(const LockUpdate& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      ignored_seqnums_(from.ignored_seqnums_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_span()) {
    span_ = new ::znbase::roachpb::Span(*from.span_);
  } else {
    span_ = NULL;
  }
  if (from.has_txn()) {
    txn_ = new ::znbase::storage::engine::enginepb::TxnMeta(*from.txn_);
  } else {
    txn_ = NULL;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.LockUpdate)
}

void LockUpdate::SharedCtor() {
  ::memset(&span_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&span_)) + sizeof(status_));
}

LockUpdate::~LockUpdate() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.LockUpdate)
  SharedDtor();
}

void LockUpdate::SharedDtor() {
  if (this != internal_default_instance()) delete span_;
  if (this != internal_default_instance()) delete txn_;
}

void LockUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LockUpdate& LockUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_LockUpdate.base);
  return *internal_default_instance();
}


void LockUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.LockUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ignored_seqnums_.Clear();
  if (GetArenaNoVirtual() == NULL && span_ != NULL) {
    delete span_;
  }
  span_ = NULL;
  if (GetArenaNoVirtual() == NULL && txn_ != NULL) {
    delete txn_;
  }
  txn_ = NULL;
  status_ = 0;
  _internal_metadata_.Clear();
}

bool LockUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.LockUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_span()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .znbase.roachpb.TransactionStatus status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::znbase::roachpb::TransactionStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ignored_seqnums()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.LockUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.LockUpdate)
  return false;
#undef DO_
}

void LockUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.LockUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_span()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_span(), output);
  }

  if (this->has_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_txn(), output);
  }

  // .znbase.roachpb.TransactionStatus status = 3;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ignored_seqnums_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4,
      this->ignored_seqnums(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.LockUpdate)
}

size_t LockUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.LockUpdate)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->ignored_seqnums_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ignored_seqnums(static_cast<int>(i)));
    }
  }

  if (this->has_span()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *span_);
  }

  if (this->has_txn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *txn_);
  }

  // .znbase.roachpb.TransactionStatus status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LockUpdate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LockUpdate*>(&from));
}

void LockUpdate::MergeFrom(const LockUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.LockUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ignored_seqnums_.MergeFrom(from.ignored_seqnums_);
  if (from.has_span()) {
    mutable_span()->::znbase::roachpb::Span::MergeFrom(from.span());
  }
  if (from.has_txn()) {
    mutable_txn()->::znbase::storage::engine::enginepb::TxnMeta::MergeFrom(from.txn());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void LockUpdate::CopyFrom(const LockUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.LockUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockUpdate::IsInitialized() const {
  return true;
}

void LockUpdate::Swap(LockUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LockUpdate::InternalSwap(LockUpdate* other) {
  using std::swap;
  CastToBase(&ignored_seqnums_)->InternalSwap(CastToBase(&other->ignored_seqnums_));
  swap(span_, other->span_);
  swap(txn_, other->txn_);
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string LockUpdate::GetTypeName() const {
  return "znbase.roachpb.LockUpdate";
}


// ===================================================================

void SequencedWrite::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SequencedWrite::kKeyFieldNumber;
const int SequencedWrite::kSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SequencedWrite::SequencedWrite()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_SequencedWrite.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.SequencedWrite)
}
SequencedWrite::SequencedWrite(const SequencedWrite& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  sequence_ = from.sequence_;
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.SequencedWrite)
}

void SequencedWrite::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_ = 0;
}

SequencedWrite::~SequencedWrite() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.SequencedWrite)
  SharedDtor();
}

void SequencedWrite::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SequencedWrite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SequencedWrite& SequencedWrite::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_SequencedWrite.base);
  return *internal_default_instance();
}


void SequencedWrite::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.SequencedWrite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_ = 0;
  _internal_metadata_.Clear();
}

bool SequencedWrite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.SequencedWrite)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.SequencedWrite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.SequencedWrite)
  return false;
#undef DO_
}

void SequencedWrite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.SequencedWrite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  if (this->sequence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sequence(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.SequencedWrite)
}

size_t SequencedWrite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.SequencedWrite)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  if (this->sequence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SequencedWrite::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SequencedWrite*>(&from));
}

void SequencedWrite::MergeFrom(const SequencedWrite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.SequencedWrite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.sequence() != 0) {
    set_sequence(from.sequence());
  }
}

void SequencedWrite::CopyFrom(const SequencedWrite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.SequencedWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SequencedWrite::IsInitialized() const {
  return true;
}

void SequencedWrite::Swap(SequencedWrite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SequencedWrite::InternalSwap(SequencedWrite* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sequence_, other->sequence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SequencedWrite::GetTypeName() const {
  return "znbase.roachpb.SequencedWrite";
}


// ===================================================================

void Lease::InitAsDefaultInstance() {
  ::znbase::roachpb::_Lease_default_instance_._instance.get_mutable()->start_ = const_cast< ::znbase::util::hlc::Timestamp*>(
      ::znbase::util::hlc::Timestamp::internal_default_instance());
  ::znbase::roachpb::_Lease_default_instance_._instance.get_mutable()->expiration_ = const_cast< ::znbase::util::hlc::Timestamp*>(
      ::znbase::util::hlc::Timestamp::internal_default_instance());
  ::znbase::roachpb::_Lease_default_instance_._instance.get_mutable()->replica_ = const_cast< ::znbase::roachpb::ReplicaDescriptor*>(
      ::znbase::roachpb::ReplicaDescriptor::internal_default_instance());
  ::znbase::roachpb::_Lease_default_instance_._instance.get_mutable()->deprecated_start_stasis_ = const_cast< ::znbase::util::hlc::Timestamp*>(
      ::znbase::util::hlc::Timestamp::internal_default_instance());
  ::znbase::roachpb::_Lease_default_instance_._instance.get_mutable()->proposed_ts_ = const_cast< ::znbase::util::hlc::Timestamp*>(
      ::znbase::util::hlc::Timestamp::internal_default_instance());
}
void Lease::clear_start() {
  if (GetArenaNoVirtual() == NULL && start_ != NULL) {
    delete start_;
  }
  start_ = NULL;
}
void Lease::clear_expiration() {
  if (GetArenaNoVirtual() == NULL && expiration_ != NULL) {
    delete expiration_;
  }
  expiration_ = NULL;
}
void Lease::clear_replica() {
  if (GetArenaNoVirtual() == NULL && replica_ != NULL) {
    delete replica_;
  }
  replica_ = NULL;
}
void Lease::clear_deprecated_start_stasis() {
  if (GetArenaNoVirtual() == NULL && deprecated_start_stasis_ != NULL) {
    delete deprecated_start_stasis_;
  }
  deprecated_start_stasis_ = NULL;
}
void Lease::clear_proposed_ts() {
  if (GetArenaNoVirtual() == NULL && proposed_ts_ != NULL) {
    delete proposed_ts_;
  }
  proposed_ts_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lease::kStartFieldNumber;
const int Lease::kExpirationFieldNumber;
const int Lease::kReplicaFieldNumber;
const int Lease::kDeprecatedStartStasisFieldNumber;
const int Lease::kProposedTsFieldNumber;
const int Lease::kEpochFieldNumber;
const int Lease::kSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lease::Lease()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_Lease.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.Lease)
}
Lease::Lease(const Lease& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start()) {
    start_ = new ::znbase::util::hlc::Timestamp(*from.start_);
  } else {
    start_ = NULL;
  }
  if (from.has_expiration()) {
    expiration_ = new ::znbase::util::hlc::Timestamp(*from.expiration_);
  } else {
    expiration_ = NULL;
  }
  if (from.has_replica()) {
    replica_ = new ::znbase::roachpb::ReplicaDescriptor(*from.replica_);
  } else {
    replica_ = NULL;
  }
  if (from.has_deprecated_start_stasis()) {
    deprecated_start_stasis_ = new ::znbase::util::hlc::Timestamp(*from.deprecated_start_stasis_);
  } else {
    deprecated_start_stasis_ = NULL;
  }
  if (from.has_proposed_ts()) {
    proposed_ts_ = new ::znbase::util::hlc::Timestamp(*from.proposed_ts_);
  } else {
    proposed_ts_ = NULL;
  }
  ::memcpy(&epoch_, &from.epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_) -
    reinterpret_cast<char*>(&epoch_)) + sizeof(sequence_));
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.Lease)
}

void Lease::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&start_)) + sizeof(sequence_));
}

Lease::~Lease() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.Lease)
  SharedDtor();
}

void Lease::SharedDtor() {
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete expiration_;
  if (this != internal_default_instance()) delete replica_;
  if (this != internal_default_instance()) delete deprecated_start_stasis_;
  if (this != internal_default_instance()) delete proposed_ts_;
}

void Lease::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Lease& Lease::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_Lease.base);
  return *internal_default_instance();
}


void Lease::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.Lease)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && start_ != NULL) {
    delete start_;
  }
  start_ = NULL;
  if (GetArenaNoVirtual() == NULL && expiration_ != NULL) {
    delete expiration_;
  }
  expiration_ = NULL;
  if (GetArenaNoVirtual() == NULL && replica_ != NULL) {
    delete replica_;
  }
  replica_ = NULL;
  if (GetArenaNoVirtual() == NULL && deprecated_start_stasis_ != NULL) {
    delete deprecated_start_stasis_;
  }
  deprecated_start_stasis_ = NULL;
  if (GetArenaNoVirtual() == NULL && proposed_ts_ != NULL) {
    delete proposed_ts_;
  }
  proposed_ts_ = NULL;
  ::memset(&epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&epoch_)) + sizeof(sequence_));
  _internal_metadata_.Clear();
}

bool Lease::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.Lease)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_expiration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_replica()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_deprecated_start_stasis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_proposed_ts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 epoch = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &epoch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.Lease)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.Lease)
  return false;
#undef DO_
}

void Lease::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.Lease)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_start(), output);
  }

  if (this->has_expiration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_expiration(), output);
  }

  if (this->has_replica()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_replica(), output);
  }

  if (this->has_deprecated_start_stasis()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_deprecated_start_stasis(), output);
  }

  if (this->has_proposed_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_proposed_ts(), output);
  }

  // int64 epoch = 6;
  if (this->epoch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->epoch(), output);
  }

  if (this->sequence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->sequence(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.Lease)
}

size_t Lease::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.Lease)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->has_start()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *start_);
  }

  if (this->has_expiration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *expiration_);
  }

  if (this->has_replica()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *replica_);
  }

  if (this->has_deprecated_start_stasis()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *deprecated_start_stasis_);
  }

  if (this->has_proposed_ts()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *proposed_ts_);
  }

  // int64 epoch = 6;
  if (this->epoch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->epoch());
  }

  if (this->sequence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sequence());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lease::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Lease*>(&from));
}

void Lease::MergeFrom(const Lease& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.Lease)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start()) {
    mutable_start()->::znbase::util::hlc::Timestamp::MergeFrom(from.start());
  }
  if (from.has_expiration()) {
    mutable_expiration()->::znbase::util::hlc::Timestamp::MergeFrom(from.expiration());
  }
  if (from.has_replica()) {
    mutable_replica()->::znbase::roachpb::ReplicaDescriptor::MergeFrom(from.replica());
  }
  if (from.has_deprecated_start_stasis()) {
    mutable_deprecated_start_stasis()->::znbase::util::hlc::Timestamp::MergeFrom(from.deprecated_start_stasis());
  }
  if (from.has_proposed_ts()) {
    mutable_proposed_ts()->::znbase::util::hlc::Timestamp::MergeFrom(from.proposed_ts());
  }
  if (from.epoch() != 0) {
    set_epoch(from.epoch());
  }
  if (from.sequence() != 0) {
    set_sequence(from.sequence());
  }
}

void Lease::CopyFrom(const Lease& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.Lease)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lease::IsInitialized() const {
  return true;
}

void Lease::Swap(Lease* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lease::InternalSwap(Lease* other) {
  using std::swap;
  swap(start_, other->start_);
  swap(expiration_, other->expiration_);
  swap(replica_, other->replica_);
  swap(deprecated_start_stasis_, other->deprecated_start_stasis_);
  swap(proposed_ts_, other->proposed_ts_);
  swap(epoch_, other->epoch_);
  swap(sequence_, other->sequence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Lease::GetTypeName() const {
  return "znbase.roachpb.Lease";
}


// ===================================================================

void AbortSpanEntry::InitAsDefaultInstance() {
  ::znbase::roachpb::_AbortSpanEntry_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::znbase::util::hlc::Timestamp*>(
      ::znbase::util::hlc::Timestamp::internal_default_instance());
}
void AbortSpanEntry::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AbortSpanEntry::kKeyFieldNumber;
const int AbortSpanEntry::kTimestampFieldNumber;
const int AbortSpanEntry::kPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AbortSpanEntry::AbortSpanEntry()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_AbortSpanEntry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.AbortSpanEntry)
}
AbortSpanEntry::AbortSpanEntry(const AbortSpanEntry& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::znbase::util::hlc::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  priority_ = from.priority_;
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.AbortSpanEntry)
}

void AbortSpanEntry::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(priority_));
}

AbortSpanEntry::~AbortSpanEntry() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.AbortSpanEntry)
  SharedDtor();
}

void AbortSpanEntry::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void AbortSpanEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AbortSpanEntry& AbortSpanEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_AbortSpanEntry.base);
  return *internal_default_instance();
}


void AbortSpanEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.AbortSpanEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  priority_ = 0;
  _internal_metadata_.Clear();
}

bool AbortSpanEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.AbortSpanEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.AbortSpanEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.AbortSpanEntry)
  return false;
#undef DO_
}

void AbortSpanEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.AbortSpanEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_timestamp(), output);
  }

  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->priority(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.AbortSpanEntry)
}

size_t AbortSpanEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.AbortSpanEntry)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->priority());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AbortSpanEntry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AbortSpanEntry*>(&from));
}

void AbortSpanEntry::MergeFrom(const AbortSpanEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.AbortSpanEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::znbase::util::hlc::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
}

void AbortSpanEntry::CopyFrom(const AbortSpanEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.AbortSpanEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbortSpanEntry::IsInitialized() const {
  return true;
}

void AbortSpanEntry::Swap(AbortSpanEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AbortSpanEntry::InternalSwap(AbortSpanEntry* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(priority_, other->priority_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AbortSpanEntry::GetTypeName() const {
  return "znbase.roachpb.AbortSpanEntry";
}


// ===================================================================

void TxnCoordMeta::InitAsDefaultInstance() {
  ::znbase::roachpb::_TxnCoordMeta_default_instance_._instance.get_mutable()->txn_ = const_cast< ::znbase::roachpb::Transaction*>(
      ::znbase::roachpb::Transaction::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxnCoordMeta::kTxnFieldNumber;
const int TxnCoordMeta::kCommandCountFieldNumber;
const int TxnCoordMeta::kRefreshSpansFieldNumber;
const int TxnCoordMeta::kRefreshInvalidFieldNumber;
const int TxnCoordMeta::kInFlightWritesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxnCoordMeta::TxnCoordMeta()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_TxnCoordMeta.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.TxnCoordMeta)
}
TxnCoordMeta::TxnCoordMeta(const TxnCoordMeta& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      refresh_spans_(from.refresh_spans_),
      in_flight_writes_(from.in_flight_writes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_txn()) {
    txn_ = new ::znbase::roachpb::Transaction(*from.txn_);
  } else {
    txn_ = NULL;
  }
  ::memcpy(&command_count_, &from.command_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&refresh_invalid_) -
    reinterpret_cast<char*>(&command_count_)) + sizeof(refresh_invalid_));
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.TxnCoordMeta)
}

void TxnCoordMeta::SharedCtor() {
  ::memset(&txn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refresh_invalid_) -
      reinterpret_cast<char*>(&txn_)) + sizeof(refresh_invalid_));
}

TxnCoordMeta::~TxnCoordMeta() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.TxnCoordMeta)
  SharedDtor();
}

void TxnCoordMeta::SharedDtor() {
  if (this != internal_default_instance()) delete txn_;
}

void TxnCoordMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TxnCoordMeta& TxnCoordMeta::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_TxnCoordMeta.base);
  return *internal_default_instance();
}


void TxnCoordMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.TxnCoordMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  refresh_spans_.Clear();
  in_flight_writes_.Clear();
  if (GetArenaNoVirtual() == NULL && txn_ != NULL) {
    delete txn_;
  }
  txn_ = NULL;
  ::memset(&command_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refresh_invalid_) -
      reinterpret_cast<char*>(&command_count_)) + sizeof(refresh_invalid_));
  _internal_metadata_.Clear();
}

bool TxnCoordMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.TxnCoordMeta)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 command_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_refresh_spans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool refresh_invalid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &refresh_invalid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_in_flight_writes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.TxnCoordMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.TxnCoordMeta)
  return false;
#undef DO_
}

void TxnCoordMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.TxnCoordMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_txn(), output);
  }

  // int32 command_count = 3;
  if (this->command_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->command_count(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->refresh_spans_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4,
      this->refresh_spans(static_cast<int>(i)),
      output);
  }

  // bool refresh_invalid = 7;
  if (this->refresh_invalid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->refresh_invalid(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->in_flight_writes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8,
      this->in_flight_writes(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.TxnCoordMeta)
}

size_t TxnCoordMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.TxnCoordMeta)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->refresh_spans_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->refresh_spans(static_cast<int>(i)));
    }
  }

  {
    unsigned int count = static_cast<unsigned int>(this->in_flight_writes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->in_flight_writes(static_cast<int>(i)));
    }
  }

  if (this->has_txn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *txn_);
  }

  // int32 command_count = 3;
  if (this->command_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->command_count());
  }

  // bool refresh_invalid = 7;
  if (this->refresh_invalid() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TxnCoordMeta::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TxnCoordMeta*>(&from));
}

void TxnCoordMeta::MergeFrom(const TxnCoordMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.TxnCoordMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  refresh_spans_.MergeFrom(from.refresh_spans_);
  in_flight_writes_.MergeFrom(from.in_flight_writes_);
  if (from.has_txn()) {
    mutable_txn()->::znbase::roachpb::Transaction::MergeFrom(from.txn());
  }
  if (from.command_count() != 0) {
    set_command_count(from.command_count());
  }
  if (from.refresh_invalid() != 0) {
    set_refresh_invalid(from.refresh_invalid());
  }
}

void TxnCoordMeta::CopyFrom(const TxnCoordMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.TxnCoordMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxnCoordMeta::IsInitialized() const {
  return true;
}

void TxnCoordMeta::Swap(TxnCoordMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxnCoordMeta::InternalSwap(TxnCoordMeta* other) {
  using std::swap;
  CastToBase(&refresh_spans_)->InternalSwap(CastToBase(&other->refresh_spans_));
  CastToBase(&in_flight_writes_)->InternalSwap(CastToBase(&other->in_flight_writes_));
  swap(txn_, other->txn_);
  swap(command_count_, other->command_count_);
  swap(refresh_invalid_, other->refresh_invalid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string TxnCoordMeta::GetTypeName() const {
  return "znbase.roachpb.TxnCoordMeta";
}


// ===================================================================

void LeafTxnInputState::InitAsDefaultInstance() {
  ::znbase::roachpb::_LeafTxnInputState_default_instance_._instance.get_mutable()->txn_ = const_cast< ::znbase::roachpb::Transaction*>(
      ::znbase::roachpb::Transaction::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeafTxnInputState::kTxnFieldNumber;
const int LeafTxnInputState::kRefreshInvalidFieldNumber;
const int LeafTxnInputState::kInFlightWritesFieldNumber;
const int LeafTxnInputState::kSteppingModeEnabledFieldNumber;
const int LeafTxnInputState::kReadSeqNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeafTxnInputState::LeafTxnInputState()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_LeafTxnInputState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.LeafTxnInputState)
}
LeafTxnInputState::LeafTxnInputState(const LeafTxnInputState& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      in_flight_writes_(from.in_flight_writes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_txn()) {
    txn_ = new ::znbase::roachpb::Transaction(*from.txn_);
  } else {
    txn_ = NULL;
  }
  ::memcpy(&refresh_invalid_, &from.refresh_invalid_,
    static_cast<size_t>(reinterpret_cast<char*>(&read_seq_num_) -
    reinterpret_cast<char*>(&refresh_invalid_)) + sizeof(read_seq_num_));
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.LeafTxnInputState)
}

void LeafTxnInputState::SharedCtor() {
  ::memset(&txn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&read_seq_num_) -
      reinterpret_cast<char*>(&txn_)) + sizeof(read_seq_num_));
}

LeafTxnInputState::~LeafTxnInputState() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.LeafTxnInputState)
  SharedDtor();
}

void LeafTxnInputState::SharedDtor() {
  if (this != internal_default_instance()) delete txn_;
}

void LeafTxnInputState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeafTxnInputState& LeafTxnInputState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_LeafTxnInputState.base);
  return *internal_default_instance();
}


void LeafTxnInputState::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.LeafTxnInputState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_flight_writes_.Clear();
  if (GetArenaNoVirtual() == NULL && txn_ != NULL) {
    delete txn_;
  }
  txn_ = NULL;
  ::memset(&refresh_invalid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&read_seq_num_) -
      reinterpret_cast<char*>(&refresh_invalid_)) + sizeof(read_seq_num_));
  _internal_metadata_.Clear();
}

bool LeafTxnInputState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.LeafTxnInputState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool refresh_invalid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &refresh_invalid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_in_flight_writes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool stepping_mode_enabled = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stepping_mode_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &read_seq_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.LeafTxnInputState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.LeafTxnInputState)
  return false;
#undef DO_
}

void LeafTxnInputState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.LeafTxnInputState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_txn(), output);
  }

  // bool refresh_invalid = 7;
  if (this->refresh_invalid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->refresh_invalid(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->in_flight_writes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8,
      this->in_flight_writes(static_cast<int>(i)),
      output);
  }

  // bool stepping_mode_enabled = 9;
  if (this->stepping_mode_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->stepping_mode_enabled(), output);
  }

  if (this->read_seq_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->read_seq_num(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.LeafTxnInputState)
}

size_t LeafTxnInputState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.LeafTxnInputState)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->in_flight_writes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->in_flight_writes(static_cast<int>(i)));
    }
  }

  if (this->has_txn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *txn_);
  }

  // bool refresh_invalid = 7;
  if (this->refresh_invalid() != 0) {
    total_size += 1 + 1;
  }

  // bool stepping_mode_enabled = 9;
  if (this->stepping_mode_enabled() != 0) {
    total_size += 1 + 1;
  }

  if (this->read_seq_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->read_seq_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeafTxnInputState::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LeafTxnInputState*>(&from));
}

void LeafTxnInputState::MergeFrom(const LeafTxnInputState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.LeafTxnInputState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  in_flight_writes_.MergeFrom(from.in_flight_writes_);
  if (from.has_txn()) {
    mutable_txn()->::znbase::roachpb::Transaction::MergeFrom(from.txn());
  }
  if (from.refresh_invalid() != 0) {
    set_refresh_invalid(from.refresh_invalid());
  }
  if (from.stepping_mode_enabled() != 0) {
    set_stepping_mode_enabled(from.stepping_mode_enabled());
  }
  if (from.read_seq_num() != 0) {
    set_read_seq_num(from.read_seq_num());
  }
}

void LeafTxnInputState::CopyFrom(const LeafTxnInputState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.LeafTxnInputState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeafTxnInputState::IsInitialized() const {
  return true;
}

void LeafTxnInputState::Swap(LeafTxnInputState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeafTxnInputState::InternalSwap(LeafTxnInputState* other) {
  using std::swap;
  CastToBase(&in_flight_writes_)->InternalSwap(CastToBase(&other->in_flight_writes_));
  swap(txn_, other->txn_);
  swap(refresh_invalid_, other->refresh_invalid_);
  swap(stepping_mode_enabled_, other->stepping_mode_enabled_);
  swap(read_seq_num_, other->read_seq_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string LeafTxnInputState::GetTypeName() const {
  return "znbase.roachpb.LeafTxnInputState";
}


// ===================================================================

void LeafTxnFinalState::InitAsDefaultInstance() {
  ::znbase::roachpb::_LeafTxnFinalState_default_instance_._instance.get_mutable()->txn_ = const_cast< ::znbase::roachpb::Transaction*>(
      ::znbase::roachpb::Transaction::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeafTxnFinalState::kTxnFieldNumber;
const int LeafTxnFinalState::kDeprecatedCommandCountFieldNumber;
const int LeafTxnFinalState::kRefreshSpansFieldNumber;
const int LeafTxnFinalState::kRefreshInvalidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeafTxnFinalState::LeafTxnFinalState()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_LeafTxnFinalState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.LeafTxnFinalState)
}
LeafTxnFinalState::LeafTxnFinalState(const LeafTxnFinalState& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      refresh_spans_(from.refresh_spans_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_txn()) {
    txn_ = new ::znbase::roachpb::Transaction(*from.txn_);
  } else {
    txn_ = NULL;
  }
  ::memcpy(&deprecated_command_count_, &from.deprecated_command_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&refresh_invalid_) -
    reinterpret_cast<char*>(&deprecated_command_count_)) + sizeof(refresh_invalid_));
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.LeafTxnFinalState)
}

void LeafTxnFinalState::SharedCtor() {
  ::memset(&txn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refresh_invalid_) -
      reinterpret_cast<char*>(&txn_)) + sizeof(refresh_invalid_));
}

LeafTxnFinalState::~LeafTxnFinalState() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.LeafTxnFinalState)
  SharedDtor();
}

void LeafTxnFinalState::SharedDtor() {
  if (this != internal_default_instance()) delete txn_;
}

void LeafTxnFinalState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeafTxnFinalState& LeafTxnFinalState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_LeafTxnFinalState.base);
  return *internal_default_instance();
}


void LeafTxnFinalState::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.LeafTxnFinalState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  refresh_spans_.Clear();
  if (GetArenaNoVirtual() == NULL && txn_ != NULL) {
    delete txn_;
  }
  txn_ = NULL;
  ::memset(&deprecated_command_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refresh_invalid_) -
      reinterpret_cast<char*>(&deprecated_command_count_)) + sizeof(refresh_invalid_));
  _internal_metadata_.Clear();
}

bool LeafTxnFinalState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.LeafTxnFinalState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_txn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 deprecated_command_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deprecated_command_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_refresh_spans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool refresh_invalid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &refresh_invalid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.LeafTxnFinalState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.LeafTxnFinalState)
  return false;
#undef DO_
}

void LeafTxnFinalState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.LeafTxnFinalState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (this->has_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_txn(), output);
  }

  // int32 deprecated_command_count = 3;
  if (this->deprecated_command_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->deprecated_command_count(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->refresh_spans_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4,
      this->refresh_spans(static_cast<int>(i)),
      output);
  }

  // bool refresh_invalid = 7;
  if (this->refresh_invalid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->refresh_invalid(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.LeafTxnFinalState)
}

size_t LeafTxnFinalState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.LeafTxnFinalState)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    unsigned int count = static_cast<unsigned int>(this->refresh_spans_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->refresh_spans(static_cast<int>(i)));
    }
  }

  if (this->has_txn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *txn_);
  }

  // int32 deprecated_command_count = 3;
  if (this->deprecated_command_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->deprecated_command_count());
  }

  // bool refresh_invalid = 7;
  if (this->refresh_invalid() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeafTxnFinalState::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LeafTxnFinalState*>(&from));
}

void LeafTxnFinalState::MergeFrom(const LeafTxnFinalState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.LeafTxnFinalState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  refresh_spans_.MergeFrom(from.refresh_spans_);
  if (from.has_txn()) {
    mutable_txn()->::znbase::roachpb::Transaction::MergeFrom(from.txn());
  }
  if (from.deprecated_command_count() != 0) {
    set_deprecated_command_count(from.deprecated_command_count());
  }
  if (from.refresh_invalid() != 0) {
    set_refresh_invalid(from.refresh_invalid());
  }
}

void LeafTxnFinalState::CopyFrom(const LeafTxnFinalState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.LeafTxnFinalState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeafTxnFinalState::IsInitialized() const {
  return true;
}

void LeafTxnFinalState::Swap(LeafTxnFinalState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeafTxnFinalState::InternalSwap(LeafTxnFinalState* other) {
  using std::swap;
  CastToBase(&refresh_spans_)->InternalSwap(CastToBase(&other->refresh_spans_));
  swap(txn_, other->txn_);
  swap(deprecated_command_count_, other->deprecated_command_count_);
  swap(refresh_invalid_, other->refresh_invalid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string LeafTxnFinalState::GetTypeName() const {
  return "znbase.roachpb.LeafTxnFinalState";
}


// ===================================================================

void Decimal::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Decimal::kFormFieldNumber;
const int Decimal::kNegativeFieldNumber;
const int Decimal::kExponentFieldNumber;
const int Decimal::kNegFieldNumber;
const int Decimal::kAbsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Decimal::Decimal()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_Decimal.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.Decimal)
}
Decimal::Decimal(const Decimal& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      abs_(from.abs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&form_, &from.form_,
    static_cast<size_t>(reinterpret_cast<char*>(&neg_) -
    reinterpret_cast<char*>(&form_)) + sizeof(neg_));
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.Decimal)
}

void Decimal::SharedCtor() {
  ::memset(&form_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&neg_) -
      reinterpret_cast<char*>(&form_)) + sizeof(neg_));
}

Decimal::~Decimal() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.Decimal)
  SharedDtor();
}

void Decimal::SharedDtor() {
}

void Decimal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Decimal& Decimal::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_Decimal.base);
  return *internal_default_instance();
}


void Decimal::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.Decimal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  abs_.Clear();
  ::memset(&form_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&neg_) -
      reinterpret_cast<char*>(&form_)) + sizeof(neg_));
  _internal_metadata_.Clear();
}

bool Decimal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.Decimal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 form = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &form_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool negative = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &negative_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 exponent = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exponent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool neg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &neg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 abs = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_abs())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 42u, input, this->mutable_abs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.Decimal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.Decimal)
  return false;
#undef DO_
}

void Decimal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.Decimal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 form = 1;
  if (this->form() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->form(), output);
  }

  // bool negative = 2;
  if (this->negative() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->negative(), output);
  }

  // int32 exponent = 3;
  if (this->exponent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exponent(), output);
  }

  // bool neg = 4;
  if (this->neg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->neg(), output);
  }

  // repeated uint64 abs = 5;
  if (this->abs_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _abs_cached_byte_size_));
  }
  for (int i = 0, n = this->abs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->abs(i), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.Decimal)
}

size_t Decimal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.Decimal)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated uint64 abs = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->abs_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _abs_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int64 form = 1;
  if (this->form() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->form());
  }

  // int32 exponent = 3;
  if (this->exponent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exponent());
  }

  // bool negative = 2;
  if (this->negative() != 0) {
    total_size += 1 + 1;
  }

  // bool neg = 4;
  if (this->neg() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Decimal::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Decimal*>(&from));
}

void Decimal::MergeFrom(const Decimal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.Decimal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  abs_.MergeFrom(from.abs_);
  if (from.form() != 0) {
    set_form(from.form());
  }
  if (from.exponent() != 0) {
    set_exponent(from.exponent());
  }
  if (from.negative() != 0) {
    set_negative(from.negative());
  }
  if (from.neg() != 0) {
    set_neg(from.neg());
  }
}

void Decimal::CopyFrom(const Decimal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.Decimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Decimal::IsInitialized() const {
  return true;
}

void Decimal::Swap(Decimal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Decimal::InternalSwap(Decimal* other) {
  using std::swap;
  abs_.InternalSwap(&other->abs_);
  swap(form_, other->form_);
  swap(exponent_, other->exponent_);
  swap(negative_, other->negative_);
  swap(neg_, other->neg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Decimal::GetTypeName() const {
  return "znbase.roachpb.Decimal";
}


// ===================================================================

void VecValue::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VecValue::kColIdFieldNumber;
const int VecValue::kColTypeFieldNumber;
const int VecValue::kVIntFieldNumber;
const int VecValue::kVUintFieldNumber;
const int VecValue::kVInt32FieldNumber;
const int VecValue::kVDoubleFieldNumber;
const int VecValue::kValuesFieldNumber;
const int VecValue::kVFloatFieldNumber;
const int VecValue::kVDecimalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VecValue::VecValue()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_VecValue.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.VecValue)
}
VecValue::VecValue(const VecValue& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      v_int_(from.v_int_),
      v_uint_(from.v_uint_),
      v_int32_(from.v_int32_),
      v_double_(from.v_double_),
      values_(from.values_),
      v_float_(from.v_float_),
      v_decimal_(from.v_decimal_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&col_id_, &from.col_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&col_type_) -
    reinterpret_cast<char*>(&col_id_)) + sizeof(col_type_));
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.VecValue)
}

void VecValue::SharedCtor() {
  ::memset(&col_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_type_) -
      reinterpret_cast<char*>(&col_id_)) + sizeof(col_type_));
}

VecValue::~VecValue() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.VecValue)
  SharedDtor();
}

void VecValue::SharedDtor() {
}

void VecValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VecValue& VecValue::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_VecValue.base);
  return *internal_default_instance();
}


void VecValue::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.VecValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v_int_.Clear();
  v_uint_.Clear();
  v_int32_.Clear();
  v_double_.Clear();
  values_.Clear();
  v_float_.Clear();
  v_decimal_.Clear();
  ::memset(&col_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_type_) -
      reinterpret_cast<char*>(&col_id_)) + sizeof(col_type_));
  _internal_metadata_.Clear();
}

bool VecValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.VecValue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 col_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &col_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 col_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 v_int = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_v_int())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26u, input, this->mutable_v_int())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 v_uint = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_v_uint())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 34u, input, this->mutable_v_uint())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 v_int32 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_v_int32())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42u, input, this->mutable_v_int32())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double v_double = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_v_double())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 50u, input, this->mutable_v_double())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes values = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float v_float = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_v_float())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 66u, input, this->mutable_v_float())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .znbase.roachpb.Decimal v_decimal = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_v_decimal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.VecValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.VecValue)
  return false;
#undef DO_
}

void VecValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.VecValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 col_id = 1;
  if (this->col_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->col_id(), output);
  }

  // int32 col_type = 2;
  if (this->col_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->col_type(), output);
  }

  // repeated int64 v_int = 3;
  if (this->v_int_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _v_int_cached_byte_size_));
  }
  for (int i = 0, n = this->v_int_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->v_int(i), output);
  }

  // repeated uint64 v_uint = 4;
  if (this->v_uint_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _v_uint_cached_byte_size_));
  }
  for (int i = 0, n = this->v_uint_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->v_uint(i), output);
  }

  // repeated int32 v_int32 = 5;
  if (this->v_int32_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _v_int32_cached_byte_size_));
  }
  for (int i = 0, n = this->v_int32_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->v_int32(i), output);
  }

  // repeated double v_double = 6;
  if (this->v_double_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _v_double_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->v_double().data(), this->v_double_size(), output);
  }

  // repeated bytes values = 7;
  for (int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->values(i), output);
  }

  // repeated float v_float = 8;
  if (this->v_float_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _v_float_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->v_float().data(), this->v_float_size(), output);
  }

  // repeated .znbase.roachpb.Decimal v_decimal = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->v_decimal_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9,
      this->v_decimal(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.VecValue)
}

size_t VecValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.VecValue)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated int64 v_int = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->v_int_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _v_int_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint64 v_uint = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->v_uint_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _v_uint_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 v_int32 = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->v_int32_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _v_int32_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double v_double = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->v_double_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _v_double_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bytes values = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->values_size());
  for (int i = 0, n = this->values_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->values(i));
  }

  // repeated float v_float = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->v_float_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _v_float_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .znbase.roachpb.Decimal v_decimal = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->v_decimal_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->v_decimal(static_cast<int>(i)));
    }
  }

  // uint32 col_id = 1;
  if (this->col_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->col_id());
  }

  // int32 col_type = 2;
  if (this->col_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->col_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VecValue::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VecValue*>(&from));
}

void VecValue::MergeFrom(const VecValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.VecValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  v_int_.MergeFrom(from.v_int_);
  v_uint_.MergeFrom(from.v_uint_);
  v_int32_.MergeFrom(from.v_int32_);
  v_double_.MergeFrom(from.v_double_);
  values_.MergeFrom(from.values_);
  v_float_.MergeFrom(from.v_float_);
  v_decimal_.MergeFrom(from.v_decimal_);
  if (from.col_id() != 0) {
    set_col_id(from.col_id());
  }
  if (from.col_type() != 0) {
    set_col_type(from.col_type());
  }
}

void VecValue::CopyFrom(const VecValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.VecValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VecValue::IsInitialized() const {
  return true;
}

void VecValue::Swap(VecValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VecValue::InternalSwap(VecValue* other) {
  using std::swap;
  v_int_.InternalSwap(&other->v_int_);
  v_uint_.InternalSwap(&other->v_uint_);
  v_int32_.InternalSwap(&other->v_int32_);
  v_double_.InternalSwap(&other->v_double_);
  values_.InternalSwap(CastToBase(&other->values_));
  v_float_.InternalSwap(&other->v_float_);
  CastToBase(&v_decimal_)->InternalSwap(CastToBase(&other->v_decimal_));
  swap(col_id_, other->col_id_);
  swap(col_type_, other->col_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string VecValue::GetTypeName() const {
  return "znbase.roachpb.VecValue";
}


// ===================================================================

void NullValue::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NullValue::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NullValue::NullValue()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_NullValue.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.NullValue)
}
NullValue::NullValue(const NullValue& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      index_(from.index_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.NullValue)
}

void NullValue::SharedCtor() {
}

NullValue::~NullValue() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.NullValue)
  SharedDtor();
}

void NullValue::SharedDtor() {
}

void NullValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NullValue& NullValue::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_NullValue.base);
  return *internal_default_instance();
}


void NullValue::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.NullValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_.Clear();
  _internal_metadata_.Clear();
}

bool NullValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.NullValue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_index())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 10u, input, this->mutable_index())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.NullValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.NullValue)
  return false;
#undef DO_
}

void NullValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.NullValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool index = 1;
  if (this->index_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _index_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteBoolArray(
      this->index().data(), this->index_size(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.NullValue)
}

size_t NullValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.NullValue)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated bool index = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->index_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _index_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NullValue::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NullValue*>(&from));
}

void NullValue::MergeFrom(const NullValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.NullValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  index_.MergeFrom(from.index_);
}

void NullValue::CopyFrom(const NullValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.NullValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NullValue::IsInitialized() const {
  return true;
}

void NullValue::Swap(NullValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NullValue::InternalSwap(NullValue* other) {
  using std::swap;
  index_.InternalSwap(&other->index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string NullValue::GetTypeName() const {
  return "znbase.roachpb.NullValue";
}


// ===================================================================

void VecResults::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VecResults::kCountFieldNumber;
const int VecResults::kColIdsFieldNumber;
const int VecResults::kColValuesFieldNumber;
const int VecResults::kNullValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VecResults::VecResults()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fdata_2eproto::scc_info_VecResults.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.VecResults)
}
VecResults::VecResults(const VecResults& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      col_ids_(from.col_ids_),
      col_values_(from.col_values_),
      null_values_(from.null_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.VecResults)
}

void VecResults::SharedCtor() {
  count_ = GOOGLE_LONGLONG(0);
}

VecResults::~VecResults() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.VecResults)
  SharedDtor();
}

void VecResults::SharedDtor() {
}

void VecResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VecResults& VecResults::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fdata_2eproto::scc_info_VecResults.base);
  return *internal_default_instance();
}


void VecResults::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.VecResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  col_ids_.Clear();
  col_values_.Clear();
  null_values_.Clear();
  count_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool VecResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.VecResults)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_col_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_col_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .znbase.roachpb.VecValue col_values = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_col_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .znbase.roachpb.NullValue null_values = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_null_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.VecResults)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.VecResults)
  return false;
#undef DO_
}

void VecResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.VecResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->count(), output);
  }

  if (this->col_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _col_ids_cached_byte_size_));
  }
  for (int i = 0, n = this->col_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->col_ids(i), output);
  }

  // repeated .znbase.roachpb.VecValue col_values = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->col_values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3,
      this->col_values(static_cast<int>(i)),
      output);
  }

  // repeated .znbase.roachpb.NullValue null_values = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->null_values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4,
      this->null_values(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.VecResults)
}

size_t VecResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.VecResults)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->col_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _col_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .znbase.roachpb.VecValue col_values = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->col_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->col_values(static_cast<int>(i)));
    }
  }

  // repeated .znbase.roachpb.NullValue null_values = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->null_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->null_values(static_cast<int>(i)));
    }
  }

  // int64 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VecResults::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VecResults*>(&from));
}

void VecResults::MergeFrom(const VecResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.VecResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  col_ids_.MergeFrom(from.col_ids_);
  col_values_.MergeFrom(from.col_values_);
  null_values_.MergeFrom(from.null_values_);
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void VecResults::CopyFrom(const VecResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.VecResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VecResults::IsInitialized() const {
  return true;
}

void VecResults::Swap(VecResults* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VecResults::InternalSwap(VecResults* other) {
  using std::swap;
  col_ids_.InternalSwap(&other->col_ids_);
  CastToBase(&col_values_)->InternalSwap(CastToBase(&other->col_values_));
  CastToBase(&null_values_)->InternalSwap(CastToBase(&other->null_values_));
  swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string VecResults::GetTypeName() const {
  return "znbase.roachpb.VecResults";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace roachpb
}  // namespace znbase
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::Span* Arena::CreateMaybeMessage< ::znbase::roachpb::Span >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::Span >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::Value* Arena::CreateMaybeMessage< ::znbase::roachpb::Value >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::Value >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::KeyValue* Arena::CreateMaybeMessage< ::znbase::roachpb::KeyValue >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::KeyValue >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::StoreIdent* Arena::CreateMaybeMessage< ::znbase::roachpb::StoreIdent >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::StoreIdent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::SplitTrigger* Arena::CreateMaybeMessage< ::znbase::roachpb::SplitTrigger >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::SplitTrigger >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::MergeTrigger* Arena::CreateMaybeMessage< ::znbase::roachpb::MergeTrigger >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::MergeTrigger >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::ChangeReplicasTrigger* Arena::CreateMaybeMessage< ::znbase::roachpb::ChangeReplicasTrigger >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::ChangeReplicasTrigger >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::ModifiedSpanTrigger* Arena::CreateMaybeMessage< ::znbase::roachpb::ModifiedSpanTrigger >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::ModifiedSpanTrigger >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::InternalCommitTrigger* Arena::CreateMaybeMessage< ::znbase::roachpb::InternalCommitTrigger >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::InternalCommitTrigger >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::ObservedTimestamp* Arena::CreateMaybeMessage< ::znbase::roachpb::ObservedTimestamp >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::ObservedTimestamp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::Transaction* Arena::CreateMaybeMessage< ::znbase::roachpb::Transaction >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::Transaction >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::TransactionRecord* Arena::CreateMaybeMessage< ::znbase::roachpb::TransactionRecord >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::TransactionRecord >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::Intent_SingleKeySpan* Arena::CreateMaybeMessage< ::znbase::roachpb::Intent_SingleKeySpan >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::Intent_SingleKeySpan >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::Intent* Arena::CreateMaybeMessage< ::znbase::roachpb::Intent >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::Intent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::LockAcquisition* Arena::CreateMaybeMessage< ::znbase::roachpb::LockAcquisition >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::LockAcquisition >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::LockUpdate* Arena::CreateMaybeMessage< ::znbase::roachpb::LockUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::LockUpdate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::SequencedWrite* Arena::CreateMaybeMessage< ::znbase::roachpb::SequencedWrite >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::SequencedWrite >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::Lease* Arena::CreateMaybeMessage< ::znbase::roachpb::Lease >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::Lease >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::AbortSpanEntry* Arena::CreateMaybeMessage< ::znbase::roachpb::AbortSpanEntry >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::AbortSpanEntry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::TxnCoordMeta* Arena::CreateMaybeMessage< ::znbase::roachpb::TxnCoordMeta >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::TxnCoordMeta >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::LeafTxnInputState* Arena::CreateMaybeMessage< ::znbase::roachpb::LeafTxnInputState >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::LeafTxnInputState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::LeafTxnFinalState* Arena::CreateMaybeMessage< ::znbase::roachpb::LeafTxnFinalState >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::LeafTxnFinalState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::Decimal* Arena::CreateMaybeMessage< ::znbase::roachpb::Decimal >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::Decimal >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::VecValue* Arena::CreateMaybeMessage< ::znbase::roachpb::VecValue >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::VecValue >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::NullValue* Arena::CreateMaybeMessage< ::znbase::roachpb::NullValue >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::NullValue >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::VecResults* Arena::CreateMaybeMessage< ::znbase::roachpb::VecResults >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::VecResults >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
