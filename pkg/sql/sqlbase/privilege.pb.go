// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/sqlbase/privilege.proto

package sqlbase

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import github_com_znbasedb_znbase_pkg_security_privilege "github.com/znbasedb/znbase/pkg/security/privilege"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Privilege struct {
	Grantor       string                                                 `protobuf:"bytes,1,opt,name=grantor" json:"grantor"`
	PrivilegeType github_com_znbasedb_znbase_pkg_security_privilege.Kind `protobuf:"varint,2,opt,name=privilege_type,json=privilegeType,casttype=github.com/znbasedb/znbase/pkg/security/privilege.Kind" json:"privilege_type"`
	// todo lixinze 注意GrantAble为true 的时候既有grant权限又有本身权限
	GrantAble bool `protobuf:"varint,3,opt,name=grant_able,json=grantAble" json:"grant_able"`
}

func (m *Privilege) Reset()         { *m = Privilege{} }
func (m *Privilege) String() string { return proto.CompactTextString(m) }
func (*Privilege) ProtoMessage()    {}
func (*Privilege) Descriptor() ([]byte, []int) {
	return fileDescriptor_privilege_14de4b1d26cd1a6e, []int{0}
}
func (m *Privilege) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Privilege) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *Privilege) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Privilege.Merge(dst, src)
}
func (m *Privilege) XXX_Size() int {
	return m.Size()
}
func (m *Privilege) XXX_DiscardUnknown() {
	xxx_messageInfo_Privilege.DiscardUnknown(m)
}

var xxx_messageInfo_Privilege proto.InternalMessageInfo

// UserPrivileges describes the list of privileges available for a given user.
type UserPrivileges struct {
	User string `protobuf:"bytes,1,opt,name=user" json:"user"`
	// privileges is a bitfield of 1<<Privilege values.
	Privileges []Privilege `protobuf:"bytes,2,rep,name=privileges" json:"privileges"`
}

func (m *UserPrivileges) Reset()         { *m = UserPrivileges{} }
func (m *UserPrivileges) String() string { return proto.CompactTextString(m) }
func (*UserPrivileges) ProtoMessage()    {}
func (*UserPrivileges) Descriptor() ([]byte, []int) {
	return fileDescriptor_privilege_14de4b1d26cd1a6e, []int{1}
}
func (m *UserPrivileges) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserPrivileges) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *UserPrivileges) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPrivileges.Merge(dst, src)
}
func (m *UserPrivileges) XXX_Size() int {
	return m.Size()
}
func (m *UserPrivileges) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPrivileges.DiscardUnknown(m)
}

var xxx_messageInfo_UserPrivileges proto.InternalMessageInfo

// PrivilegeDescriptor describes a list of users and attached
// privileges. The list should be sorted by user for fast access.
type PrivilegeDescriptor struct {
	Users []UserPrivileges `protobuf:"bytes,1,rep,name=users" json:"users"`
	Owner string           `protobuf:"bytes,2,opt,name=owner" json:"owner"`
}

func (m *PrivilegeDescriptor) Reset()         { *m = PrivilegeDescriptor{} }
func (m *PrivilegeDescriptor) String() string { return proto.CompactTextString(m) }
func (*PrivilegeDescriptor) ProtoMessage()    {}
func (*PrivilegeDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_privilege_14de4b1d26cd1a6e, []int{2}
}
func (m *PrivilegeDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivilegeDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *PrivilegeDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivilegeDescriptor.Merge(dst, src)
}
func (m *PrivilegeDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *PrivilegeDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivilegeDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_PrivilegeDescriptor proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Privilege)(nil), "znbase.sql.sqlbase.Privilege")
	proto.RegisterType((*UserPrivileges)(nil), "znbase.sql.sqlbase.UserPrivileges")
	proto.RegisterType((*PrivilegeDescriptor)(nil), "znbase.sql.sqlbase.PrivilegeDescriptor")
}
func (m *Privilege) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Privilege) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPrivilege(dAtA, i, uint64(len(m.Grantor)))
	i += copy(dAtA[i:], m.Grantor)
	dAtA[i] = 0x10
	i++
	i = encodeVarintPrivilege(dAtA, i, uint64(m.PrivilegeType))
	dAtA[i] = 0x18
	i++
	if m.GrantAble {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *UserPrivileges) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPrivileges) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPrivilege(dAtA, i, uint64(len(m.User)))
	i += copy(dAtA[i:], m.User)
	if len(m.Privileges) > 0 {
		for _, msg := range m.Privileges {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPrivilege(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PrivilegeDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivilegeDescriptor) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPrivilege(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintPrivilege(dAtA, i, uint64(len(m.Owner)))
	i += copy(dAtA[i:], m.Owner)
	return i, nil
}

func encodeVarintPrivilege(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Privilege) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Grantor)
	n += 1 + l + sovPrivilege(uint64(l))
	n += 1 + sovPrivilege(uint64(m.PrivilegeType))
	n += 2
	return n
}

func (m *UserPrivileges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	n += 1 + l + sovPrivilege(uint64(l))
	if len(m.Privileges) > 0 {
		for _, e := range m.Privileges {
			l = e.Size()
			n += 1 + l + sovPrivilege(uint64(l))
		}
	}
	return n
}

func (m *PrivilegeDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovPrivilege(uint64(l))
		}
	}
	l = len(m.Owner)
	n += 1 + l + sovPrivilege(uint64(l))
	return n
}

func sovPrivilege(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPrivilege(x uint64) (n int) {
	return sovPrivilege(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Privilege) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivilege
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Privilege: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Privilege: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grantor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivilege
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grantor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivilegeType", wireType)
			}
			m.PrivilegeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrivilegeType |= (github_com_znbasedb_znbase_pkg_security_privilege.Kind(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrantAble", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GrantAble = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPrivilege(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivilege
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserPrivileges) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivilege
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPrivileges: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPrivileges: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivilege
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privileges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivilege
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Privileges = append(m.Privileges, Privilege{})
			if err := m.Privileges[len(m.Privileges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivilege(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivilege
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivilegeDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivilege
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivilegeDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivilegeDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivilege
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, UserPrivileges{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivilege
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivilege(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivilege
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPrivilege(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPrivilege
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivilege
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPrivilege
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPrivilege
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPrivilege(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPrivilege = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPrivilege   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("sql/sqlbase/privilege.proto", fileDescriptor_privilege_14de4b1d26cd1a6e)
}

var fileDescriptor_privilege_14de4b1d26cd1a6e = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0xe3, 0xfe, 0xa8, 0xf4, 0xa2, 0x76, 0x30, 0x0c, 0x51, 0x11, 0x6e, 0x14, 0x96, 0xb0,
	0x24, 0x12, 0x03, 0x63, 0x25, 0x0a, 0x1b, 0x0b, 0xaa, 0x60, 0x61, 0xa9, 0x9a, 0xf6, 0x2a, 0x44,
	0x84, 0x38, 0xb1, 0x53, 0x50, 0x79, 0x0a, 0xde, 0x86, 0x57, 0xe8, 0xd8, 0xb1, 0x53, 0x05, 0xe9,
	0x5b, 0x30, 0xa1, 0xfc, 0x59, 0xad, 0x60, 0xb3, 0xcf, 0xbd, 0xe7, 0x9c, 0x4f, 0x17, 0x4e, 0x64,
	0x1c, 0x38, 0x32, 0x0e, 0xdc, 0x89, 0x44, 0x27, 0x12, 0xfe, 0xab, 0x1f, 0xa0, 0x87, 0x76, 0x24,
	0x78, 0xc2, 0x29, 0x7d, 0x0f, 0x33, 0xdd, 0x96, 0x71, 0x60, 0x97, 0x3b, 0xbd, 0x63, 0x8f, 0x7b,
	0x3c, 0x1f, 0x3b, 0xd9, 0xab, 0xd8, 0x34, 0x3f, 0x09, 0xb4, 0xef, 0x2a, 0x37, 0x65, 0xd0, 0xf2,
	0xc4, 0x24, 0x4c, 0xb8, 0xd0, 0x89, 0x41, 0xac, 0xf6, 0xb0, 0xb1, 0xdc, 0xf4, 0xb5, 0x51, 0x25,
	0x52, 0x84, 0xae, 0xaa, 0x1a, 0x27, 0x8b, 0x08, 0xf5, 0x9a, 0x41, 0xac, 0xce, 0x70, 0x90, 0xad,
	0xfd, 0x6c, 0xfa, 0x97, 0x9e, 0x9f, 0x3c, 0xcd, 0x5d, 0x7b, 0xca, 0x5f, 0x9c, 0x02, 0x61, 0xe6,
	0x96, 0x0f, 0x27, 0x7a, 0xf6, 0x1c, 0x89, 0xd3, 0xb9, 0xf0, 0x93, 0xc5, 0x0e, 0xf0, 0xad, 0x1f,
	0xce, 0x46, 0x1d, 0xf5, 0xbf, 0x5f, 0x44, 0x48, 0xcf, 0x00, 0xf2, 0xc6, 0xf1, 0xc4, 0x0d, 0x50,
	0xaf, 0x1b, 0xc4, 0x3a, 0x28, 0x49, 0xda, 0xb9, 0x7e, 0xe5, 0x06, 0x68, 0x72, 0xe8, 0x3e, 0x48,
	0x14, 0x0a, 0x5e, 0x52, 0x1d, 0x1a, 0x73, 0x89, 0xfb, 0xe8, 0xb9, 0x42, 0xaf, 0x01, 0x54, 0x83,
	0xd4, 0x6b, 0x46, 0xdd, 0x3a, 0xbc, 0x38, 0xb5, 0xff, 0x1e, 0xc9, 0x56, 0x69, 0xa5, 0x7d, 0xc7,
	0x66, 0xc6, 0x70, 0xa4, 0xc6, 0x37, 0x28, 0xa7, 0xc2, 0x8f, 0xb2, 0x9b, 0x0c, 0xa0, 0x99, 0x75,
	0x48, 0x9d, 0xe4, 0xb1, 0xe6, 0x7f, 0xb1, 0xfb, 0xa0, 0x65, 0x76, 0x61, 0xa3, 0x3d, 0x68, 0xf2,
	0xb7, 0x10, 0x45, 0x7e, 0xca, 0x0a, 0xbb, 0x90, 0x86, 0xe7, 0xcb, 0x6f, 0xa6, 0x2d, 0x53, 0x46,
	0x56, 0x29, 0x23, 0xeb, 0x94, 0x91, 0xaf, 0x94, 0x91, 0x8f, 0x2d, 0xd3, 0x56, 0x5b, 0xa6, 0xad,
	0xb7, 0x4c, 0x7b, 0x6c, 0x95, 0x15, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb2, 0x78, 0x91, 0x95,
	0x10, 0x02, 0x00, 0x00,
}
