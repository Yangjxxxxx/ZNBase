// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: icl/dump/dump.proto

package dump

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import build "github.com/znbasedb/znbase/pkg/build"
import roachpb "github.com/znbasedb/znbase/pkg/roachpb"
import sqlbase "github.com/znbasedb/znbase/pkg/sql/sqlbase"
import hlc "github.com/znbasedb/znbase/pkg/util/hlc"

import github_com_znbasedb_znbase_pkg_sql_sqlbase "github.com/znbasedb/znbase/pkg/sql/sqlbase"
import github_com_znbasedb_znbase_pkg_util_uuid "github.com/znbasedb/znbase/pkg/util/uuid"
import github_com_znbasedb_znbase_pkg_roachpb "github.com/znbasedb/znbase/pkg/roachpb"
import github_com_znbasedb_znbase_pkg_sql_sem_tree "github.com/znbasedb/znbase/pkg/sql/sem/tree"

import bytes "bytes"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MVCCFilter int32

const (
	MVCCFilter_Latest MVCCFilter = 0
	MVCCFilter_All    MVCCFilter = 1
)

var MVCCFilter_name = map[int32]string{
	0: "Latest",
	1: "All",
}
var MVCCFilter_value = map[string]int32{
	"Latest": 0,
	"All":    1,
}

func (x MVCCFilter) String() string {
	return proto.EnumName(MVCCFilter_name, int32(x))
}
func (MVCCFilter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dump_f89a0ebd7668f6fb, []int{0}
}

type EncryptionInfo_Scheme int32

const (
	EncryptionInfo_AES256GCM EncryptionInfo_Scheme = 0
)

var EncryptionInfo_Scheme_name = map[int32]string{
	0: "AES256GCM",
}
var EncryptionInfo_Scheme_value = map[string]int32{
	"AES256GCM": 0,
}

func (x EncryptionInfo_Scheme) String() string {
	return proto.EnumName(EncryptionInfo_Scheme_name, int32(x))
}
func (EncryptionInfo_Scheme) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dump_f89a0ebd7668f6fb, []int{1, 0}
}

type ScheduledBackupExecutionArgs_BackupType int32

const (
	ScheduledBackupExecutionArgs_FULL        ScheduledBackupExecutionArgs_BackupType = 0
	ScheduledBackupExecutionArgs_INCREMENTAL ScheduledBackupExecutionArgs_BackupType = 1
)

var ScheduledBackupExecutionArgs_BackupType_name = map[int32]string{
	0: "FULL",
	1: "INCREMENTAL",
}
var ScheduledBackupExecutionArgs_BackupType_value = map[string]int32{
	"FULL":        0,
	"INCREMENTAL": 1,
}

func (x ScheduledBackupExecutionArgs_BackupType) String() string {
	return proto.EnumName(ScheduledBackupExecutionArgs_BackupType_name, int32(x))
}
func (ScheduledBackupExecutionArgs_BackupType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dump_f89a0ebd7668f6fb, []int{2, 0}
}

// DumpDescriptor represents a consistent snapshot of ranges.
//
// Each range snapshot includes a path to data that is a diff of the data in
// that key range between a start and end timestamp. The end timestamp of all
// ranges in a backup is the same, but the start may vary (to allow individual
// tables to be backed up on different schedules).
type DumpDescriptor struct {
	StartTime  hlc.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time"`
	EndTime    hlc.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time"`
	MVCCFilter MVCCFilter    `protobuf:"varint,13,opt,name=mvcc_filter,json=mvccFilter,proto3,enum=znbase.icl.dump.MVCCFilter" json:"mvcc_filter,omitempty"`
	// Even if StartTime is zero, we only get revisions since gc threshold, so
	// do not allow AS OF SYSTEM TIME before revision_start_time.
	RevisionStartTime hlc.Timestamp `protobuf:"bytes,17,opt,name=revision_start_time,json=revisionStartTime,proto3" json:"revision_start_time"`
	// Spans contains the spans requested for backup. The keyranges covered by
	// `files` may be a subset of this if there were ranges with no changes since
	// the last backup. For all tables in the backup descriptor, these spans must
	// completely cover each table's span. For example, if a table with ID 51 were
	// being backed up, then the span `/Table/5{1-2}` must be completely covered.
	Spans []roachpb.Span `protobuf:"bytes,3,rep,name=spans,proto3" json:"spans"`
	// IntroducedSpans are a subset of spans, set only when creating incremental
	// backups that cover spans not included in a previous backup. Spans contained
	// here are covered in the interval (0, startTime], which, in conjunction with
	// the coverage from (startTime, endTime] implied for all spans in Spans,
	// results in coverage from [0, endTime] for these spans.
	IntroducedSpans   []roachpb.Span                      `protobuf:"bytes,15,rep,name=introduced_spans,json=introducedSpans,proto3" json:"introduced_spans"`
	DescriptorChanges []DumpDescriptor_DescriptorRevision `protobuf:"bytes,16,rep,name=descriptor_changes,json=descriptorChanges,proto3" json:"descriptor_changes"`
	Files             []DumpDescriptor_File               `protobuf:"bytes,4,rep,name=files,proto3" json:"files"`
	Descriptors       []sqlbase.Descriptor                `protobuf:"bytes,5,rep,name=descriptors,proto3" json:"descriptors"`
	// databases in descriptors that have all tables also in descriptors.
	CompleteDbs   []github_com_znbasedb_znbase_pkg_sql_sqlbase.ID `protobuf:"varint,14,rep,packed,name=complete_dbs,json=completeDbs,proto3,casttype=github.com/znbasedb/znbase/pkg/sql/sqlbase.ID" json:"complete_dbs,omitempty"`
	EntryCounts   roachpb.BulkOpSummary                           `protobuf:"bytes,12,opt,name=entry_counts,json=entryCounts,proto3" json:"entry_counts"`
	Dir           roachpb.DumpSink                                `protobuf:"bytes,7,opt,name=dir,proto3" json:"dir"`
	FormatVersion uint32                                          `protobuf:"varint,8,opt,name=format_version,json=formatVersion,proto3" json:"format_version,omitempty"`
	ClusterID     github_com_znbasedb_znbase_pkg_util_uuid.UUID   `protobuf:"bytes,9,opt,name=cluster_id,json=clusterId,proto3,customtype=github.com/znbasedb/znbase/pkg/util/uuid.UUID" json:"cluster_id"`
	// node_id and build_info of the gateway node (which writes the descriptor).
	NodeID             github_com_znbasedb_znbase_pkg_roachpb.NodeID                  `protobuf:"varint,10,opt,name=node_id,json=nodeId,proto3,casttype=github.com/znbasedb/znbase/pkg/roachpb.NodeID" json:"node_id,omitempty"`
	BuildInfo          build.Info                                                     `protobuf:"bytes,11,opt,name=build_info,json=buildInfo,proto3" json:"build_info"`
	DescriptorCoverage github_com_znbasedb_znbase_pkg_sql_sem_tree.DescriptorCoverage `protobuf:"varint,22,opt,name=descriptor_coverage,json=descriptorCoverage,proto3,casttype=github.com/znbasedb/znbase/pkg/sql/sem/tree.DescriptorCoverage" json:"descriptor_coverage,omitempty"`
}

func (m *DumpDescriptor) Reset()         { *m = DumpDescriptor{} }
func (m *DumpDescriptor) String() string { return proto.CompactTextString(m) }
func (*DumpDescriptor) ProtoMessage()    {}
func (*DumpDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_dump_f89a0ebd7668f6fb, []int{0}
}
func (m *DumpDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DumpDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *DumpDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DumpDescriptor.Merge(dst, src)
}
func (m *DumpDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *DumpDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_DumpDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_DumpDescriptor proto.InternalMessageInfo

// DumpDescriptor_File represents a file that contains the diff for a key
// range between two timestamps.
type DumpDescriptor_File struct {
	Span        roachpb.Span          `protobuf:"bytes,1,opt,name=span,proto3" json:"span"`
	Path        string                `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Sha512      []byte                `protobuf:"bytes,4,opt,name=sha512,proto3" json:"sha512,omitempty"`
	EntryCounts roachpb.BulkOpSummary `protobuf:"bytes,6,opt,name=entry_counts,json=entryCounts,proto3" json:"entry_counts"`
	// StartTime 0 is sometimes legitimately used, so it is only meaningful if
	// EndTime is non-zero, otherwise both just inherit from containing backup.
	StartTime hlc.Timestamp `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3" json:"start_time"`
	EndTime   hlc.Timestamp `protobuf:"bytes,8,opt,name=end_time,json=endTime,proto3" json:"end_time"`
}

func (m *DumpDescriptor_File) Reset()         { *m = DumpDescriptor_File{} }
func (m *DumpDescriptor_File) String() string { return proto.CompactTextString(m) }
func (*DumpDescriptor_File) ProtoMessage()    {}
func (*DumpDescriptor_File) Descriptor() ([]byte, []int) {
	return fileDescriptor_dump_f89a0ebd7668f6fb, []int{0, 0}
}
func (m *DumpDescriptor_File) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DumpDescriptor_File) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *DumpDescriptor_File) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DumpDescriptor_File.Merge(dst, src)
}
func (m *DumpDescriptor_File) XXX_Size() int {
	return m.Size()
}
func (m *DumpDescriptor_File) XXX_DiscardUnknown() {
	xxx_messageInfo_DumpDescriptor_File.DiscardUnknown(m)
}

var xxx_messageInfo_DumpDescriptor_File proto.InternalMessageInfo

type DumpDescriptor_DescriptorRevision struct {
	Time hlc.Timestamp                                 `protobuf:"bytes,1,opt,name=time,proto3" json:"time"`
	ID   github_com_znbasedb_znbase_pkg_sql_sqlbase.ID `protobuf:"varint,2,opt,name=ID,proto3,casttype=github.com/znbasedb/znbase/pkg/sql/sqlbase.ID" json:"ID,omitempty"`
	Desc *sqlbase.Descriptor                           `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (m *DumpDescriptor_DescriptorRevision) Reset()         { *m = DumpDescriptor_DescriptorRevision{} }
func (m *DumpDescriptor_DescriptorRevision) String() string { return proto.CompactTextString(m) }
func (*DumpDescriptor_DescriptorRevision) ProtoMessage()    {}
func (*DumpDescriptor_DescriptorRevision) Descriptor() ([]byte, []int) {
	return fileDescriptor_dump_f89a0ebd7668f6fb, []int{0, 1}
}
func (m *DumpDescriptor_DescriptorRevision) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DumpDescriptor_DescriptorRevision) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *DumpDescriptor_DescriptorRevision) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DumpDescriptor_DescriptorRevision.Merge(dst, src)
}
func (m *DumpDescriptor_DescriptorRevision) XXX_Size() int {
	return m.Size()
}
func (m *DumpDescriptor_DescriptorRevision) XXX_DiscardUnknown() {
	xxx_messageInfo_DumpDescriptor_DescriptorRevision.DiscardUnknown(m)
}

var xxx_messageInfo_DumpDescriptor_DescriptorRevision proto.InternalMessageInfo

// EncryptionInfo is stored IN PLAINTEXT along side collections of encrypted
// files stored outside of znbase, for example by BACKUP/RESTORE.
type EncryptionInfo struct {
	Scheme EncryptionInfo_Scheme `protobuf:"varint,1,opt,name=scheme,proto3,enum=znbase.icl.dump.EncryptionInfo_Scheme" json:"scheme,omitempty"`
	Salt   []byte                `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
}

func (m *EncryptionInfo) Reset()         { *m = EncryptionInfo{} }
func (m *EncryptionInfo) String() string { return proto.CompactTextString(m) }
func (*EncryptionInfo) ProtoMessage()    {}
func (*EncryptionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_dump_f89a0ebd7668f6fb, []int{1}
}
func (m *EncryptionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EncryptionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *EncryptionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncryptionInfo.Merge(dst, src)
}
func (m *EncryptionInfo) XXX_Size() int {
	return m.Size()
}
func (m *EncryptionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EncryptionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EncryptionInfo proto.InternalMessageInfo

// ScheduledBackupExecutionArgs is the arguments to the scheduled backup executor.
type ScheduledBackupExecutionArgs struct {
	BackupType       ScheduledBackupExecutionArgs_BackupType `protobuf:"varint,1,opt,name=backup_type,json=backupType,proto3,enum=znbase.icl.dump.ScheduledBackupExecutionArgs_BackupType" json:"backup_type,omitempty"`
	BackupStatement  string                                  `protobuf:"bytes,2,opt,name=backup_statement,json=backupStatement,proto3" json:"backup_statement,omitempty"`
	PathList         []string                                `protobuf:"bytes,3,rep,name=path_list,json=pathList,proto3" json:"path_list,omitempty"`
	ParentScheduleId int64                                   `protobuf:"varint,4,opt,name=parent_schedule_id,json=parentScheduleId,proto3" json:"parent_schedule_id,omitempty"`
}

func (m *ScheduledBackupExecutionArgs) Reset()         { *m = ScheduledBackupExecutionArgs{} }
func (m *ScheduledBackupExecutionArgs) String() string { return proto.CompactTextString(m) }
func (*ScheduledBackupExecutionArgs) ProtoMessage()    {}
func (*ScheduledBackupExecutionArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_dump_f89a0ebd7668f6fb, []int{2}
}
func (m *ScheduledBackupExecutionArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScheduledBackupExecutionArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *ScheduledBackupExecutionArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduledBackupExecutionArgs.Merge(dst, src)
}
func (m *ScheduledBackupExecutionArgs) XXX_Size() int {
	return m.Size()
}
func (m *ScheduledBackupExecutionArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduledBackupExecutionArgs.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduledBackupExecutionArgs proto.InternalMessageInfo

func init() {
	proto.RegisterType((*DumpDescriptor)(nil), "znbase.icl.dump.DumpDescriptor")
	proto.RegisterType((*DumpDescriptor_File)(nil), "znbase.icl.dump.DumpDescriptor.File")
	proto.RegisterType((*DumpDescriptor_DescriptorRevision)(nil), "znbase.icl.dump.DumpDescriptor.DescriptorRevision")
	proto.RegisterType((*EncryptionInfo)(nil), "znbase.icl.dump.EncryptionInfo")
	proto.RegisterType((*ScheduledBackupExecutionArgs)(nil), "znbase.icl.dump.ScheduledBackupExecutionArgs")
	proto.RegisterEnum("znbase.icl.dump.MVCCFilter", MVCCFilter_name, MVCCFilter_value)
	proto.RegisterEnum("znbase.icl.dump.EncryptionInfo_Scheme", EncryptionInfo_Scheme_name, EncryptionInfo_Scheme_value)
	proto.RegisterEnum("znbase.icl.dump.ScheduledBackupExecutionArgs_BackupType", ScheduledBackupExecutionArgs_BackupType_name, ScheduledBackupExecutionArgs_BackupType_value)
}
func (this *EncryptionInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EncryptionInfo)
	if !ok {
		that2, ok := that.(EncryptionInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Scheme != that1.Scheme {
		return false
	}
	if !bytes.Equal(this.Salt, that1.Salt) {
		return false
	}
	return true
}
func (m *DumpDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DumpDescriptor) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintDump(dAtA, i, uint64(m.StartTime.Size()))
	n1, err := m.StartTime.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintDump(dAtA, i, uint64(m.EndTime.Size()))
	n2, err := m.EndTime.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.Spans) > 0 {
		for _, msg := range m.Spans {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintDump(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Files) > 0 {
		for _, msg := range m.Files {
			dAtA[i] = 0x22
			i++
			i = encodeVarintDump(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Descriptors) > 0 {
		for _, msg := range m.Descriptors {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintDump(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x3a
	i++
	i = encodeVarintDump(dAtA, i, uint64(m.Dir.Size()))
	n3, err := m.Dir.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if m.FormatVersion != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintDump(dAtA, i, uint64(m.FormatVersion))
	}
	dAtA[i] = 0x4a
	i++
	i = encodeVarintDump(dAtA, i, uint64(m.ClusterID.Size()))
	n4, err := m.ClusterID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if m.NodeID != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintDump(dAtA, i, uint64(m.NodeID))
	}
	dAtA[i] = 0x5a
	i++
	i = encodeVarintDump(dAtA, i, uint64(m.BuildInfo.Size()))
	n5, err := m.BuildInfo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x62
	i++
	i = encodeVarintDump(dAtA, i, uint64(m.EntryCounts.Size()))
	n6, err := m.EntryCounts.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if m.MVCCFilter != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintDump(dAtA, i, uint64(m.MVCCFilter))
	}
	if len(m.CompleteDbs) > 0 {
		dAtA8 := make([]byte, len(m.CompleteDbs)*10)
		var j7 int
		for _, num := range m.CompleteDbs {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x72
		i++
		i = encodeVarintDump(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	if len(m.IntroducedSpans) > 0 {
		for _, msg := range m.IntroducedSpans {
			dAtA[i] = 0x7a
			i++
			i = encodeVarintDump(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DescriptorChanges) > 0 {
		for _, msg := range m.DescriptorChanges {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintDump(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x8a
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintDump(dAtA, i, uint64(m.RevisionStartTime.Size()))
	n9, err := m.RevisionStartTime.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	if m.DescriptorCoverage != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDump(dAtA, i, uint64(m.DescriptorCoverage))
	}
	return i, nil
}

func (m *DumpDescriptor_File) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DumpDescriptor_File) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintDump(dAtA, i, uint64(m.Span.Size()))
	n10, err := m.Span.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	if len(m.Path) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDump(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if len(m.Sha512) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDump(dAtA, i, uint64(len(m.Sha512)))
		i += copy(dAtA[i:], m.Sha512)
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintDump(dAtA, i, uint64(m.EntryCounts.Size()))
	n11, err := m.EntryCounts.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	dAtA[i] = 0x3a
	i++
	i = encodeVarintDump(dAtA, i, uint64(m.StartTime.Size()))
	n12, err := m.StartTime.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	dAtA[i] = 0x42
	i++
	i = encodeVarintDump(dAtA, i, uint64(m.EndTime.Size()))
	n13, err := m.EndTime.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	return i, nil
}

func (m *DumpDescriptor_DescriptorRevision) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DumpDescriptor_DescriptorRevision) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintDump(dAtA, i, uint64(m.Time.Size()))
	n14, err := m.Time.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	if m.ID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDump(dAtA, i, uint64(m.ID))
	}
	if m.Desc != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDump(dAtA, i, uint64(m.Desc.Size()))
		n15, err := m.Desc.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}

func (m *EncryptionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EncryptionInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Scheme != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDump(dAtA, i, uint64(m.Scheme))
	}
	if len(m.Salt) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDump(dAtA, i, uint64(len(m.Salt)))
		i += copy(dAtA[i:], m.Salt)
	}
	return i, nil
}

func (m *ScheduledBackupExecutionArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScheduledBackupExecutionArgs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BackupType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDump(dAtA, i, uint64(m.BackupType))
	}
	if len(m.BackupStatement) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDump(dAtA, i, uint64(len(m.BackupStatement)))
		i += copy(dAtA[i:], m.BackupStatement)
	}
	if len(m.PathList) > 0 {
		for _, s := range m.PathList {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.ParentScheduleId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDump(dAtA, i, uint64(m.ParentScheduleId))
	}
	return i, nil
}

func encodeVarintDump(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DumpDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StartTime.Size()
	n += 1 + l + sovDump(uint64(l))
	l = m.EndTime.Size()
	n += 1 + l + sovDump(uint64(l))
	if len(m.Spans) > 0 {
		for _, e := range m.Spans {
			l = e.Size()
			n += 1 + l + sovDump(uint64(l))
		}
	}
	if len(m.Files) > 0 {
		for _, e := range m.Files {
			l = e.Size()
			n += 1 + l + sovDump(uint64(l))
		}
	}
	if len(m.Descriptors) > 0 {
		for _, e := range m.Descriptors {
			l = e.Size()
			n += 1 + l + sovDump(uint64(l))
		}
	}
	l = m.Dir.Size()
	n += 1 + l + sovDump(uint64(l))
	if m.FormatVersion != 0 {
		n += 1 + sovDump(uint64(m.FormatVersion))
	}
	l = m.ClusterID.Size()
	n += 1 + l + sovDump(uint64(l))
	if m.NodeID != 0 {
		n += 1 + sovDump(uint64(m.NodeID))
	}
	l = m.BuildInfo.Size()
	n += 1 + l + sovDump(uint64(l))
	l = m.EntryCounts.Size()
	n += 1 + l + sovDump(uint64(l))
	if m.MVCCFilter != 0 {
		n += 1 + sovDump(uint64(m.MVCCFilter))
	}
	if len(m.CompleteDbs) > 0 {
		l = 0
		for _, e := range m.CompleteDbs {
			l += sovDump(uint64(e))
		}
		n += 1 + sovDump(uint64(l)) + l
	}
	if len(m.IntroducedSpans) > 0 {
		for _, e := range m.IntroducedSpans {
			l = e.Size()
			n += 1 + l + sovDump(uint64(l))
		}
	}
	if len(m.DescriptorChanges) > 0 {
		for _, e := range m.DescriptorChanges {
			l = e.Size()
			n += 2 + l + sovDump(uint64(l))
		}
	}
	l = m.RevisionStartTime.Size()
	n += 2 + l + sovDump(uint64(l))
	if m.DescriptorCoverage != 0 {
		n += 2 + sovDump(uint64(m.DescriptorCoverage))
	}
	return n
}

func (m *DumpDescriptor_File) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Span.Size()
	n += 1 + l + sovDump(uint64(l))
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovDump(uint64(l))
	}
	l = len(m.Sha512)
	if l > 0 {
		n += 1 + l + sovDump(uint64(l))
	}
	l = m.EntryCounts.Size()
	n += 1 + l + sovDump(uint64(l))
	l = m.StartTime.Size()
	n += 1 + l + sovDump(uint64(l))
	l = m.EndTime.Size()
	n += 1 + l + sovDump(uint64(l))
	return n
}

func (m *DumpDescriptor_DescriptorRevision) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Time.Size()
	n += 1 + l + sovDump(uint64(l))
	if m.ID != 0 {
		n += 1 + sovDump(uint64(m.ID))
	}
	if m.Desc != nil {
		l = m.Desc.Size()
		n += 1 + l + sovDump(uint64(l))
	}
	return n
}

func (m *EncryptionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Scheme != 0 {
		n += 1 + sovDump(uint64(m.Scheme))
	}
	l = len(m.Salt)
	if l > 0 {
		n += 1 + l + sovDump(uint64(l))
	}
	return n
}

func (m *ScheduledBackupExecutionArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BackupType != 0 {
		n += 1 + sovDump(uint64(m.BackupType))
	}
	l = len(m.BackupStatement)
	if l > 0 {
		n += 1 + l + sovDump(uint64(l))
	}
	if len(m.PathList) > 0 {
		for _, s := range m.PathList {
			l = len(s)
			n += 1 + l + sovDump(uint64(l))
		}
	}
	if m.ParentScheduleId != 0 {
		n += 1 + sovDump(uint64(m.ParentScheduleId))
	}
	return n
}

func sovDump(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDump(x uint64) (n int) {
	return sovDump(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DumpDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDump
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DumpDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DumpDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDump
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDump
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDump
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDump
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDump
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDump
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spans = append(m.Spans, roachpb.Span{})
			if err := m.Spans[len(m.Spans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDump
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDump
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, DumpDescriptor_File{})
			if err := m.Files[len(m.Files)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Descriptors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDump
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDump
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Descriptors = append(m.Descriptors, sqlbase.Descriptor{})
			if err := m.Descriptors[len(m.Descriptors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dir", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDump
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDump
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Dir.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FormatVersion", wireType)
			}
			m.FormatVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDump
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FormatVersion |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDump
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDump
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClusterID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDump
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= (github_com_znbasedb_znbase_pkg_roachpb.NodeID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDump
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDump
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BuildInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryCounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDump
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDump
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EntryCounts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MVCCFilter", wireType)
			}
			m.MVCCFilter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDump
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MVCCFilter |= (MVCCFilter(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType == 0 {
				var v github_com_znbasedb_znbase_pkg_sql_sqlbase.ID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDump
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (github_com_znbasedb_znbase_pkg_sql_sqlbase.ID(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CompleteDbs = append(m.CompleteDbs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDump
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDump
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CompleteDbs) == 0 {
					m.CompleteDbs = make([]github_com_znbasedb_znbase_pkg_sql_sqlbase.ID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_znbasedb_znbase_pkg_sql_sqlbase.ID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDump
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (github_com_znbasedb_znbase_pkg_sql_sqlbase.ID(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CompleteDbs = append(m.CompleteDbs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteDbs", wireType)
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntroducedSpans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDump
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDump
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntroducedSpans = append(m.IntroducedSpans, roachpb.Span{})
			if err := m.IntroducedSpans[len(m.IntroducedSpans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptorChanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDump
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDump
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DescriptorChanges = append(m.DescriptorChanges, DumpDescriptor_DescriptorRevision{})
			if err := m.DescriptorChanges[len(m.DescriptorChanges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevisionStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDump
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDump
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RevisionStartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptorCoverage", wireType)
			}
			m.DescriptorCoverage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDump
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DescriptorCoverage |= (github_com_znbasedb_znbase_pkg_sql_sem_tree.DescriptorCoverage(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDump(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDump
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DumpDescriptor_File) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDump
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: File: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: File: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Span", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDump
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDump
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Span.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDump
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDump
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha512", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDump
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDump
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha512 = append(m.Sha512[:0], dAtA[iNdEx:postIndex]...)
			if m.Sha512 == nil {
				m.Sha512 = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryCounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDump
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDump
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EntryCounts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDump
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDump
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDump
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDump
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDump(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDump
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DumpDescriptor_DescriptorRevision) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDump
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescriptorRevision: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescriptorRevision: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDump
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDump
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Time.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDump
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (github_com_znbasedb_znbase_pkg_sql_sqlbase.ID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDump
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDump
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Desc == nil {
				m.Desc = &sqlbase.Descriptor{}
			}
			if err := m.Desc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDump(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDump
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EncryptionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDump
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EncryptionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EncryptionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scheme", wireType)
			}
			m.Scheme = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDump
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scheme |= (EncryptionInfo_Scheme(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDump
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDump
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Salt = append(m.Salt[:0], dAtA[iNdEx:postIndex]...)
			if m.Salt == nil {
				m.Salt = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDump(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDump
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScheduledBackupExecutionArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDump
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduledBackupExecutionArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduledBackupExecutionArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupType", wireType)
			}
			m.BackupType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDump
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BackupType |= (ScheduledBackupExecutionArgs_BackupType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupStatement", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDump
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDump
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackupStatement = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDump
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDump
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PathList = append(m.PathList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentScheduleId", wireType)
			}
			m.ParentScheduleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDump
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentScheduleId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDump(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDump
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDump(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDump
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDump
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDump
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDump
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDump
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDump(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDump = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDump   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("icl/dump/dump.proto", fileDescriptor_dump_f89a0ebd7668f6fb) }

var fileDescriptor_dump_f89a0ebd7668f6fb = []byte{
	// 1121 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0x8f, 0x1b, 0x37, 0x7f, 0x5e, 0x9a, 0xd4, 0x9d, 0x5d, 0x2d, 0x56, 0x76, 0x49, 0x42, 0x05,
	0x4b, 0x40, 0x60, 0xef, 0x06, 0x16, 0x10, 0x2b, 0x2d, 0x34, 0x7f, 0x8a, 0xb2, 0x4a, 0x0b, 0x72,
	0xda, 0x95, 0xe0, 0x62, 0x39, 0xf6, 0x34, 0x19, 0xd5, 0xb1, 0x5d, 0xcf, 0xb8, 0xa2, 0x5c, 0xf9,
	0x02, 0x1c, 0x39, 0xf2, 0x21, 0xf8, 0x02, 0xdc, 0x7a, 0xdc, 0xe3, 0x8a, 0x43, 0x04, 0xe9, 0x85,
	0xaf, 0xc0, 0x9e, 0xd0, 0x8c, 0xed, 0x26, 0x6d, 0xa5, 0x6d, 0x77, 0xb9, 0x44, 0xe3, 0xdf, 0xbc,
	0xdf, 0x6f, 0xde, 0x3c, 0xff, 0xde, 0x73, 0xe0, 0x16, 0xb1, 0x5d, 0xdd, 0x89, 0xa6, 0x81, 0xf8,
	0xd1, 0x82, 0xd0, 0x67, 0x3e, 0x5a, 0xff, 0xc9, 0x1b, 0x59, 0x14, 0x6b, 0xc4, 0x76, 0x35, 0x0e,
	0x57, 0x95, 0x51, 0x44, 0x5c, 0x47, 0x27, 0xde, 0x81, 0x1f, 0x87, 0x54, 0x37, 0x42, 0xdf, 0xb2,
	0x27, 0xc1, 0x48, 0xb7, 0x02, 0x92, 0x40, 0x28, 0x85, 0x1c, 0x8b, 0x59, 0x09, 0x76, 0x8f, 0x1e,
	0xb9, 0x3a, 0x3d, 0x72, 0xb9, 0x9c, 0x4e, 0x59, 0x18, 0xd9, 0x2c, 0x0a, 0xb1, 0x93, 0xec, 0xaa,
	0x11, 0x23, 0xae, 0x3e, 0x71, 0x6d, 0x9d, 0x91, 0x29, 0xa6, 0xcc, 0x4a, 0x33, 0xa8, 0xde, 0x1e,
	0xfb, 0x63, 0x5f, 0x2c, 0x75, 0xbe, 0x8a, 0xd1, 0xcd, 0x7f, 0xcb, 0x50, 0xe9, 0x46, 0xd3, 0xa0,
	0x8b, 0xa9, 0x1d, 0x92, 0x80, 0xf9, 0x21, 0xfa, 0x0a, 0x80, 0x32, 0x2b, 0x64, 0x26, 0x57, 0x50,
	0xa5, 0x86, 0xd4, 0x2c, 0xb5, 0xaa, 0x5a, 0x92, 0x3f, 0x97, 0xd7, 0x26, 0xae, 0xad, 0xed, 0xa5,
	0xf2, 0x6d, 0xf9, 0x74, 0x56, 0xcf, 0x18, 0x45, 0xc1, 0xe1, 0x28, 0x7a, 0x0c, 0x05, 0xec, 0x39,
	0x31, 0x7d, 0xe5, 0x86, 0xf4, 0x3c, 0xf6, 0x1c, 0x41, 0x7e, 0x00, 0xab, 0x34, 0xb0, 0x3c, 0xaa,
	0x66, 0x1b, 0xd9, 0x66, 0xa9, 0x75, 0x3b, 0x65, 0x26, 0x95, 0xd0, 0x86, 0x81, 0xe5, 0x25, 0x9c,
	0x38, 0x10, 0x7d, 0x0d, 0xab, 0x07, 0xc4, 0xc5, 0x54, 0x95, 0x05, 0xe3, 0x5d, 0xed, 0x52, 0xa9,
	0xb5, 0x8b, 0xf7, 0xd3, 0xb6, 0x89, 0x8b, 0x53, 0x05, 0x41, 0x44, 0xdb, 0x50, 0x72, 0xce, 0xf7,
	0xa9, 0xba, 0x2a, 0x74, 0x6a, 0xa9, 0x0e, 0x3d, 0x72, 0xb5, 0xa4, 0xde, 0xda, 0x42, 0x26, 0x51,
	0x58, 0x26, 0xa2, 0x07, 0x90, 0x75, 0x48, 0xa8, 0xe6, 0xc5, 0x9d, 0xd5, 0xcb, 0x99, 0xf3, 0x34,
	0x86, 0xc4, 0x3b, 0x4c, 0x98, 0x3c, 0x14, 0xbd, 0x07, 0x95, 0x03, 0x3f, 0x9c, 0x5a, 0xcc, 0x3c,
	0xc6, 0x21, 0x25, 0xbe, 0xa7, 0x16, 0x1a, 0x52, 0xb3, 0x6c, 0x94, 0x63, 0xf4, 0x59, 0x0c, 0x22,
	0x0b, 0xc0, 0x76, 0x23, 0xca, 0x70, 0x68, 0x12, 0x47, 0x2d, 0x36, 0xa4, 0xe6, 0x5a, 0xbb, 0xcd,
	0x55, 0xfe, 0x9c, 0xd5, 0x3f, 0x1e, 0x13, 0x36, 0x89, 0x46, 0x9a, 0xed, 0x4f, 0xf5, 0xf8, 0x44,
	0x67, 0x94, 0x2c, 0xf4, 0xe0, 0x70, 0xac, 0x0b, 0x43, 0x44, 0x11, 0x71, 0xb4, 0xfd, 0xfd, 0x7e,
	0x77, 0x3e, 0xab, 0x17, 0x3b, 0xb1, 0x54, 0xbf, 0x6b, 0x14, 0x13, 0xd5, 0xbe, 0x83, 0xf6, 0x20,
	0xef, 0xf9, 0x0e, 0xe6, 0xfa, 0xd0, 0x90, 0x9a, 0xab, 0xed, 0xc7, 0xf3, 0x59, 0x3d, 0xb7, 0xeb,
	0x3b, 0xb8, 0xdf, 0x7d, 0x79, 0xfd, 0x29, 0xe9, 0x25, 0x63, 0x82, 0x91, 0xe3, 0x5a, 0x7d, 0x07,
	0x7d, 0x0e, 0x20, 0x7c, 0x6e, 0x72, 0x9f, 0xab, 0x25, 0x51, 0x18, 0x94, 0x16, 0x46, 0xec, 0x68,
	0x7d, 0xef, 0xc0, 0x4f, 0x3d, 0x24, 0x10, 0x0e, 0xa0, 0x6d, 0x58, 0xc3, 0x1e, 0x0b, 0x4f, 0x4c,
	0xdb, 0x8f, 0x3c, 0x46, 0xd5, 0x35, 0x41, 0x7d, 0xfb, 0x72, 0x4d, 0xdb, 0x91, 0x7b, 0xf8, 0x6d,
	0x30, 0x8c, 0xa6, 0x53, 0x2b, 0x3c, 0x49, 0x5f, 0x89, 0x20, 0x76, 0x04, 0x0f, 0x0d, 0xa0, 0x34,
	0x3d, 0xb6, 0x6d, 0xf3, 0x80, 0xb8, 0x0c, 0x87, 0x6a, 0xb9, 0x21, 0x35, 0x2b, 0xad, 0xbb, 0x57,
	0x2c, 0xb2, 0xf3, 0xac, 0xd3, 0xd9, 0x16, 0x21, 0xed, 0xca, 0x7c, 0x56, 0x87, 0xc5, 0xb3, 0x01,
	0x9c, 0x1f, 0xaf, 0xd1, 0x1e, 0xac, 0xd9, 0xfe, 0x34, 0x70, 0x31, 0xc3, 0xa6, 0x33, 0xa2, 0x6a,
	0xa5, 0x91, 0x6d, 0x96, 0xdb, 0x0f, 0x6f, 0x50, 0x9f, 0xa5, 0xa6, 0xd5, 0xfa, 0x5d, 0xa3, 0x94,
	0xca, 0x74, 0x47, 0x14, 0xf5, 0x40, 0x21, 0x1e, 0x0b, 0x7d, 0x27, 0xb2, 0xb1, 0x63, 0xc6, 0xee,
	0x5f, 0xbf, 0xd6, 0xfd, 0xeb, 0x0b, 0xce, 0x50, 0xf4, 0xc1, 0x18, 0xd0, 0xc2, 0x8c, 0xa6, 0x3d,
	0xb1, 0xbc, 0x31, 0xa6, 0xaa, 0x22, 0x84, 0x5a, 0xd7, 0x35, 0xc5, 0x62, 0x69, 0xe0, 0x63, 0xc2,
	0x4d, 0x97, 0x1c, 0xb3, 0xb1, 0xd0, 0xec, 0xc4, 0x92, 0xe8, 0x3b, 0xb8, 0x15, 0x26, 0x41, 0xe6,
	0xd2, 0xa4, 0xd8, 0xb8, 0x61, 0xab, 0x6f, 0xa4, 0xe4, 0xe1, 0xf9, 0xc4, 0xa0, 0x70, 0x6b, 0x39,
	0x75, 0xff, 0x18, 0x87, 0xd6, 0x18, 0xab, 0x77, 0x84, 0x11, 0xdb, 0x2f, 0x67, 0xf5, 0x27, 0x37,
	0x29, 0x2f, 0x9e, 0xea, 0x2c, 0xc4, 0xcb, 0x4d, 0xda, 0x49, 0x94, 0x8c, 0xa5, 0xca, 0xa4, 0x58,
	0xf5, 0xf7, 0x15, 0x90, 0xf9, 0x2c, 0x40, 0x1a, 0xc8, 0xbc, 0xe8, 0xc9, 0xa8, 0x7b, 0x55, 0xcd,
	0x45, 0x1c, 0x42, 0x20, 0x07, 0x16, 0x9b, 0x88, 0xd9, 0x56, 0x34, 0xc4, 0x1a, 0xdd, 0x81, 0x1c,
	0x9d, 0x58, 0x8f, 0x1e, 0xb6, 0x54, 0x99, 0x77, 0xa7, 0x91, 0x3c, 0x5d, 0xf1, 0x71, 0xee, 0x0d,
	0x7d, 0x7c, 0x71, 0x28, 0xe7, 0xff, 0xdf, 0x50, 0x2e, 0xbc, 0xe6, 0x50, 0x7e, 0x2a, 0x17, 0xb2,
	0x8a, 0xfc, 0x54, 0x2e, 0xac, 0x2a, 0xb9, 0xea, 0x1f, 0x12, 0xa0, 0xab, 0x6e, 0x41, 0x9f, 0x82,
	0xfc, 0x5a, 0xdf, 0x0b, 0x11, 0x8d, 0xb6, 0x60, 0xa5, 0xdf, 0x15, 0x85, 0x7c, 0xa3, 0x36, 0x5a,
	0xe9, 0x77, 0x51, 0x0b, 0x64, 0xfe, 0x72, 0xd5, 0xac, 0x38, 0xf8, 0x9a, 0xa9, 0x6d, 0x88, 0xd8,
	0xa7, 0x72, 0x21, 0xa7, 0xe4, 0x37, 0x7f, 0x96, 0xa0, 0xd2, 0xf3, 0xec, 0xf0, 0x24, 0x60, 0xc4,
	0xf7, 0xc4, 0xd8, 0x79, 0x02, 0x39, 0x6a, 0x4f, 0x70, 0x72, 0x8f, 0x4a, 0xeb, 0xfe, 0x95, 0xbe,
	0xb9, 0x48, 0xd0, 0x86, 0x22, 0xda, 0x48, 0x58, 0xdc, 0x1a, 0xd4, 0x72, 0x99, 0xb8, 0xd1, 0x9a,
	0x21, 0xd6, 0x9b, 0x6f, 0x41, 0x2e, 0x8e, 0x42, 0x65, 0x28, 0x6e, 0xf5, 0x86, 0xad, 0x47, 0x9f,
	0x7d, 0xd3, 0xd9, 0x51, 0x32, 0x5f, 0xca, 0xff, 0xfc, 0x56, 0x97, 0x36, 0x7f, 0x5d, 0x81, 0x7b,
	0x7c, 0xdf, 0x89, 0x5c, 0xec, 0xb4, 0x2d, 0xfb, 0x30, 0x0a, 0x7a, 0x3f, 0x62, 0x3b, 0xe2, 0x47,
	0x6c, 0x85, 0x63, 0x8a, 0xbe, 0x87, 0xd2, 0x48, 0xc0, 0x26, 0x3b, 0x09, 0xd2, 0xc4, 0xbe, 0xb8,
	0x92, 0xd8, 0xab, 0x34, 0xb4, 0x18, 0xdb, 0x3b, 0x09, 0xb0, 0x01, 0xa3, 0xf3, 0x35, 0xfa, 0x00,
	0x94, 0x44, 0x9a, 0x32, 0x8b, 0xe1, 0x29, 0xf6, 0x58, 0xe2, 0xea, 0xf5, 0x18, 0x1f, 0xa6, 0x30,
	0xba, 0x0b, 0x45, 0x6e, 0x74, 0xd3, 0x25, 0x94, 0x89, 0x6f, 0x73, 0xd1, 0x28, 0x70, 0x60, 0x40,
	0x28, 0x43, 0x1f, 0x01, 0x0a, 0xac, 0x10, 0x7b, 0xcc, 0xa4, 0x49, 0x16, 0xfc, 0x3b, 0xc2, 0x3b,
	0x21, 0x6b, 0x28, 0xf1, 0x4e, 0x9a, 0x5e, 0xdf, 0xd9, 0x7c, 0x1f, 0x60, 0x91, 0x0f, 0x2a, 0x80,
	0xbc, 0xbd, 0x3f, 0x18, 0x28, 0x19, 0xb4, 0x0e, 0xa5, 0xfe, 0x6e, 0xc7, 0xe8, 0xed, 0xf4, 0x76,
	0xf7, 0xb6, 0x06, 0x8a, 0xf4, 0xe1, 0x3b, 0xb0, 0x34, 0x88, 0x11, 0x40, 0x6e, 0x60, 0x31, 0x4c,
	0x99, 0x92, 0x41, 0x79, 0xc8, 0x6e, 0xb9, 0xae, 0x22, 0xb5, 0xef, 0x9f, 0xfe, 0x5d, 0xcb, 0x9c,
	0xce, 0x6b, 0xd2, 0xf3, 0x79, 0x4d, 0x7a, 0x31, 0xaf, 0x49, 0x7f, 0xcd, 0x6b, 0xd2, 0x2f, 0x67,
	0xb5, 0xcc, 0xf3, 0xb3, 0x5a, 0xe6, 0xc5, 0x59, 0x2d, 0xf3, 0x83, 0xcc, 0xab, 0x33, 0xca, 0x89,
	0xbf, 0x3b, 0x9f, 0xfc, 0x17, 0x00, 0x00, 0xff, 0xff, 0x23, 0x73, 0x24, 0xdc, 0x9d, 0x09, 0x00,
	0x00,
}
