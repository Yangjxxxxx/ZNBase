// Copyright 2015  The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License.

package sqlbase

import (
	"fmt"

	"github.com/znbasedb/znbase/pkg/config"
	"github.com/znbasedb/znbase/pkg/keys"
	"github.com/znbasedb/znbase/pkg/roachpb"
	"github.com/znbasedb/znbase/pkg/security"
	"github.com/znbasedb/znbase/pkg/security/privilege"
	"github.com/znbasedb/znbase/pkg/sql/coltypes"
)

func init() {
	// We use a hook to avoid a dependency on the sqlbase package. We
	// should probably move keys/protos elsewhere.
	config.SplitAtIDHook = SplitAtIDHook
}

// SplitAtIDHook determines whether a specific descriptor ID
// should be considered for a split at all. If it is a database
// or a view table descriptor, it should not be considered.
func SplitAtIDHook(id uint32, cfg *config.SystemConfig) bool {
	descVal := cfg.GetDesc(MakeDescMetadataKey(ID(id)))
	if descVal == nil {
		return false
	}
	var desc Descriptor
	if err := descVal.GetProto(&desc); err != nil {
		return false
	}
	if dbDesc := desc.GetDatabase(); dbDesc != nil {
		return false
	}
	if tableDesc := desc.Table(descVal.Timestamp); tableDesc != nil {
		if viewStr := tableDesc.GetViewQuery(); viewStr != "" {
			if !tableDesc.IsMaterializedView {
				return false
			}
		}
	}
	return true
}

// sql CREATE commands and full schema for each system table.
// These strings are *not* used at runtime, but are checked by the
// `TestSystemTableLiterals` test that compares the table generated by
// evaluating the `CREATE TABLE` statement to the descriptor literal that is
// actually used at runtime.

// These system tables are part of the system config.
const (
	NamespaceTableSchema = `
CREATE TABLE system.namespace (
  "parentID" INT8,
  name       STRING,
  id         INT8,
  PRIMARY KEY ("parentID", name)
);`

	FunctionNamespaceTableSchema = `
CREATE TABLE system.function_namespace (
  "parentID" INT8,
  "funcName"   STRING,
  name       STRING,
  id         INT8,
  PRIMARY KEY ("parentID", "funcName", name)
);`

	DescriptorTableSchema = `
CREATE TABLE system.descriptor (
  id         INT8 PRIMARY KEY,
  descriptor BYTES
);`

	UsersTableSchema = `
CREATE TABLE system.users (
  username         STRING PRIMARY KEY,
  "hashedPassword" BYTES,
  "isRole"         BOOL NOT NULL DEFAULT false,
  usersearchpath   STRING[] NOT NULL DEFAULT ARRAY['public'],
  dbsearchpath     STRING NULL
);`

	UserOptionsTableSchema = `
CREATE TABLE system.user_options (
	username STRING NOT NULL,
	option STRING NOT NULL,
	value STRING,
	PRIMARY KEY (username, option),
	FAMILY "primary" (username, option, value)
);`

	// Zone settings per DB/Table.
	ZonesTableSchema = `
CREATE TABLE system.zones (
  id     INT8 PRIMARY KEY,
  config BYTES
);`

	// Locate settings per DB/Table.
	LocationTableSchema = `
CREATE TABLE system.location (
  id     INT8 PRIMARY KEY,
  locationbuf BYTES
);`

	SettingsTableSchema = `
CREATE TABLE system.settings (
	name              STRING    NOT NULL PRIMARY KEY,
	value             STRING    NOT NULL,
	"lastUpdated"     TIMESTAMP NOT NULL DEFAULT now(),
	"valueType"       STRING,
	FAMILY (name, value, "lastUpdated", "valueType")
);`
)

// These system tables are not part of the system config.
const (
	LeaseTableSchema = `
CREATE TABLE system.lease (
  "descID"   INT8,
  version    INT8,
  "nodeID"   INT8,
  expiration TIMESTAMP,
  PRIMARY KEY ("descID", version, expiration, "nodeID")
);`

	EventLogTableSchema = `
CREATE TABLE system.eventlog (
  timestamp     TIMESTAMP  NOT NULL,
  "eventType"   STRING     NOT NULL,
  "targetID"    INT8       NOT NULL,
  "reportingID" INT8       NOT NULL,
  info          STRING,
  "uniqueID"    BYTES      DEFAULT uuid_v4(),
  PRIMARY KEY (timestamp, "uniqueID")
);`

	// rangelog is currently envisioned as a wide table; many different event
	// types can be recorded to the table.
	RangeEventTableSchema = `
CREATE TABLE system.rangelog (
  timestamp      TIMESTAMP  NOT NULL,
  "rangeID"      INT8       NOT NULL,
  "storeID"      INT8       NOT NULL,
  "eventType"    STRING     NOT NULL,
  "otherRangeID" INT8,
  info           STRING,
  "uniqueID"     INT8       DEFAULT unique_rowid(),
  PRIMARY KEY (timestamp, "uniqueID")
);`

	UITableSchema = `
CREATE TABLE system.ui (
	key           STRING PRIMARY KEY,
	value         BYTES,
	"lastUpdated" TIMESTAMP NOT NULL
);`
	// Note: this schema is changed in a migration (a progress column is added in
	// a separate family).
	// NB: main column family uses old, pre created_by_type/created_by_id columns, named.
	// This is done to minimize migration work required.
	JobsTableSchema = `
CREATE TABLE system.jobs (
	id                INT8      DEFAULT unique_rowid() PRIMARY KEY,
	status            STRING    NOT NULL,
	created           TIMESTAMP NOT NULL DEFAULT now(),
	payload           BYTES     NOT NULL,
	INDEX (status, created),
	FAMILY fam_0_id_status_created_payload (id, status, created, payload)
);`

	// web_sessions are used to track authenticated user actions over stateless
	// connections, such as the cookie-based authentication used by the Admin
	// UI.
	// Design outlined in /docs/RFCS/web_session_login.rfc
	WebSessionsTableSchema = `
CREATE TABLE system.web_sessions (
	id             INT8       NOT NULL DEFAULT unique_rowid() PRIMARY KEY,
	"hashedSecret" BYTES      NOT NULL,
	username       STRING     NOT NULL,
	"createdAt"    TIMESTAMP  NOT NULL DEFAULT now(),
	"expiresAt"    TIMESTAMP  NOT NULL,
	"revokedAt"    TIMESTAMP,
	"lastUsedAt"   TIMESTAMP  NOT NULL DEFAULT now(),
	"auditInfo"    STRING,
	INDEX ("expiresAt"),
	INDEX ("createdAt"),
	FAMILY (id, "hashedSecret", username, "createdAt", "expiresAt", "revokedAt", "lastUsedAt", "auditInfo")
);`

	// table_statistics is used to track statistics collected about individual columns
	// or groups of columns from every table in the database. Each row contains the
	// number of distinct values of the column group and (optionally) a histogram if there
	// is only one column in columnIDs.
	//
	// Design outlined in /docs/RFCS/20170908_sql_optimizer_statistics.md
	TableStatisticsTableSchema = `
CREATE TABLE system.table_statistics (
	"tableID"       INT8       NOT NULL,
	"statisticID"   INT8       NOT NULL DEFAULT unique_rowid(),
	name            STRING,
	"columnIDs"     INT[]  NOT NULL,
	"createdAt"     TIMESTAMP  NOT NULL DEFAULT now(),
	"rowCount"      INT8       NOT NULL,
	"distinctCount" INT8       NOT NULL,
	"nullCount"     INT8       NOT NULL,
	histogram       BYTES,
	PRIMARY KEY ("tableID", "statisticID"),
	FAMILY ("tableID", "statisticID", name, "columnIDs", "createdAt", "rowCount", "distinctCount", "nullCount", histogram)
);`

	// locations are used to map a locality specified by a node to geographic
	// latitude, longitude coordinates, specified as degrees.
	LocationsTableSchema = `
CREATE TABLE system.locations (
  "localityKey"   STRING,
  "localityValue" STRING,
  latitude        DECIMAL(18,15) NOT NULL,
  longitude       DECIMAL(18,15) NOT NULL,
  PRIMARY KEY ("localityKey", "localityValue"),
  FAMILY ("localityKey", "localityValue", latitude, longitude)
);`

	// role_members stores relationships between roles (role->role and role->user).
	RoleMembersTableSchema = `
CREATE TABLE system.role_members (
  "role"   STRING NOT NULL,
  "member" STRING NOT NULL,
  "isAdmin"  BOOL NOT NULL,
  PRIMARY KEY  ("role", "member"),
  INDEX ("role"),
  INDEX ("member")
);`

	// comments stores comments(database, table, column...).
	CommentsTableSchema = `
CREATE TABLE system.comments (
   type      INT8 NOT NULL,    -- type of object, to distinguish between db, table, column and others
   object_id INT8 NOT NULL,    -- object ID, this will be usually db/table desc ID
   sub_id    INT8 NOT NULL,    -- sub ID for columns or indexes inside table, 0 for pure table
   comment   STRING NOT NULL, -- the comment
   PRIMARY KEY (type, object_id, sub_id)
);`
	// snapshots stores snapshots(database, table, column...).
	SnapshotsTableSchema = `
CREATE TABLE system.snapshots (
   id        UUID NOT NULL DEFAULT gen_random_uuid(), -- the snapshot id
   name      STRING NOT NULL, -- the snapshot name
   type      INT8 NOT NULL,    -- type of object, to distinguish between db, table, partition
   object_id INT8 NOT NULL,    -- object ID, this will be usually db/table desc ID
   sub_id    INT8,    -- sub ID for columns inside table, 0 for pure table
   parent_id  UUID DEFAULT NULL, -- the id of parent database snapshot
   asof      TIMESTAMP NOT NULL, -- the snapshot time
   description  STRING, -- the description of snapshot
   FAMILY ("id", "name", "type", "object_id", "sub_id", "parent_id", "asof"),
   FAMILY (description),
   PRIMARY KEY (id),
   INDEX (type, object_id, asof, id)
);`

	// flashback stores flashback(database, table, column...).
	FlashbackTableSchema = `
CREATE TABLE system.flashback (
   type      INT8 NOT NULL,    -- type of object, to distinguish between db, table, partition
   object_id INT8 NOT NULL,    -- object ID, this will be usually db/table desc ID
   object_name STRING NOT NULL, -- object ID, this will be usually db/table desc name
   ct_time    TIMESTAMP NOT NULL, -- the FlashBack enable time
   drop_time    TIMESTAMP NOT NULL, -- the object drop time
   ttl_days INT8 NOT NULL,  -- the gc interval days
   visible BOOL NOT NULL, -- show flashback flag
   parent_id INT8 NOT NULL, -- parent schema id
   db_id INT8 NOT NULL, -- db id
   FAMILY ("type", "object_id", "object_name", "ct_time", "drop_time", "ttl_days", "visible", "parent_id", "db_id"),
   PRIMARY KEY (type, object_id),
   INDEX (type, object_id, ttl_days)
);`

	// add by ygl for max_password_limit
	// authentication stores authentication status of each users.
	AuthenticationTableSchema = `
CREATE TABLE system.authentication (
  "username"         STRING PRIMARY KEY,
  "failureCount"     INT8        NOT NULL DEFAULT 0,
  "lockTime"         TIMESTAMP,
  "maxTryCount"      INT8       NOT NULL DEFAULT 5,
  "enable"           BOOL       NOT NULL DEFAULT true,
   FAMILY ("username"),
   FAMILY ("failureCount", "lockTime", "maxTryCount", "enable")
);`

	// global hint table;

	GlobalHintTableSchema = `
CREATE TABLE system.hints (
	"origin_sql"    STRING NOT NULL,
	"bind_sql"      STRING NOT NULL,
    "default_db"    STRING NOT NULL,
    "status"        STRING NOT NULL,
    "create_time"   TIMESTAMP NOT NULL,
    "update_time"   TIMESTAMP NOT NULL,
    "source"        STRING,
    PRIMARY KEY (origin_sql,bind_sql),
    FAMILY hints (origin_sql,bind_sql,default_db,status,create_time,update_time,source)
);`

	// triggers stores triggers(name ...),
	TriggersTableSchema = `
CREATE TABLE system.triggers (
   "relid"   INT8 NOT NULL,    -- id of relation table   
   "name"    STRING NOT NULL,
   "funcid" INT8,
   "type"    INT8 NOT NULL,
   "enable"  BOOL NOT NULL,
   "isconstraint"    BOOL NOT NULL, 
   "constrname"      STRING,
   "constrrelid"     INT8,
   "deferrable"      BOOL,
   "initdeferred"    BOOL,
   "nargs"           INT8,
   "args"            STRING[],
   "whenexpr"        BYTES,
   "hintFunc"	     BOOL,
   PRIMARY KEY (relid,name),
   FAMILY fam_trigger ("relid", "name", "funcid", "type", "enable", "isconstraint", "constrname", "constrrelid", "deferrable", 
		   "initdeferred", "nargs", "args", "whenexpr", "hintFunc")
);`

	ScheduledJobsTableSchema = `
CREATE TABLE system.scheduled_jobs (
   schedule_id      INT8 DEFAULT unique_rowid() PRIMARY KEY NOT NULL,
   schedule_name    STRING NOT NULL,
   created          TIMESTAMPTZ NOT NULL DEFAULT now(),
   owner            STRING,
   next_run         TIMESTAMPTZ,
   schedule_expr    STRING,
   schedule_details BYTES,
   executor_type    STRING NOT NULL,
   execution_args   BYTES NOT NULL,
   schedule_changes BYTES,
	default_database STRING,
	default_searchpath STRING,
   INDEX "next_run_idx" (next_run),
   FAMILY sched (schedule_id, next_run),
   FAMILY other (
      schedule_name, created, owner, schedule_expr,
      schedule_details, executor_type, execution_args, schedule_changes, default_database, default_searchpath
   )
)`
)

func pk(name string) IndexDescriptor {
	return IndexDescriptor{
		Name:             "primary",
		ID:               1,
		Unique:           true,
		ColumnNames:      []string{name},
		ColumnDirections: singleASC,
		ColumnIDs:        singleID1,
	}
}

// SystemAllowedPrivileges describes the allowable privilege list for each
// system object. Super users (root and admin) must have exactly the specified privileges,
// other users must not exceed the specified privileges.
var SystemAllowedPrivileges = map[ID]privilege.List{
	keys.SystemDatabaseID:         privilege.Access,
	keys.NamespaceTableID:         privilege.ReadData,
	keys.FunctionNamespaceTableID: privilege.ReadData,
	keys.DescriptorTableID:        privilege.ReadData,
	keys.UsersTableID:             privilege.ReadWriteData,
	keys.UserOptionsTableID:       privilege.ReadWriteData,
	keys.ZonesTableID:             privilege.ReadWriteData,
	keys.LocationTableID:          privilege.ReadWriteData,
	// We eventually want to migrate the table to appear read-only to force the
	// the use of a validating, logging accessor, so we'll go ahead and tolerate
	// read-only privs to make that migration possible later.
	keys.SettingsTableID:   privilege.ReadWriteData,
	keys.LeaseTableID:      privilege.ReadWriteData,
	keys.EventLogTableID:   privilege.ReadWriteData,
	keys.RangeEventTableID: privilege.ReadWriteData,
	keys.UITableID:         privilege.ReadWriteData,
	// IMPORTANT: CREATE|DROP|ALL privileges should always be denied or database
	// users will be able to modify system tables' schemas at will. CREATE and
	// DROP privileges are allowed on the above system tables for backwards
	// compatibility reasons only!
	keys.JobsTableID:            privilege.ReadWriteData,
	keys.WebSessionsTableID:     privilege.ReadWriteData,
	keys.TableStatisticsTableID: privilege.ReadWriteData,
	keys.LocationsTableID:       privilege.ReadWriteData,
	keys.RoleMembersTableID:     privilege.ReadWriteData,
	keys.CommentsTableID:        privilege.ReadWriteData,
	keys.SnapshotsTableID:       privilege.ReadWriteData,
	keys.FlashbackTableID:       privilege.ReadWriteData,
	keys.AuthenticationTableID:  privilege.ReadWriteData,
	keys.TriggersTableID:        privilege.ReadWriteData,
	keys.HintTableID:            privilege.ReadWriteData,
	keys.DefaultdbSchemaID:      privilege.SchemaPrivileges,
	keys.PostgresSchemaID:       privilege.SchemaPrivileges,
	keys.ScheduledJobsTableID:   privilege.ReadWriteData,
}

// Helpers used to make some of the TableDescriptor literals below more concise.
var (
	colTypeBool = ColumnType{SemanticType: ColumnType_BOOL,
		VisibleTypeName: coltypes.VisibleTypeName[coltypes.VisBool]}
	colTypeInt8 = ColumnType{SemanticType: ColumnType_INT, VisibleType: ColumnType_BIGINT, Width: 64,
		VisibleTypeName: coltypes.VisibleTypeName[coltypes.VisINT8]}
	colTypeString = ColumnType{SemanticType: ColumnType_STRING,
		VisibleTypeName: coltypes.VisibleTypeName[coltypes.VisSTRING]}
	colTypeBytes = ColumnType{SemanticType: ColumnType_BYTES,
		VisibleTypeName: coltypes.VisibleTypeName[coltypes.VisBYTES]}
	colTypeTimestamp = ColumnType{SemanticType: ColumnType_TIMESTAMP,
		VisibleTypeName: coltypes.VisibleTypeName[coltypes.VisTIMESTAMP]}
	colTypeTimestampTZ = ColumnType{SemanticType: ColumnType_TIMESTAMPTZ,
		VisibleTypeName: coltypes.VisibleTypeName[coltypes.VisTIMESTAMPTZ]}
	colTypeStringArray = ColumnType{
		SemanticType:    ColumnType_ARRAY,
		ArrayContents:   &colTypeString.SemanticType,
		VisibleType:     colTypeString.VisibleType,
		VisibleTypeName: coltypes.VisibleTypeName[coltypes.VisSTRINGA],
		Width:           colTypeString.Width,
		ArrayDimensions: []int32{-1}}
	colTypeIntArray = ColumnType{
		SemanticType:    ColumnType_ARRAY,
		ArrayContents:   &colTypeInt8.SemanticType,
		VisibleType:     colTypeInt8.VisibleType,
		VisibleTypeName: coltypes.VisibleTypeName[coltypes.VisINTA],
		Width:           colTypeInt8.Width,
		ArrayDimensions: []int32{-1}}
	colTypeUUID = ColumnType{SemanticType: ColumnType_UUID, VisibleTypeName: "UUID"}
	singleASC   = []IndexDescriptor_Direction{IndexDescriptor_ASC}
	singleID1   = []ColumnID{1}
)

// MakeSystemDatabaseDesc constructs a copy of the system database
// descriptor.
func MakeSystemDatabaseDesc() DatabaseDescriptor {
	return DatabaseDescriptor{
		Name: "system",
		ID:   keys.SystemDatabaseID,
		// Assign max privileges to root user.
		Privileges: NewCustomSuperuserPrivilegeDescriptor(SystemAllowedPrivileges[keys.SystemDatabaseID], security.NodeUser),
	}
}

// These system config TableDescriptor literals should match the descriptor
// that would be produced by evaluating one of the above `CREATE TABLE`
// statements. See the `TestSystemTableLiterals` which checks that they do
// indeed match, and has suggestions on writing and maintaining them.
var (
	// SystemDB is the descriptor for the system database.
	SystemDB = MakeSystemDatabaseDesc()

	// NamespaceTable is the descriptor for the namespace table.
	NamespaceTable = TableDescriptor{
		Name:     "namespace",
		ID:       keys.NamespaceTableID,
		ParentID: keys.SystemDatabaseID,
		Version:  1,
		Columns: []ColumnDescriptor{
			{Name: "parentID", ID: 1, Type: colTypeInt8},
			{Name: "name", ID: 2, Type: colTypeString},
			{Name: "id", ID: 3, Type: colTypeInt8, Nullable: true},
		},
		NextColumnID: 4,
		Families: []ColumnFamilyDescriptor{
			{Name: "primary", ID: 0, ColumnNames: []string{"parentID", "name"}, ColumnIDs: []ColumnID{1, 2}},
			{Name: "fam_3_id", ID: 3, ColumnNames: []string{"id"}, ColumnIDs: []ColumnID{3}, DefaultColumnID: 3},
		},
		NextFamilyID: 4,
		PrimaryIndex: IndexDescriptor{
			Name:             "primary",
			ID:               1,
			Unique:           true,
			ColumnNames:      []string{"parentID", "name"},
			ColumnDirections: []IndexDescriptor_Direction{IndexDescriptor_ASC, IndexDescriptor_ASC},
			ColumnIDs:        []ColumnID{1, 2},
		},
		NextIndexID:    2,
		Privileges:     NewCustomSuperuserPrivilegeDescriptor(SystemAllowedPrivileges[keys.NamespaceTableID], security.NodeUser),
		FormatVersion:  InterleavedFormatVersion,
		NextMutationID: 1,
	}

	// FunctionNamespaceTable is the descriptor for the namespace table.
	FunctionNamespaceTable = TableDescriptor{
		Name:     "function_namespace",
		ID:       keys.FunctionNamespaceTableID,
		ParentID: keys.SystemDatabaseID,
		Version:  1,
		Columns: []ColumnDescriptor{
			{Name: "parentID", ID: 1, Type: colTypeInt8},
			{Name: "funcName", ID: 2, Type: colTypeString},
			{Name: "name", ID: 3, Type: colTypeString},
			{Name: "id", ID: 4, Type: colTypeInt8, Nullable: true},
		},
		NextColumnID: 5,
		Families: []ColumnFamilyDescriptor{
			{Name: "primary", ID: 0, ColumnNames: []string{"parentID", "funcName", "name"}, ColumnIDs: []ColumnID{1, 2, 3}},
			// {Name: "fam_2_funcname", ID: 2, ColumnNames: []string{"funcname"}, ColumnIDs: []ColumnID{2}, DefaultColumnID: 2},
			{Name: "fam_4_id", ID: 4, ColumnNames: []string{"id"}, ColumnIDs: []ColumnID{4}, DefaultColumnID: 4},
		},
		NextFamilyID: 5,
		PrimaryIndex: IndexDescriptor{
			Name:             "primary",
			ID:               1,
			Unique:           true,
			ColumnNames:      []string{"parentID", "funcName", "name"},
			ColumnDirections: []IndexDescriptor_Direction{IndexDescriptor_ASC, IndexDescriptor_ASC, IndexDescriptor_ASC},
			ColumnIDs:        []ColumnID{1, 2, 3},
		},
		NextIndexID:    2,
		Privileges:     NewCustomSuperuserPrivilegeDescriptor(SystemAllowedPrivileges[keys.FunctionNamespaceTableID], security.NodeUser),
		FormatVersion:  InterleavedFormatVersion,
		NextMutationID: 1,
	}

	// DescriptorTable is the descriptor for the descriptor table.
	DescriptorTable = TableDescriptor{
		Name:       "descriptor",
		ID:         keys.DescriptorTableID,
		Privileges: NewCustomSuperuserPrivilegeDescriptor(SystemAllowedPrivileges[keys.DescriptorTableID], security.NodeUser),
		ParentID:   keys.SystemDatabaseID,
		Version:    1,
		Columns: []ColumnDescriptor{
			{Name: "id", ID: 1, Type: colTypeInt8},
			{Name: "descriptor", ID: 2, Type: colTypeBytes, Nullable: true},
		},
		NextColumnID: 3,
		Families: []ColumnFamilyDescriptor{
			{Name: "primary", ID: 0, ColumnNames: []string{"id"}, ColumnIDs: singleID1},
			{Name: "fam_2_descriptor", ID: 2, ColumnNames: []string{"descriptor"}, ColumnIDs: []ColumnID{2}, DefaultColumnID: 2},
		},
		PrimaryIndex:   pk("id"),
		NextFamilyID:   3,
		NextIndexID:    2,
		FormatVersion:  InterleavedFormatVersion,
		NextMutationID: 1,
	}

	falseBoolString         = "false"
	defaultSearchPathString = "ARRAY['public']"

	// UsersTable is the descriptor for the users table.
	UsersTable = TableDescriptor{
		Name:     "users",
		ID:       keys.UsersTableID,
		ParentID: keys.SystemDatabaseID,
		Version:  1,
		Columns: []ColumnDescriptor{
			{Name: "username", ID: 1, Type: colTypeString},
			{Name: "hashedPassword", ID: 2, Type: colTypeBytes, Nullable: true},
			{Name: "isRole", ID: 3, Type: colTypeBool, DefaultExpr: &falseBoolString},
			{Name: "usersearchpath", ID: 4, Type: colTypeStringArray, DefaultExpr: &defaultSearchPathString},
			{Name: "dbsearchpath", ID: 5, Type: colTypeString, Nullable: true},
		},
		NextColumnID: 6,
		Families: []ColumnFamilyDescriptor{
			{Name: "primary", ID: 0, ColumnNames: []string{"username"}, ColumnIDs: singleID1},
			{Name: "fam_2_hashedPassword", ID: 2, ColumnNames: []string{"hashedPassword"}, ColumnIDs: []ColumnID{2}, DefaultColumnID: 2},
			{Name: "fam_3_isRole", ID: 3, ColumnNames: []string{"isRole"}, ColumnIDs: []ColumnID{3}, DefaultColumnID: 3},
			{Name: "fam_4_usersearchpath", ID: 4, ColumnNames: []string{"usersearchpath"}, ColumnIDs: []ColumnID{4}, DefaultColumnID: 4},
			{Name: "fam_5_dbsearchpath", ID: 5, ColumnNames: []string{"dbsearchpath"}, ColumnIDs: []ColumnID{5}, DefaultColumnID: 5},
		},
		PrimaryIndex:   pk("username"),
		NextFamilyID:   6,
		NextIndexID:    2,
		Privileges:     NewCustomSuperuserPrivilegeDescriptor(SystemAllowedPrivileges[keys.UsersTableID], security.NodeUser),
		FormatVersion:  InterleavedFormatVersion,
		NextMutationID: 1,
	}

	// ZonesTable is the descriptor for the zones table.
	ZonesTable = TableDescriptor{
		Name:     "zones",
		ID:       keys.ZonesTableID,
		ParentID: keys.SystemDatabaseID,
		Version:  1,
		Columns: []ColumnDescriptor{
			{Name: "id", ID: 1, Type: colTypeInt8},
			{Name: "config", ID: keys.ZonesTableConfigColumnID, Type: colTypeBytes, Nullable: true},
		},
		NextColumnID: 3,
		Families: []ColumnFamilyDescriptor{
			{Name: "primary", ID: 0, ColumnNames: []string{"id"}, ColumnIDs: singleID1},
			{Name: "fam_2_config", ID: 2, ColumnNames: []string{"config"}, ColumnIDs: []ColumnID{2}, DefaultColumnID: 2},
		},
		PrimaryIndex: IndexDescriptor{
			Name:             "primary",
			ID:               keys.ZonesTablePrimaryIndexID,
			Unique:           true,
			ColumnNames:      []string{"id"},
			ColumnDirections: singleASC,
			ColumnIDs:        []ColumnID{keys.ZonesTablePrimaryIndexID},
		},
		NextFamilyID:   3,
		NextIndexID:    2,
		Privileges:     NewCustomSuperuserPrivilegeDescriptor(SystemAllowedPrivileges[keys.ZonesTableID], security.NodeUser),
		FormatVersion:  InterleavedFormatVersion,
		NextMutationID: 1,
	}
	// SettingsTable is the descriptor for the jobs table.
	SettingsTable = TableDescriptor{
		Name:     "settings",
		ID:       keys.SettingsTableID,
		ParentID: keys.SystemDatabaseID,
		Version:  1,
		Columns: []ColumnDescriptor{
			{Name: "name", ID: 1, Type: colTypeString},
			{Name: "value", ID: 2, Type: colTypeString},
			{Name: "lastUpdated", ID: 3, Type: colTypeTimestamp, DefaultExpr: &nowString},
			{Name: "valueType", ID: 4, Type: colTypeString, Nullable: true},
		},
		NextColumnID: 5,
		Families: []ColumnFamilyDescriptor{
			{
				Name:        "fam_0_name_value_lastUpdated_valueType",
				ID:          0,
				ColumnNames: []string{"name", "value", "lastUpdated", "valueType"},
				ColumnIDs:   []ColumnID{1, 2, 3, 4},
			},
		},
		NextFamilyID:   1,
		PrimaryIndex:   pk("name"),
		NextIndexID:    2,
		Privileges:     NewCustomSuperuserPrivilegeDescriptor(SystemAllowedPrivileges[keys.SettingsTableID], security.NodeUser),
		FormatVersion:  InterleavedFormatVersion,
		NextMutationID: 1,
	}

	// LocationTable is the descriptor for the location table.
	LocationTable = TableDescriptor{
		Name:     "location",
		ID:       keys.LocationTableID,
		ParentID: keys.SystemDatabaseID,
		Version:  1,
		Columns: []ColumnDescriptor{
			{Name: "id", ID: keys.LocationTablePrimaryIndexID, Type: colTypeInt8},
			{Name: "locationbuf", ID: keys.LocationTableBufColumnID, Type: colTypeBytes, Nullable: true},
		},
		NextColumnID: 3,
		Families: []ColumnFamilyDescriptor{
			{Name: "primary", ID: 0, ColumnNames: []string{"id"}, ColumnIDs: singleID1},
			{Name: "fam_2_locationbuf", ID: 2, ColumnNames: []string{"locationbuf"}, ColumnIDs: []ColumnID{2}, DefaultColumnID: 2},
		},
		PrimaryIndex: IndexDescriptor{
			Name:             "primary",
			ID:               keys.LocationTablePrimaryIndexID,
			Unique:           true,
			ColumnNames:      []string{"id"},
			ColumnDirections: singleASC,
			ColumnIDs:        []ColumnID{keys.LocationTablePrimaryIndexID},
		},
		NextFamilyID:   3,
		NextIndexID:    2,
		Privileges:     NewCustomSuperuserPrivilegeDescriptor(SystemAllowedPrivileges[keys.LocationTableID], security.NodeUser),
		FormatVersion:  InterleavedFormatVersion,
		NextMutationID: 1,
	}
)

// These system TableDescriptor literals should match the descriptor that
// would be produced by evaluating one of the above `CREATE TABLE` statements
// for system tables that are not system config tables. See the
// `TestSystemTableLiterals` which checks that they do indeed match, and has
// suggestions on writing and maintaining them.
var (
	// LeaseTable is the descriptor for the leases table.
	LeaseTable = TableDescriptor{
		Name:     "lease",
		ID:       keys.LeaseTableID,
		ParentID: keys.SystemDatabaseID,
		Version:  1,
		Columns: []ColumnDescriptor{
			{Name: "descID", ID: 1, Type: colTypeInt8},
			{Name: "version", ID: 2, Type: colTypeInt8},
			{Name: "nodeID", ID: 3, Type: colTypeInt8},
			{Name: "expiration", ID: 4, Type: colTypeTimestamp},
		},
		NextColumnID: 5,
		Families: []ColumnFamilyDescriptor{
			{Name: "primary", ID: 0, ColumnNames: []string{"descID", "version", "nodeID", "expiration"}, ColumnIDs: []ColumnID{1, 2, 3, 4}},
		},
		PrimaryIndex: IndexDescriptor{
			Name:             "primary",
			ID:               1,
			Unique:           true,
			ColumnNames:      []string{"descID", "version", "expiration", "nodeID"},
			ColumnDirections: []IndexDescriptor_Direction{IndexDescriptor_ASC, IndexDescriptor_ASC, IndexDescriptor_ASC, IndexDescriptor_ASC},
			ColumnIDs:        []ColumnID{1, 2, 4, 3},
		},
		NextFamilyID:   1,
		NextIndexID:    2,
		Privileges:     NewCustomSuperuserPrivilegeDescriptor(SystemAllowedPrivileges[keys.LeaseTableID], security.NodeUser),
		FormatVersion:  InterleavedFormatVersion,
		NextMutationID: 1,
	}

	uuidV4String = "uuid_v4()"

	// EventLogTable is the descriptor for the event log table.
	EventLogTable = TableDescriptor{
		Name:     "eventlog",
		ID:       keys.EventLogTableID,
		ParentID: keys.SystemDatabaseID,
		Version:  1,
		Columns: []ColumnDescriptor{
			{Name: "timestamp", ID: 1, Type: colTypeTimestamp},
			{Name: "eventType", ID: 2, Type: colTypeString},
			{Name: "targetID", ID: 3, Type: colTypeInt8},
			{Name: "reportingID", ID: 4, Type: colTypeInt8},
			{Name: "info", ID: 5, Type: colTypeString, Nullable: true},
			{Name: "uniqueID", ID: 6, Type: colTypeBytes, DefaultExpr: &uuidV4String},
		},
		NextColumnID: 7,
		Families: []ColumnFamilyDescriptor{
			{Name: "primary", ID: 0, ColumnNames: []string{"timestamp", "uniqueID"}, ColumnIDs: []ColumnID{1, 6}},
			{Name: "fam_2_eventType", ID: 2, ColumnNames: []string{"eventType"}, ColumnIDs: []ColumnID{2}, DefaultColumnID: 2},
			{Name: "fam_3_targetID", ID: 3, ColumnNames: []string{"targetID"}, ColumnIDs: []ColumnID{3}, DefaultColumnID: 3},
			{Name: "fam_4_reportingID", ID: 4, ColumnNames: []string{"reportingID"}, ColumnIDs: []ColumnID{4}, DefaultColumnID: 4},
			{Name: "fam_5_info", ID: 5, ColumnNames: []string{"info"}, ColumnIDs: []ColumnID{5}, DefaultColumnID: 5},
		},
		PrimaryIndex: IndexDescriptor{
			Name:             "primary",
			ID:               1,
			Unique:           true,
			ColumnNames:      []string{"timestamp", "uniqueID"},
			ColumnDirections: []IndexDescriptor_Direction{IndexDescriptor_ASC, IndexDescriptor_ASC},
			ColumnIDs:        []ColumnID{1, 6},
		},
		NextFamilyID:   6,
		NextIndexID:    2,
		Privileges:     NewCustomSuperuserPrivilegeDescriptor(SystemAllowedPrivileges[keys.EventLogTableID], security.NodeUser),
		FormatVersion:  InterleavedFormatVersion,
		NextMutationID: 1,
	}

	uniqueRowIDString = "unique_rowid()"

	// RangeEventTable is the descriptor for the range log table.
	RangeEventTable = TableDescriptor{
		Name:     "rangelog",
		ID:       keys.RangeEventTableID,
		ParentID: keys.SystemDatabaseID,
		Version:  1,
		Columns: []ColumnDescriptor{
			{Name: "timestamp", ID: 1, Type: colTypeTimestamp},
			{Name: "rangeID", ID: 2, Type: colTypeInt8},
			{Name: "storeID", ID: 3, Type: colTypeInt8},
			{Name: "eventType", ID: 4, Type: colTypeString},
			{Name: "otherRangeID", ID: 5, Type: colTypeInt8, Nullable: true},
			{Name: "info", ID: 6, Type: colTypeString, Nullable: true},
			{Name: "uniqueID", ID: 7, Type: colTypeInt8, DefaultExpr: &uniqueRowIDString},
		},
		NextColumnID: 8,
		Families: []ColumnFamilyDescriptor{
			{Name: "primary", ID: 0, ColumnNames: []string{"timestamp", "uniqueID"}, ColumnIDs: []ColumnID{1, 7}},
			{Name: "fam_2_rangeID", ID: 2, ColumnNames: []string{"rangeID"}, ColumnIDs: []ColumnID{2}, DefaultColumnID: 2},
			{Name: "fam_3_storeID", ID: 3, ColumnNames: []string{"storeID"}, ColumnIDs: []ColumnID{3}, DefaultColumnID: 3},
			{Name: "fam_4_eventType", ID: 4, ColumnNames: []string{"eventType"}, ColumnIDs: []ColumnID{4}, DefaultColumnID: 4},
			{Name: "fam_5_otherRangeID", ID: 5, ColumnNames: []string{"otherRangeID"}, ColumnIDs: []ColumnID{5}, DefaultColumnID: 5},
			{Name: "fam_6_info", ID: 6, ColumnNames: []string{"info"}, ColumnIDs: []ColumnID{6}, DefaultColumnID: 6},
		},
		PrimaryIndex: IndexDescriptor{
			Name:             "primary",
			ID:               1,
			Unique:           true,
			ColumnNames:      []string{"timestamp", "uniqueID"},
			ColumnDirections: []IndexDescriptor_Direction{IndexDescriptor_ASC, IndexDescriptor_ASC},
			ColumnIDs:        []ColumnID{1, 7},
		},
		NextFamilyID:   7,
		NextIndexID:    2,
		Privileges:     NewCustomSuperuserPrivilegeDescriptor(SystemAllowedPrivileges[keys.RangeEventTableID], security.NodeUser),
		FormatVersion:  InterleavedFormatVersion,
		NextMutationID: 1,
	}

	// UITable is the descriptor for the ui table.
	UITable = TableDescriptor{
		Name:     "ui",
		ID:       keys.UITableID,
		ParentID: keys.SystemDatabaseID,
		Version:  1,
		Columns: []ColumnDescriptor{
			{Name: "key", ID: 1, Type: colTypeString},
			{Name: "value", ID: 2, Type: colTypeBytes, Nullable: true},
			{Name: "lastUpdated", ID: 3, Type: ColumnType{SemanticType: ColumnType_TIMESTAMP,
				VisibleTypeName: coltypes.VisibleTypeName[coltypes.VisTIMESTAMP]}},
		},
		NextColumnID: 4,
		Families: []ColumnFamilyDescriptor{
			{Name: "primary", ID: 0, ColumnNames: []string{"key"}, ColumnIDs: singleID1},
			{Name: "fam_2_value", ID: 2, ColumnNames: []string{"value"}, ColumnIDs: []ColumnID{2}, DefaultColumnID: 2},
			{Name: "fam_3_lastUpdated", ID: 3, ColumnNames: []string{"lastUpdated"}, ColumnIDs: []ColumnID{3}, DefaultColumnID: 3},
		},
		NextFamilyID:   4,
		PrimaryIndex:   pk("key"),
		NextIndexID:    2,
		Privileges:     NewCustomSuperuserPrivilegeDescriptor(SystemAllowedPrivileges[keys.UITableID], security.NodeUser),
		FormatVersion:  InterleavedFormatVersion,
		NextMutationID: 1,
	}

	nowString = "now()"

	// JobsTable is the descriptor for the jobs table.
	JobsTable = TableDescriptor{
		Name:     "jobs",
		ID:       keys.JobsTableID,
		ParentID: keys.SystemDatabaseID,
		Version:  1,
		Columns: []ColumnDescriptor{
			{Name: "id", ID: 1, Type: colTypeInt8, DefaultExpr: &uniqueRowIDString},
			{Name: "status", ID: 2, Type: colTypeString},
			{Name: "created", ID: 3, Type: colTypeTimestamp, DefaultExpr: &nowString},
			{Name: "payload", ID: 4, Type: colTypeBytes},
		},
		NextColumnID: 5,
		Families: []ColumnFamilyDescriptor{
			{
				Name:        "fam_0_id_status_created_payload",
				ID:          0,
				ColumnNames: []string{"id", "status", "created", "payload"},
				ColumnIDs:   []ColumnID{1, 2, 3, 4},
			},
		},
		NextFamilyID: 1,
		PrimaryIndex: pk("id"),
		Indexes: []IndexDescriptor{
			{
				Name:             "jobs_status_created_idx",
				ID:               2,
				Unique:           false,
				ColumnNames:      []string{"status", "created"},
				ColumnDirections: []IndexDescriptor_Direction{IndexDescriptor_ASC, IndexDescriptor_ASC},
				ColumnIDs:        []ColumnID{2, 3},
				ExtraColumnIDs:   []ColumnID{1},
			},
		},
		NextIndexID:    3,
		Privileges:     NewCustomSuperuserPrivilegeDescriptor(SystemAllowedPrivileges[keys.JobsTableID], security.NodeUser),
		FormatVersion:  InterleavedFormatVersion,
		NextMutationID: 1,
	}

	// WebSessions table to authenticate sessions over stateless connections.
	WebSessionsTable = TableDescriptor{
		Name:     "web_sessions",
		ID:       keys.WebSessionsTableID,
		ParentID: keys.SystemDatabaseID,
		Version:  1,
		Columns: []ColumnDescriptor{
			{Name: "id", ID: 1, Type: colTypeInt8, DefaultExpr: &uniqueRowIDString},
			{Name: "hashedSecret", ID: 2, Type: colTypeBytes},
			{Name: "username", ID: 3, Type: colTypeString},
			{Name: "createdAt", ID: 4, Type: colTypeTimestamp, DefaultExpr: &nowString},
			{Name: "expiresAt", ID: 5, Type: colTypeTimestamp},
			{Name: "revokedAt", ID: 6, Type: colTypeTimestamp, Nullable: true},
			{Name: "lastUsedAt", ID: 7, Type: colTypeTimestamp, DefaultExpr: &nowString},
			{Name: "auditInfo", ID: 8, Type: colTypeString, Nullable: true},
		},
		NextColumnID: 9,
		Families: []ColumnFamilyDescriptor{
			{
				Name: "fam_0_id_hashedSecret_username_createdAt_expiresAt_revokedAt_lastUsedAt_auditInfo",
				ID:   0,
				ColumnNames: []string{
					"id",
					"hashedSecret",
					"username",
					"createdAt",
					"expiresAt",
					"revokedAt",
					"lastUsedAt",
					"auditInfo",
				},
				ColumnIDs: []ColumnID{1, 2, 3, 4, 5, 6, 7, 8},
			},
		},
		NextFamilyID: 1,
		PrimaryIndex: pk("id"),
		Indexes: []IndexDescriptor{
			{
				Name:             "web_sessions_expiresAt_idx",
				ID:               2,
				Unique:           false,
				ColumnNames:      []string{"expiresAt"},
				ColumnDirections: []IndexDescriptor_Direction{IndexDescriptor_ASC},
				ColumnIDs:        []ColumnID{5},
				ExtraColumnIDs:   []ColumnID{1},
			},
			{
				Name:             "web_sessions_createdAt_idx",
				ID:               3,
				Unique:           false,
				ColumnNames:      []string{"createdAt"},
				ColumnDirections: []IndexDescriptor_Direction{IndexDescriptor_ASC},
				ColumnIDs:        []ColumnID{4},
				ExtraColumnIDs:   []ColumnID{1},
			},
		},
		NextIndexID:    4,
		Privileges:     NewCustomSuperuserPrivilegeDescriptor(SystemAllowedPrivileges[keys.WebSessionsTableID], security.NodeUser),
		NextMutationID: 1,
		FormatVersion:  3,
	}

	// TableStatistics table to hold statistics about columns and column groups.
	TableStatisticsTable = TableDescriptor{
		Name:     "table_statistics",
		ID:       keys.TableStatisticsTableID,
		ParentID: keys.SystemDatabaseID,
		Version:  1,
		Columns: []ColumnDescriptor{
			{Name: "tableID", ID: 1, Type: colTypeInt8},
			{Name: "statisticID", ID: 2, Type: colTypeInt8, DefaultExpr: &uniqueRowIDString},
			{Name: "name", ID: 3, Type: colTypeString, Nullable: true},
			{Name: "columnIDs", ID: 4, Type: colTypeIntArray},
			{Name: "createdAt", ID: 5, Type: colTypeTimestamp, DefaultExpr: &nowString},
			{Name: "rowCount", ID: 6, Type: colTypeInt8},
			{Name: "distinctCount", ID: 7, Type: colTypeInt8},
			{Name: "nullCount", ID: 8, Type: colTypeInt8},
			{Name: "histogram", ID: 9, Type: colTypeBytes, Nullable: true},
		},
		NextColumnID: 10,
		Families: []ColumnFamilyDescriptor{
			{
				Name: "fam_0_tableID_statisticID_name_columnIDs_createdAt_rowCount_distinctCount_nullCount_histogram",
				ID:   0,
				ColumnNames: []string{
					"tableID",
					"statisticID",
					"name",
					"columnIDs",
					"createdAt",
					"rowCount",
					"distinctCount",
					"nullCount",
					"histogram",
				},
				ColumnIDs: []ColumnID{1, 2, 3, 4, 5, 6, 7, 8, 9},
			},
		},
		NextFamilyID: 1,
		PrimaryIndex: IndexDescriptor{
			Name:             "primary",
			ID:               1,
			Unique:           true,
			ColumnNames:      []string{"tableID", "statisticID"},
			ColumnDirections: []IndexDescriptor_Direction{IndexDescriptor_ASC, IndexDescriptor_ASC},
			ColumnIDs:        []ColumnID{1, 2},
		},
		NextIndexID:    2,
		Privileges:     NewCustomSuperuserPrivilegeDescriptor(SystemAllowedPrivileges[keys.TableStatisticsTableID], security.NodeUser),
		FormatVersion:  InterleavedFormatVersion,
		NextMutationID: 1,
	}

	latLonDecimal = ColumnType{
		SemanticType:    ColumnType_DECIMAL,
		Precision:       18,
		Width:           15,
		VisibleTypeName: "DECIMAL(18,15)",
	}

	// LocationsTable is the descriptor for the locations table.
	LocationsTable = TableDescriptor{
		Name:     "locations",
		ID:       keys.LocationsTableID,
		ParentID: keys.SystemDatabaseID,
		Version:  1,
		Columns: []ColumnDescriptor{
			{Name: "localityKey", ID: 1, Type: colTypeString},
			{Name: "localityValue", ID: 2, Type: colTypeString},
			{Name: "latitude", ID: 3, Type: latLonDecimal},
			{Name: "longitude", ID: 4, Type: latLonDecimal},
		},
		NextColumnID: 5,
		Families: []ColumnFamilyDescriptor{
			{
				Name:        "fam_0_localityKey_localityValue_latitude_longitude",
				ID:          0,
				ColumnNames: []string{"localityKey", "localityValue", "latitude", "longitude"},
				ColumnIDs:   []ColumnID{1, 2, 3, 4},
			},
		},
		NextFamilyID: 1,
		PrimaryIndex: IndexDescriptor{
			Name:             "primary",
			ID:               1,
			Unique:           true,
			ColumnNames:      []string{"localityKey", "localityValue"},
			ColumnDirections: []IndexDescriptor_Direction{IndexDescriptor_ASC, IndexDescriptor_ASC},
			ColumnIDs:        []ColumnID{1, 2},
		},
		NextIndexID:    2,
		Privileges:     NewCustomSuperuserPrivilegeDescriptor(SystemAllowedPrivileges[keys.LocationsTableID], security.NodeUser),
		FormatVersion:  InterleavedFormatVersion,
		NextMutationID: 1,
	}

	// RoleMembersTable is the descriptor for the role_members table.
	RoleMembersTable = TableDescriptor{
		Name:     "role_members",
		ID:       keys.RoleMembersTableID,
		ParentID: keys.SystemDatabaseID,
		Version:  1,
		Columns: []ColumnDescriptor{
			{Name: "role", ID: 1, Type: colTypeString},
			{Name: "member", ID: 2, Type: colTypeString},
			{Name: "isAdmin", ID: 3, Type: colTypeBool},
		},
		NextColumnID: 4,
		Families: []ColumnFamilyDescriptor{
			{
				Name:        "primary",
				ID:          0,
				ColumnNames: []string{"role", "member"},
				ColumnIDs:   []ColumnID{1, 2},
			},
			{
				Name:            "fam_3_isAdmin",
				ID:              3,
				ColumnNames:     []string{"isAdmin"},
				ColumnIDs:       []ColumnID{3},
				DefaultColumnID: 3,
			},
		},
		NextFamilyID: 4,
		PrimaryIndex: IndexDescriptor{
			Name:             "primary",
			ID:               1,
			Unique:           true,
			ColumnNames:      []string{"role", "member"},
			ColumnDirections: []IndexDescriptor_Direction{IndexDescriptor_ASC, IndexDescriptor_ASC},
			ColumnIDs:        []ColumnID{1, 2},
		},
		Indexes: []IndexDescriptor{
			{
				Name:             "role_members_role_idx",
				ID:               2,
				Unique:           false,
				ColumnNames:      []string{"role"},
				ColumnDirections: []IndexDescriptor_Direction{IndexDescriptor_ASC},
				ColumnIDs:        []ColumnID{1},

				ExtraColumnIDs: []ColumnID{2},
			},
			{
				Name:             "role_members_member_idx",
				ID:               3,
				Unique:           false,
				ColumnNames:      []string{"member"},
				ColumnDirections: []IndexDescriptor_Direction{IndexDescriptor_ASC},
				ColumnIDs:        []ColumnID{2},
				ExtraColumnIDs:   []ColumnID{1},
			},
		},
		NextIndexID:    4,
		Privileges:     NewCustomSuperuserPrivilegeDescriptor(SystemAllowedPrivileges[keys.RoleMembersTableID], security.NodeUser),
		FormatVersion:  InterleavedFormatVersion,
		NextMutationID: 1,
	}

	// CommentsTable is the descriptor for the comments table.
	CommentsTable = TableDescriptor{
		Name:     "comments",
		ID:       keys.CommentsTableID,
		ParentID: keys.SystemDatabaseID,
		Version:  1,
		Columns: []ColumnDescriptor{
			{Name: "type", ID: 1, Type: colTypeInt8},
			{Name: "object_id", ID: 2, Type: colTypeInt8},
			{Name: "sub_id", ID: 3, Type: colTypeInt8},
			{Name: "comment", ID: 4, Type: colTypeString},
		},
		NextColumnID: 5,
		Families: []ColumnFamilyDescriptor{
			{Name: "primary", ID: 0, ColumnNames: []string{"type", "object_id", "sub_id"}, ColumnIDs: []ColumnID{1, 2, 3}},
			{Name: "fam_4_comment", ID: 4, ColumnNames: []string{"comment"}, ColumnIDs: []ColumnID{4}, DefaultColumnID: 4},
		},
		NextFamilyID: 5,
		PrimaryIndex: IndexDescriptor{
			Name:             "primary",
			ID:               1,
			Unique:           true,
			ColumnNames:      []string{"type", "object_id", "sub_id"},
			ColumnDirections: []IndexDescriptor_Direction{IndexDescriptor_ASC, IndexDescriptor_ASC, IndexDescriptor_ASC},
			ColumnIDs:        []ColumnID{1, 2, 3},
		},
		NextIndexID:    2,
		Privileges:     NewCustomSuperuserAndPublicPrivilegeDescriptor(SystemAllowedPrivileges[keys.CommentsTableID], security.NodeUser),
		FormatVersion:  InterleavedFormatVersion,
		NextMutationID: 1,
	}

	// FlashbackTable is the descriptor for the flashback table.
	FlashbackTable = TableDescriptor{
		Name:     "flashback",
		ID:       keys.FlashbackTableID,
		ParentID: keys.SystemDatabaseID,
		Version:  1,
		Columns: []ColumnDescriptor{
			{Name: "type", ID: 1, Type: colTypeInt8},
			{Name: "object_id", ID: 2, Type: colTypeInt8},
			{Name: "object_name", ID: 3, Type: colTypeString},
			{Name: "ct_time", ID: 4, Type: colTypeTimestamp},
			{Name: "drop_time", ID: 5, Type: colTypeTimestamp},
			{Name: "ttl_days", ID: 6, Type: colTypeInt8},
			{Name: "visible", ID: 7, Type: colTypeBool},
			{Name: "parent_id", ID: 8, Type: colTypeInt8},
			{Name: "db_id", ID: 9, Type: colTypeInt8},
		},
		NextColumnID: 10,
		Families: []ColumnFamilyDescriptor{
			{Name: "fam_0_type_object_id_object_name_ct_time_drop_time_ttl_days_visible_parent_id_db_id", ID: 0, ColumnNames: []string{"type", "object_id", "object_name", "ct_time", "drop_time", "ttl_days", "visible", "parent_id", "db_id"}, ColumnIDs: []ColumnID{1, 2, 3, 4, 5, 6, 7, 8, 9}},
		},
		NextFamilyID: 1,
		PrimaryIndex: IndexDescriptor{
			Name:             "primary",
			ID:               1,
			Unique:           true,
			ColumnNames:      []string{"type", "object_id"},
			ColumnDirections: []IndexDescriptor_Direction{IndexDescriptor_ASC, IndexDescriptor_ASC},
			ColumnIDs:        []ColumnID{1, 2},
		},
		Indexes: []IndexDescriptor{
			{
				Name:             "flashback_type_object_id_ttl_days_idx",
				ID:               2,
				Unique:           false,
				ColumnNames:      []string{"type", "object_id", "ttl_days"},
				ColumnDirections: []IndexDescriptor_Direction{IndexDescriptor_ASC, IndexDescriptor_ASC, IndexDescriptor_ASC},
				ColumnIDs:        []ColumnID{1, 2, 6},
			},
		},
		NextIndexID:    3,
		Privileges:     NewCustomSuperuserAndPublicPrivilegeDescriptor(SystemAllowedPrivileges[keys.FlashbackTableID], security.NodeUser),
		FormatVersion:  InterleavedFormatVersion,
		NextMutationID: 1,
	}

	// SnapshotsTable is the descriptor for the Snapshots table.
	genUUID        = "gen_random_uuid()"
	nullString     = "NULL"
	SnapshotsTable = TableDescriptor{
		Name:     "snapshots",
		ID:       keys.SnapshotsTableID,
		ParentID: keys.SystemDatabaseID,
		Version:  1,
		Columns: []ColumnDescriptor{
			{Name: "id", ID: 1, Type: colTypeUUID, DefaultExpr: &genUUID},
			{Name: "name", ID: 2, Type: colTypeString},
			{Name: "type", ID: 3, Type: colTypeInt8},
			{Name: "object_id", ID: 4, Type: colTypeInt8},
			{Name: "sub_id", ID: 5, Type: colTypeInt8, Nullable: true},
			{Name: "parent_id", ID: 6, Type: colTypeUUID, Nullable: true, DefaultExpr: &nullString},
			{Name: "asof", ID: 7, Type: colTypeTimestamp},
			{Name: "description", ID: 8, Type: colTypeString, Nullable: true},
		},
		NextColumnID: 9,
		Families: []ColumnFamilyDescriptor{
			{Name: "fam_0_id_name_type_object_id_sub_id_parent_id_asof", ID: 0, ColumnNames: []string{"id", "name", "type", "object_id", "sub_id", "parent_id", "asof"}, ColumnIDs: []ColumnID{1, 2, 3, 4, 5, 6, 7}},
			{Name: "fam_1_description", ID: 1, ColumnNames: []string{"description"}, ColumnIDs: []ColumnID{8}, DefaultColumnID: 8},
		},
		NextFamilyID: 2,
		PrimaryIndex: IndexDescriptor{
			Name:             "primary",
			ID:               1,
			Unique:           true,
			ColumnNames:      []string{"id"},
			ColumnDirections: []IndexDescriptor_Direction{IndexDescriptor_ASC},
			ColumnIDs:        []ColumnID{1},
			//ExtraColumnIDs:   []ColumnID{5},
		},
		Indexes: []IndexDescriptor{
			{
				Name:             "snapshots_type_object_id_asof_id_idx",
				ID:               2,
				Unique:           false,
				ColumnNames:      []string{"type", "object_id", "asof", "id"},
				ColumnDirections: []IndexDescriptor_Direction{IndexDescriptor_ASC, IndexDescriptor_ASC, IndexDescriptor_ASC, IndexDescriptor_ASC},
				ColumnIDs:        []ColumnID{3, 4, 7, 1},
				//ExtraColumnIDs:   []ColumnID{7, 1},
			},
		},
		NextIndexID:    3,
		Privileges:     NewCustomSuperuserAndPublicPrivilegeDescriptor(SystemAllowedPrivileges[keys.SnapshotsTableID], security.NodeUser),
		FormatVersion:  InterleavedFormatVersion,
		NextMutationID: 1,
	}

	trueBoolString  = "true"
	Value0NumString = "0"
	Value5NumString = "5"

	// AuthenticationTable is the descriptor for the authentication table.
	AuthenticationTable = TableDescriptor{
		Name:     "authentication",
		ID:       keys.AuthenticationTableID,
		ParentID: keys.SystemDatabaseID,
		Version:  1,
		Columns: []ColumnDescriptor{
			{Name: "username", ID: 1, Type: colTypeString},
			{Name: "failureCount", ID: 2, Type: colTypeInt8, DefaultExpr: &Value0NumString},
			{Name: "lockTime", ID: 3, Type: colTypeTimestamp, Nullable: true},
			{Name: "maxTryCount", ID: 4, Type: colTypeInt8, DefaultExpr: &Value5NumString},
			{Name: "enable", ID: 5, Type: colTypeBool, DefaultExpr: &trueBoolString},
		},
		NextColumnID: 6,
		Families: []ColumnFamilyDescriptor{
			{
				Name:        "fam_0_username",
				ID:          0,
				ColumnNames: []string{"username"},
				ColumnIDs:   singleID1,
			},
			{
				Name:        "fam_1_failureCount_lockTime_maxTryCount_enable",
				ID:          1,
				ColumnNames: []string{"failureCount", "lockTime", "maxTryCount", "enable"},
				ColumnIDs:   []ColumnID{2, 3, 4, 5},
			},
		},
		NextFamilyID: 2,
		PrimaryIndex: IndexDescriptor{
			Name:             "primary",
			ID:               1,
			Unique:           true,
			ColumnNames:      []string{"username"},
			ColumnDirections: []IndexDescriptor_Direction{IndexDescriptor_ASC},
			ColumnIDs:        []ColumnID{1},
		},
		NextIndexID:    2,
		Privileges:     NewCustomSuperuserPrivilegeDescriptor(SystemAllowedPrivileges[keys.AuthenticationTableID], security.NodeUser),
		FormatVersion:  InterleavedFormatVersion,
		NextMutationID: 1,
	}

	//UserOptionsTable is the descriptor for the user_options table.
	UserOptionsTable = TableDescriptor{
		Name:     "user_options",
		ID:       keys.UserOptionsTableID,
		ParentID: keys.SystemDatabaseID,
		Version:  1,
		Columns: []ColumnDescriptor{
			{Name: "username", ID: 1, Type: colTypeString},
			{Name: "option", ID: 2, Type: colTypeString},
			{Name: "value", ID: 3, Type: colTypeString, Nullable: true},
		},
		NextColumnID: 4,
		Families: []ColumnFamilyDescriptor{
			{
				Name:            "primary",
				ColumnNames:     []string{"username", "option", "value"},
				ColumnIDs:       []ColumnID{1, 2, 3},
				DefaultColumnID: 3,
			},
		},
		NextFamilyID: 1,
		PrimaryIndex: IndexDescriptor{
			Name:             "primary",
			ID:               1,
			Unique:           true,
			ColumnNames:      []string{"username", "option"},
			ColumnDirections: []IndexDescriptor_Direction{IndexDescriptor_ASC, IndexDescriptor_ASC},
			ColumnIDs:        []ColumnID{1, 2},
		},
		NextIndexID:    2,
		Privileges:     NewCustomSuperuserPrivilegeDescriptor(SystemAllowedPrivileges[keys.UserOptionsTableID], security.NodeUser),
		FormatVersion:  InterleavedFormatVersion,
		NextMutationID: 1,
	}

	// DefaultdbPublicSchema is the descriptor of the defaultdb.public schema
	DefaultdbPublicSchema = SchemaDescriptor{
		Name:       "public",
		ID:         keys.DefaultdbSchemaID,
		Privileges: NewCustomSuperuserAndPublicPrivilegeDescriptor(SystemAllowedPrivileges[keys.DefaultdbSchemaID], security.NodeUser),
		ParentID:   50,
	}
	PostgresPublicSchema = SchemaDescriptor{
		Name:       "public",
		ID:         keys.PostgresSchemaID,
		Privileges: NewCustomSuperuserAndPublicPrivilegeDescriptor(SystemAllowedPrivileges[keys.PostgresSchemaID], security.NodeUser),
		ParentID:   52,
	}

	// TriggersTable is the descriptor for the triggers table.
	TriggersTable = TableDescriptor{
		Name:     "triggers",
		ID:       keys.TriggersTableID,
		ParentID: keys.SystemDatabaseID,
		Version:  1,
		Columns: []ColumnDescriptor{
			{Name: "relid", ID: 1, Type: colTypeInt8},
			{Name: "name", ID: 2, Type: colTypeString},
			{Name: "funcid", ID: 3, Type: colTypeInt8, Nullable: true},
			{Name: "type", ID: 4, Type: colTypeInt8},
			{Name: "enable", ID: 5, Type: colTypeBool},
			{Name: "isconstraint", ID: 6, Type: colTypeBool},
			{Name: "constrname", ID: 7, Type: colTypeString, Nullable: true},
			{Name: "constrrelid", ID: 8, Type: colTypeInt8, Nullable: true},
			{Name: "deferrable", ID: 9, Type: colTypeBool, Nullable: true},
			{Name: "initdeferred", ID: 10, Type: colTypeBool, Nullable: true},
			{Name: "nargs", ID: 11, Type: colTypeInt8, Nullable: true},
			{Name: "args", ID: 12, Type: colTypeStringArray, Nullable: true},
			{Name: "whenexpr", ID: 13, Type: colTypeBytes, Nullable: true},
			{Name: "hintFunc", ID: 14, Type: colTypeBool, Nullable: true}, // 标记该触发器绑定的存储过程是否为构建触发器时隐式创建的存储过程
		},
		NextColumnID: 15,
		Families: []ColumnFamilyDescriptor{
			{
				Name: "fam_trigger",
				ID:   0,
				ColumnNames: []string{
					"relid",
					"name",
					"funcid",
					"type",
					"enable",
					"isconstraint",
					"constrname",
					"constrrelid",
					"deferrable",
					"initdeferred",
					"nargs",
					"args",
					"whenexpr",
					"hintFunc",
				},
				ColumnIDs: []ColumnID{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14},
			},
		},
		NextFamilyID: 1,
		PrimaryIndex: IndexDescriptor{
			Name:             "primary",
			ID:               1,
			Unique:           true,
			ColumnNames:      []string{"relid", "name"},
			ColumnDirections: []IndexDescriptor_Direction{IndexDescriptor_ASC, IndexDescriptor_ASC},
			ColumnIDs:        []ColumnID{1, 2},
		},
		NextIndexID:    2,
		Privileges:     NewCustomSuperuserPrivilegeDescriptor(SystemAllowedPrivileges[keys.TriggersTableID], security.NodeUser),
		FormatVersion:  InterleavedFormatVersion,
		NextMutationID: 1,
	}

	// HintsTable is the descriptor for the hints table.
	HintsTable = TableDescriptor{
		Name:     "hints",
		ID:       keys.HintTableID,
		ParentID: keys.SystemDatabaseID,
		Version:  1,
		Columns: []ColumnDescriptor{
			{Name: "origin_sql", ID: 1, Type: colTypeString, ParentID: keys.HintTableID, Nullable: false},
			{Name: "bind_sql", ID: 2, Type: colTypeString, ParentID: keys.HintTableID, Nullable: false},
			{Name: "default_db", ID: 3, Type: colTypeString, ParentID: keys.HintTableID, Nullable: false},
			{Name: "status", ID: 4, Type: colTypeString, ParentID: keys.HintTableID, Nullable: false},
			{Name: "create_time", ID: 5, Type: colTypeTimestamp, ParentID: keys.HintTableID, Nullable: false},
			{Name: "update_time", ID: 6, Type: colTypeTimestamp, ParentID: keys.HintTableID, Nullable: false},
			{Name: "source", ID: 7, Type: colTypeString, ParentID: keys.HintTableID, Nullable: true},
		},
		NextColumnID: 8,
		Families: []ColumnFamilyDescriptor{
			{
				Name: "hints",
				ID:   0,
				ColumnNames: []string{
					"origin_sql",
					"bind_sql",
					"default_db",
					"status",
					"create_time",
					"update_time",
					"source",
				},
				ColumnIDs: []ColumnID{1, 2, 3, 4, 5, 6, 7},
			},
		},
		NextFamilyID: 1,
		PrimaryIndex: IndexDescriptor{
			Name:             "primary",
			ID:               1,
			Unique:           true,
			ColumnNames:      []string{"origin_sql", "bind_sql"},
			ColumnDirections: []IndexDescriptor_Direction{IndexDescriptor_ASC, IndexDescriptor_ASC},
			ColumnIDs:        []ColumnID{1, 2},
		},
		NextIndexID:    2,
		Privileges:     NewCustomSuperuserPrivilegeDescriptor(SystemAllowedPrivileges[keys.HintTableID], security.NodeUser),
		FormatVersion:  InterleavedFormatVersion,
		NextMutationID: 1,
	}

	// ScheduledJobsTable is the descriptor for the scheduled jobs table.
	ScheduledJobsTable = TableDescriptor{
		Name:     "scheduled_jobs",
		ID:       keys.ScheduledJobsTableID,
		ParentID: keys.SystemDatabaseID,
		//UnexposedParentSchemaID: keys.PublicSchemaID,
		Version: 1,
		Columns: []ColumnDescriptor{
			{Name: "schedule_id", ID: 1, Type: colTypeInt8, DefaultExpr: &uniqueRowIDString, Nullable: false},
			{Name: "schedule_name", ID: 2, Type: colTypeString, Nullable: false},
			{Name: "created", ID: 3, Type: colTypeTimestampTZ, DefaultExpr: &nowString, Nullable: false},
			{Name: "owner", ID: 4, Type: colTypeString, Nullable: true},
			{Name: "next_run", ID: 5, Type: colTypeTimestampTZ, Nullable: true},
			{Name: "schedule_expr", ID: 6, Type: colTypeString, Nullable: true},
			{Name: "schedule_details", ID: 7, Type: colTypeBytes, Nullable: true},
			{Name: "executor_type", ID: 8, Type: colTypeString, Nullable: false},
			{Name: "execution_args", ID: 9, Type: colTypeBytes, Nullable: false},
			{Name: "schedule_changes", ID: 10, Type: colTypeBytes, Nullable: true},
			{Name: "default_database", ID: 11, Type: colTypeString, Nullable: true},
			{Name: "default_searchpath", ID: 12, Type: colTypeString, Nullable: true},
		},
		NextColumnID: 13,
		Families: []ColumnFamilyDescriptor{
			{
				Name:            "sched",
				ID:              0,
				ColumnNames:     []string{"schedule_id", "next_run"},
				ColumnIDs:       []ColumnID{1, 5},
				DefaultColumnID: 5,
			},
			{
				Name: "other",
				ID:   1,
				ColumnNames: []string{"schedule_name", "created", "owner", "schedule_expr", "schedule_details",
					"executor_type", "execution_args", "schedule_changes", "default_database", "default_searchpath"},
				ColumnIDs: []ColumnID{2, 3, 4, 6, 7, 8, 9, 10, 11, 12},
			},
		},
		NextFamilyID: 2,
		PrimaryIndex: pk("schedule_id"),
		Indexes: []IndexDescriptor{
			{
				Name:             "next_run_idx",
				ID:               2,
				Unique:           false,
				ColumnNames:      []string{"next_run"},
				ColumnDirections: []IndexDescriptor_Direction{IndexDescriptor_ASC},
				ColumnIDs:        []ColumnID{5},
				ExtraColumnIDs:   []ColumnID{1},
				//Version:          SecondaryIndexFamilyFormatVersion,
			},
		},
		NextIndexID:    3,
		Privileges:     NewCustomSuperuserPrivilegeDescriptor(SystemAllowedPrivileges[keys.ScheduledJobsTableID], security.NodeUser),
		FormatVersion:  InterleavedFormatVersion,
		NextMutationID: 1,
	}
)

// Create a kv pair for the zone config for the given key and config value.
func createZoneConfigKV(keyID int, zoneConfig *config.ZoneConfig) roachpb.KeyValue {
	value := roachpb.Value{}
	if err := value.SetProto(zoneConfig); err != nil {
		panic(fmt.Sprintf("could not marshal ZoneConfig for ID: %d: %s", keyID, err))
	}
	return roachpb.KeyValue{
		Key:   config.MakeZoneKey(uint32(keyID)),
		Value: value,
	}
}

// addSystemDescriptorsToSchema populates the supplied MetadataSchema
// with the system database and table descriptors. The descriptors for
// these objects exist statically in this file, but a MetadataSchema
// can be used to persist these descriptors to the znbase store.
func addSystemDescriptorsToSchema(target *MetadataSchema) {
	// Add system database.
	target.AddDescriptor(keys.RootNamespaceID, &SystemDB)

	// Add system config tables.
	target.AddDescriptor(keys.SystemDatabaseID, &NamespaceTable)
	target.AddDescriptor(keys.SystemDatabaseID, &FunctionNamespaceTable)
	target.AddDescriptor(keys.SystemDatabaseID, &DescriptorTable)
	target.AddDescriptor(keys.SystemDatabaseID, &UsersTable)
	target.AddDescriptor(keys.SystemDatabaseID, &ZonesTable)
	target.AddDescriptor(keys.SystemDatabaseID, &LocationTable)

	// Add all the other system tables.
	target.AddDescriptor(keys.SystemDatabaseID, &LeaseTable)
	target.AddDescriptor(keys.SystemDatabaseID, &EventLogTable)
	target.AddDescriptor(keys.SystemDatabaseID, &RangeEventTable)
	target.AddDescriptor(keys.SystemDatabaseID, &UITable)
	target.AddDescriptor(keys.SystemDatabaseID, &JobsTable)
	target.AddDescriptor(keys.SystemDatabaseID, &SettingsTable)
	target.AddDescriptor(keys.SystemDatabaseID, &WebSessionsTable)
	target.AddDescriptor(keys.SystemDatabaseID, &AuthenticationTable)
	target.AddDescriptor(keys.SystemDatabaseID, &UserOptionsTable)
	target.AddDescriptor(keys.SystemDatabaseID, &TriggersTable)
	target.AddDescriptor(keys.SystemDatabaseID, &HintsTable)

	// Tables introduced in 2.0, added here for 2.1.
	target.AddDescriptor(keys.SystemDatabaseID, &TableStatisticsTable)
	target.AddDescriptor(keys.SystemDatabaseID, &LocationsTable)
	target.AddDescriptor(keys.SystemDatabaseID, &RoleMembersTable)

	// The CommentsTable has been introduced in 2.2. It was added here since it
	// was introduced, but it's also created as a migration for older clusters.
	target.AddDescriptor(keys.SystemDatabaseID, &CommentsTable)

	//SnapshotsTable, introduced in inspur
	target.AddDescriptor(keys.SystemDatabaseID, &SnapshotsTable)

	// Tables introduced in inspur
	target.AddDescriptor(keys.SystemDatabaseID, &ScheduledJobsTable)

	target.AddDescriptor(keys.SystemDatabaseID, &FlashbackTable)
}

// addSystemDatabaseToSchema populates the supplied MetadataSchema with the
// System database, its tables and zone configurations.
func addSystemDatabaseToSchema(target *MetadataSchema) {
	addSystemDescriptorsToSchema(target)

	target.AddSplitIDs(keys.PseudoTableIDs...)

	// Adding a new system table? It should be added here to the metadata schema,
	// and also created as a migration for older cluster. The includedInBootstrap
	// field should be set on the migration.

	// Default zone config entry.
	zoneConf := config.DefaultZoneConfig()
	target.otherKV = append(target.otherKV, createZoneConfigKV(keys.RootNamespaceID, &zoneConf))

	systemZoneConf := config.DefaultSystemZoneConfig()
	metaRangeZoneConf := config.DefaultSystemZoneConfig()
	jobsZoneConf := config.DefaultSystemZoneConfig()
	livenessZoneConf := config.DefaultSystemZoneConfig()

	// .meta zone config entry with a shorter GC time.
	metaRangeZoneConf.GC.TTLSeconds = 60 * 60 // 1h
	target.otherKV = append(target.otherKV, createZoneConfigKV(keys.MetaRangesID, &metaRangeZoneConf))

	// Jobs zone config entry with a shorter GC time.
	jobsZoneConf.GC.TTLSeconds = 10 * 60 // 10m
	target.otherKV = append(target.otherKV, createZoneConfigKV(keys.JobsTableID, &jobsZoneConf))

	// Liveness zone config entry with a shorter GC time.
	livenessZoneConf.GC.TTLSeconds = 10 * 60 // 10m
	target.otherKV = append(target.otherKV, createZoneConfigKV(keys.LivenessRangesID, &livenessZoneConf))
	target.otherKV = append(target.otherKV, createZoneConfigKV(keys.SystemRangesID, &systemZoneConf))
	target.otherKV = append(target.otherKV, createZoneConfigKV(keys.SystemDatabaseID, &systemZoneConf))
}

// IsSystemConfigID returns whether this ID is for a system config object.
func IsSystemConfigID(id ID) bool {
	return id > 0 && id <= keys.MaxSystemConfigDescID
}

// IsReservedID returns whether this ID is for any system object.
func IsReservedID(id ID) bool {
	return id > 0 && id <= keys.MaxReservedDescID
}

// NewCustomSuperuserAndPublicPrivilegeDescriptor returns a privilege descriptor for comment table
func NewCustomSuperuserAndPublicPrivilegeDescriptor(
	priv privilege.List, owner string,
) *PrivilegeDescriptor {
	return &PrivilegeDescriptor{
		Owner: owner,
		Users: []UserPrivileges{
			{
				User:       AdminRole,
				Privileges: NewPrivileges(AdminRole, priv, true),
			},
			{
				User:       PublicRole,
				Privileges: NewPrivileges(AdminRole, priv, true),
			},
			{
				User:       security.RootUser,
				Privileges: NewPrivileges(AdminRole, priv, true),
			},
		},
	}
}
