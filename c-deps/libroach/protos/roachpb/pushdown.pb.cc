// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: roachpb/pushdown.proto

#include "roachpb/pushdown.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_roachpb_2fpushdown_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fpushdown_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AggregatorPush_Aggregation;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fpushdown_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BaseFilter;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fpushdown_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AggregatorPush;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fpushdown_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FilterUnion;
}  // namespace protobuf_roachpb_2fpushdown_2eproto
namespace znbase {
namespace roachpb {
class ColumnMetaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ColumnMeta>
      _instance;
} _ColumnMeta_default_instance_;
class BaseFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BaseFilter>
      _instance;
} _BaseFilter_default_instance_;
class LogicalFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogicalFilter>
      _instance;
} _LogicalFilter_default_instance_;
class FilterUnionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FilterUnion>
      _instance;
  const ::znbase::roachpb::BaseFilter* base_;
  const ::znbase::roachpb::LogicalFilter* logical_;
  ::google::protobuf::internal::ArenaStringPtr expression_;
} _FilterUnion_default_instance_;
class AggregatorPush_AggregationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AggregatorPush_Aggregation>
      _instance;
} _AggregatorPush_Aggregation_default_instance_;
class AggregatorPushDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AggregatorPush>
      _instance;
} _AggregatorPush_default_instance_;
class PushDownExprDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PushDownExpr>
      _instance;
} _PushDownExpr_default_instance_;
}  // namespace roachpb
}  // namespace znbase
namespace protobuf_roachpb_2fpushdown_2eproto {
static void InitDefaultsColumnMeta() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_ColumnMeta_default_instance_;
    new (ptr) ::znbase::roachpb::ColumnMeta();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::ColumnMeta::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ColumnMeta =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsColumnMeta}, {}};

static void InitDefaultsBaseFilter() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_BaseFilter_default_instance_;
    new (ptr) ::znbase::roachpb::BaseFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::BaseFilter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BaseFilter =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBaseFilter}, {}};

static void InitDefaultsFilterUnion() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_LogicalFilter_default_instance_;
    new (ptr) ::znbase::roachpb::LogicalFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::znbase::roachpb::_FilterUnion_default_instance_;
    new (ptr) ::znbase::roachpb::FilterUnion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::LogicalFilter::InitAsDefaultInstance();
  ::znbase::roachpb::FilterUnion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FilterUnion =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFilterUnion}, {
      &protobuf_roachpb_2fpushdown_2eproto::scc_info_BaseFilter.base,}};

static void InitDefaultsAggregatorPush_Aggregation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_AggregatorPush_Aggregation_default_instance_;
    new (ptr) ::znbase::roachpb::AggregatorPush_Aggregation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::AggregatorPush_Aggregation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AggregatorPush_Aggregation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAggregatorPush_Aggregation}, {}};

static void InitDefaultsAggregatorPush() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_AggregatorPush_default_instance_;
    new (ptr) ::znbase::roachpb::AggregatorPush();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::AggregatorPush::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AggregatorPush =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAggregatorPush}, {
      &protobuf_roachpb_2fpushdown_2eproto::scc_info_AggregatorPush_Aggregation.base,}};

static void InitDefaultsPushDownExpr() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_PushDownExpr_default_instance_;
    new (ptr) ::znbase::roachpb::PushDownExpr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::PushDownExpr::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PushDownExpr =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPushDownExpr}, {
      &protobuf_roachpb_2fpushdown_2eproto::scc_info_FilterUnion.base,
      &protobuf_roachpb_2fpushdown_2eproto::scc_info_AggregatorPush.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ColumnMeta.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BaseFilter.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FilterUnion.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AggregatorPush_Aggregation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AggregatorPush.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PushDownExpr.base);
}

}  // namespace protobuf_roachpb_2fpushdown_2eproto
namespace znbase {
namespace roachpb {
bool ColumnMeta_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 200:
    case 201:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ColumnMeta_Type ColumnMeta::BOOL;
const ColumnMeta_Type ColumnMeta::INT;
const ColumnMeta_Type ColumnMeta::FLOAT;
const ColumnMeta_Type ColumnMeta::DECIMAL;
const ColumnMeta_Type ColumnMeta::DATE;
const ColumnMeta_Type ColumnMeta::TIMESTAMP;
const ColumnMeta_Type ColumnMeta::INTERVAL;
const ColumnMeta_Type ColumnMeta::STRING;
const ColumnMeta_Type ColumnMeta::BYTES;
const ColumnMeta_Type ColumnMeta::TIMESTAMPTZ;
const ColumnMeta_Type ColumnMeta::COLLATEDSTRING;
const ColumnMeta_Type ColumnMeta::NAME;
const ColumnMeta_Type ColumnMeta::OID;
const ColumnMeta_Type ColumnMeta::NULL_T;
const ColumnMeta_Type ColumnMeta::UUID;
const ColumnMeta_Type ColumnMeta::ARRAY;
const ColumnMeta_Type ColumnMeta::INET;
const ColumnMeta_Type ColumnMeta::TIME;
const ColumnMeta_Type ColumnMeta::JSONB;
const ColumnMeta_Type ColumnMeta::TIMETZ;
const ColumnMeta_Type ColumnMeta::TUPLE;
const ColumnMeta_Type ColumnMeta::BIT;
const ColumnMeta_Type ColumnMeta::INT2VECTOR;
const ColumnMeta_Type ColumnMeta::OIDVECTOR;
const ColumnMeta_Type ColumnMeta::Type_MIN;
const ColumnMeta_Type ColumnMeta::Type_MAX;
const int ColumnMeta::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool AggregatorPush_Func_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AggregatorPush_Func AggregatorPush::ANY_NOT_NULL;
const AggregatorPush_Func AggregatorPush::AVG;
const AggregatorPush_Func AggregatorPush::BOOL_AND;
const AggregatorPush_Func AggregatorPush::BOOL_OR;
const AggregatorPush_Func AggregatorPush::CONCAT_AGG;
const AggregatorPush_Func AggregatorPush::COUNT;
const AggregatorPush_Func AggregatorPush::MAX;
const AggregatorPush_Func AggregatorPush::MIN;
const AggregatorPush_Func AggregatorPush::STDDEV;
const AggregatorPush_Func AggregatorPush::SUM;
const AggregatorPush_Func AggregatorPush::SUM_INT;
const AggregatorPush_Func AggregatorPush::VARIANCE;
const AggregatorPush_Func AggregatorPush::XOR_AGG;
const AggregatorPush_Func AggregatorPush::COUNT_ROWS;
const AggregatorPush_Func AggregatorPush::SQRDIFF;
const AggregatorPush_Func AggregatorPush::FINAL_VARIANCE;
const AggregatorPush_Func AggregatorPush::FINAL_STDDEV;
const AggregatorPush_Func AggregatorPush::ARRAY_AGG;
const AggregatorPush_Func AggregatorPush::JSON_AGG;
const AggregatorPush_Func AggregatorPush::JSONB_AGG;
const AggregatorPush_Func AggregatorPush::STRING_AGG;
const AggregatorPush_Func AggregatorPush::MEDIAN;
const AggregatorPush_Func AggregatorPush::GROUP_CONCAT;
const AggregatorPush_Func AggregatorPush::LISTAGG;
const AggregatorPush_Func AggregatorPush::COUNT_PD;
const AggregatorPush_Func AggregatorPush::Func_MIN;
const AggregatorPush_Func AggregatorPush::Func_MAX;
const int AggregatorPush::Func_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool AggregatorPush_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AggregatorPush_Type AggregatorPush::AUTO;
const AggregatorPush_Type AggregatorPush::SCALAR;
const AggregatorPush_Type AggregatorPush::NON_SCALAR;
const AggregatorPush_Type AggregatorPush::Type_MIN;
const AggregatorPush_Type AggregatorPush::Type_MAX;
const int AggregatorPush::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool FilterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 20:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ColumnMeta::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ColumnMeta::ColumnMeta()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fpushdown_2eproto::scc_info_ColumnMeta.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.ColumnMeta)
}
ColumnMeta::ColumnMeta(const ColumnMeta& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.ColumnMeta)
}

void ColumnMeta::SharedCtor() {
}

ColumnMeta::~ColumnMeta() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.ColumnMeta)
  SharedDtor();
}

void ColumnMeta::SharedDtor() {
}

void ColumnMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ColumnMeta& ColumnMeta::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fpushdown_2eproto::scc_info_ColumnMeta.base);
  return *internal_default_instance();
}


void ColumnMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.ColumnMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ColumnMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.ColumnMeta)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.ColumnMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.ColumnMeta)
  return false;
#undef DO_
}

void ColumnMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.ColumnMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.ColumnMeta)
}

size_t ColumnMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.ColumnMeta)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColumnMeta::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ColumnMeta*>(&from));
}

void ColumnMeta::MergeFrom(const ColumnMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.ColumnMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ColumnMeta::CopyFrom(const ColumnMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.ColumnMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnMeta::IsInitialized() const {
  return true;
}

void ColumnMeta::Swap(ColumnMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ColumnMeta::InternalSwap(ColumnMeta* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ColumnMeta::GetTypeName() const {
  return "znbase.roachpb.ColumnMeta";
}


// ===================================================================

void BaseFilter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BaseFilter::kAttributeFieldNumber;
const int BaseFilter::kValueFieldNumber;
const int BaseFilter::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BaseFilter::BaseFilter()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fpushdown_2eproto::scc_info_BaseFilter.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.BaseFilter)
}
BaseFilter::BaseFilter(const BaseFilter& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attribute_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_attribute()) {
    attribute_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attribute_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.BaseFilter)
}

void BaseFilter::SharedCtor() {
  attribute_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BaseFilter::~BaseFilter() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.BaseFilter)
  SharedDtor();
}

void BaseFilter::SharedDtor() {
  attribute_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BaseFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BaseFilter& BaseFilter::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fpushdown_2eproto::scc_info_BaseFilter.base);
  return *internal_default_instance();
}


void BaseFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.BaseFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      attribute_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BaseFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.BaseFilter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attribute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.BaseFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.BaseFilter)
  return false;
#undef DO_
}

void BaseFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.BaseFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->attribute(), output);
  }

  // optional string value = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  for (int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->values(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.BaseFilter)
}

size_t BaseFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.BaseFilter)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (has_attribute()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->attribute());
  }
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->values_size());
  for (int i = 0, n = this->values_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->values(i));
  }

  // optional string value = 3;
  if (has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BaseFilter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BaseFilter*>(&from));
}

void BaseFilter::MergeFrom(const BaseFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.BaseFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_attribute();
      attribute_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attribute_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void BaseFilter::CopyFrom(const BaseFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.BaseFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseFilter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void BaseFilter::Swap(BaseFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BaseFilter::InternalSwap(BaseFilter* other) {
  using std::swap;
  values_.InternalSwap(CastToBase(&other->values_));
  attribute_.Swap(&other->attribute_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BaseFilter::GetTypeName() const {
  return "znbase.roachpb.BaseFilter";
}


// ===================================================================

void LogicalFilter::InitAsDefaultInstance() {
  ::znbase::roachpb::_LogicalFilter_default_instance_._instance.get_mutable()->left_ = const_cast< ::znbase::roachpb::FilterUnion*>(
      ::znbase::roachpb::FilterUnion::internal_default_instance());
  ::znbase::roachpb::_LogicalFilter_default_instance_._instance.get_mutable()->right_ = const_cast< ::znbase::roachpb::FilterUnion*>(
      ::znbase::roachpb::FilterUnion::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogicalFilter::kLeftFieldNumber;
const int LogicalFilter::kRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogicalFilter::LogicalFilter()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fpushdown_2eproto::scc_info_FilterUnion.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.LogicalFilter)
}
LogicalFilter::LogicalFilter(const LogicalFilter& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_left()) {
    left_ = new ::znbase::roachpb::FilterUnion(*from.left_);
  } else {
    left_ = NULL;
  }
  if (from.has_right()) {
    right_ = new ::znbase::roachpb::FilterUnion(*from.right_);
  } else {
    right_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.LogicalFilter)
}

void LogicalFilter::SharedCtor() {
  ::memset(&left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_) -
      reinterpret_cast<char*>(&left_)) + sizeof(right_));
}

LogicalFilter::~LogicalFilter() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.LogicalFilter)
  SharedDtor();
}

void LogicalFilter::SharedDtor() {
  if (this != internal_default_instance()) delete left_;
  if (this != internal_default_instance()) delete right_;
}

void LogicalFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogicalFilter& LogicalFilter::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fpushdown_2eproto::scc_info_FilterUnion.base);
  return *internal_default_instance();
}


void LogicalFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.LogicalFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(left_ != NULL);
      left_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(right_ != NULL);
      right_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LogicalFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.LogicalFilter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_left()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .znbase.roachpb.FilterUnion right = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_right()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.LogicalFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.LogicalFilter)
  return false;
#undef DO_
}

void LogicalFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.LogicalFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_left(), output);
  }

  // optional .znbase.roachpb.FilterUnion right = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_right(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.LogicalFilter)
}

size_t LogicalFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.LogicalFilter)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (has_left()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *left_);
  }
  // optional .znbase.roachpb.FilterUnion right = 3;
  if (has_right()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *right_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogicalFilter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LogicalFilter*>(&from));
}

void LogicalFilter::MergeFrom(const LogicalFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.LogicalFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_left()->::znbase::roachpb::FilterUnion::MergeFrom(from.left());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_right()->::znbase::roachpb::FilterUnion::MergeFrom(from.right());
    }
  }
}

void LogicalFilter::CopyFrom(const LogicalFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.LogicalFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalFilter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_left()) {
    if (!this->left_->IsInitialized()) return false;
  }
  if (has_right()) {
    if (!this->right_->IsInitialized()) return false;
  }
  return true;
}

void LogicalFilter::Swap(LogicalFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogicalFilter::InternalSwap(LogicalFilter* other) {
  using std::swap;
  swap(left_, other->left_);
  swap(right_, other->right_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string LogicalFilter::GetTypeName() const {
  return "znbase.roachpb.LogicalFilter";
}


// ===================================================================

void FilterUnion::InitAsDefaultInstance() {
}
void FilterUnion::set_allocated_base(::znbase::roachpb::BaseFilter* base) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (base) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      base = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    set_has_base();
    value_.base_ = base;
  }
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.FilterUnion.base)
}
void FilterUnion::set_allocated_logical(::znbase::roachpb::LogicalFilter* logical) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (logical) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      logical = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, logical, submessage_arena);
    }
    set_has_logical();
    value_.logical_ = logical;
  }
  // @@protoc_insertion_point(field_set_allocated:znbase.roachpb.FilterUnion.logical)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FilterUnion::kTypeFieldNumber;
const int FilterUnion::kBaseFieldNumber;
const int FilterUnion::kLogicalFieldNumber;
const int FilterUnion::kExpressionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FilterUnion::FilterUnion()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fpushdown_2eproto::scc_info_FilterUnion.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.FilterUnion)
}
FilterUnion::FilterUnion(const FilterUnion& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  clear_has_value();
  switch (from.value_case()) {
    case kBase: {
      mutable_base()->::znbase::roachpb::BaseFilter::MergeFrom(from.base());
      break;
    }
    case kLogical: {
      mutable_logical()->::znbase::roachpb::LogicalFilter::MergeFrom(from.logical());
      break;
    }
    case kExpression: {
      set_expression(from.expression());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.FilterUnion)
}

void FilterUnion::SharedCtor() {
  type_ = 0;
  clear_has_value();
}

FilterUnion::~FilterUnion() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.FilterUnion)
  SharedDtor();
}

void FilterUnion::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void FilterUnion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FilterUnion& FilterUnion::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fpushdown_2eproto::scc_info_FilterUnion.base);
  return *internal_default_instance();
}


void FilterUnion::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:znbase.roachpb.FilterUnion)
  switch (value_case()) {
    case kBase: {
      delete value_.base_;
      break;
    }
    case kLogical: {
      delete value_.logical_;
      break;
    }
    case kExpression: {
      value_.expression_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void FilterUnion::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.FilterUnion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  clear_value();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FilterUnion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.FilterUnion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::znbase::roachpb::FilterType_IsValid(value)) {
            set_type(static_cast< ::znbase::roachpb::FilterType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .znbase.roachpb.BaseFilter base = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .znbase.roachpb.LogicalFilter logical = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_logical()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string expression = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_expression()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.FilterUnion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.FilterUnion)
  return false;
#undef DO_
}

void FilterUnion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.FilterUnion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  switch (value_case()) {
    case kBase:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        2, this->_internal_base(), output);
      break;
    case kLogical:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        3, this->_internal_logical(), output);
      break;
    case kExpression:
      ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        4, this->expression(), output);
      break;
    default: ;
  }
  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.FilterUnion)
}

size_t FilterUnion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.FilterUnion)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  switch (value_case()) {
    // optional .znbase.roachpb.BaseFilter base = 2;
    case kBase: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.base_);
      break;
    }
    // optional .znbase.roachpb.LogicalFilter logical = 3;
    case kLogical: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.logical_);
      break;
    }
    // optional string expression = 4;
    case kExpression: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->expression());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilterUnion::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FilterUnion*>(&from));
}

void FilterUnion::MergeFrom(const FilterUnion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.FilterUnion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_type()) {
    set_type(from.type());
  }
  switch (from.value_case()) {
    case kBase: {
      mutable_base()->::znbase::roachpb::BaseFilter::MergeFrom(from.base());
      break;
    }
    case kLogical: {
      mutable_logical()->::znbase::roachpb::LogicalFilter::MergeFrom(from.logical());
      break;
    }
    case kExpression: {
      set_expression(from.expression());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void FilterUnion::CopyFrom(const FilterUnion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.FilterUnion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterUnion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  switch (value_case()) {
    case kBase: {
      if (has_base()) {
        if (!this->base().IsInitialized()) return false;
      }
      break;
    }
    case kLogical: {
      if (has_logical()) {
        if (!this->logical().IsInitialized()) return false;
      }
      break;
    }
    case kExpression: {
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return true;
}

void FilterUnion::Swap(FilterUnion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FilterUnion::InternalSwap(FilterUnion* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string FilterUnion::GetTypeName() const {
  return "znbase.roachpb.FilterUnion";
}


// ===================================================================

void AggregatorPush_Aggregation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AggregatorPush_Aggregation::kFuncFieldNumber;
const int AggregatorPush_Aggregation::kDistinctFieldNumber;
const int AggregatorPush_Aggregation::kColIdxFieldNumber;
const int AggregatorPush_Aggregation::kFilterColIdxFieldNumber;
const int AggregatorPush_Aggregation::kArgumentsFieldNumber;
const int AggregatorPush_Aggregation::kPushDownToStoreFieldNumber;
const int AggregatorPush_Aggregation::kResultTypeFieldNumber;
const int AggregatorPush_Aggregation::kRenderExprFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AggregatorPush_Aggregation::AggregatorPush_Aggregation()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fpushdown_2eproto::scc_info_AggregatorPush_Aggregation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.AggregatorPush.Aggregation)
}
AggregatorPush_Aggregation::AggregatorPush_Aggregation(const AggregatorPush_Aggregation& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      col_idx_(from.col_idx_),
      arguments_(from.arguments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  render_expr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_render_expr()) {
    render_expr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.render_expr_);
  }
  ::memcpy(&func_, &from.func_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_type_) -
    reinterpret_cast<char*>(&func_)) + sizeof(result_type_));
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.AggregatorPush.Aggregation)
}

void AggregatorPush_Aggregation::SharedCtor() {
  render_expr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&func_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_type_) -
      reinterpret_cast<char*>(&func_)) + sizeof(result_type_));
}

AggregatorPush_Aggregation::~AggregatorPush_Aggregation() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.AggregatorPush.Aggregation)
  SharedDtor();
}

void AggregatorPush_Aggregation::SharedDtor() {
  render_expr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AggregatorPush_Aggregation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AggregatorPush_Aggregation& AggregatorPush_Aggregation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fpushdown_2eproto::scc_info_AggregatorPush_Aggregation.base);
  return *internal_default_instance();
}


void AggregatorPush_Aggregation::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.AggregatorPush.Aggregation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  col_idx_.Clear();
  arguments_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    render_expr_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 62u) {
    ::memset(&func_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_type_) -
        reinterpret_cast<char*>(&func_)) + sizeof(result_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AggregatorPush_Aggregation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.AggregatorPush.Aggregation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::znbase::roachpb::AggregatorPush_Func_IsValid(value)) {
            set_func(static_cast< ::znbase::roachpb::AggregatorPush_Func >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_distinct();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &distinct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 filter_col_idx = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_filter_col_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_col_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 col_idx = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_col_idx())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_col_idx())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string arguments = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_arguments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool push_down_to_store = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_push_down_to_store();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &push_down_to_store_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .znbase.roachpb.ColumnMeta.Type result_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::znbase::roachpb::ColumnMeta_Type_IsValid(value)) {
            set_result_type(static_cast< ::znbase::roachpb::ColumnMeta_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(64u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string render_expr = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_render_expr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.AggregatorPush.Aggregation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.AggregatorPush.Aggregation)
  return false;
#undef DO_
}

void AggregatorPush_Aggregation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.AggregatorPush.Aggregation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->func(), output);
  }

  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->distinct(), output);
  }

  // optional uint32 filter_col_idx = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->filter_col_idx(), output);
  }

  // repeated uint32 col_idx = 5;
  for (int i = 0, n = this->col_idx_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->col_idx(i), output);
  }

  // repeated string arguments = 6;
  for (int i = 0, n = this->arguments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->arguments(i), output);
  }

  // required bool push_down_to_store = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->push_down_to_store(), output);
  }

  // required .znbase.roachpb.ColumnMeta.Type result_type = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->result_type(), output);
  }

  // optional string render_expr = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->render_expr(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.AggregatorPush.Aggregation)
}

size_t AggregatorPush_Aggregation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:znbase.roachpb.AggregatorPush.Aggregation)
  size_t total_size = 0;

  if (has_push_down_to_store()) {
    // required bool push_down_to_store = 7;
    total_size += 1 + 1;
  }

  if (has_result_type()) {
    // required .znbase.roachpb.ColumnMeta.Type result_type = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_type());
  }

  return total_size;
}
size_t AggregatorPush_Aggregation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.AggregatorPush.Aggregation)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000030) ^ 0x00000030) == 0) {  // All required fields are present.
    // required bool push_down_to_store = 7;
    total_size += 1 + 1;

    // required .znbase.roachpb.ColumnMeta.Type result_type = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint32 col_idx = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->col_idx_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->col_idx_size());
    total_size += data_size;
  }

  // repeated string arguments = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->arguments_size());
  for (int i = 0, n = this->arguments_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->arguments(i));
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string render_expr = 9;
    if (has_render_expr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->render_expr());
    }

    if (has_func()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->func());
    }

    // optional uint32 filter_col_idx = 4;
    if (has_filter_col_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_col_idx());
    }

    if (has_distinct()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AggregatorPush_Aggregation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AggregatorPush_Aggregation*>(&from));
}

void AggregatorPush_Aggregation::MergeFrom(const AggregatorPush_Aggregation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.AggregatorPush.Aggregation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  col_idx_.MergeFrom(from.col_idx_);
  arguments_.MergeFrom(from.arguments_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_render_expr();
      render_expr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.render_expr_);
    }
    if (cached_has_bits & 0x00000002u) {
      func_ = from.func_;
    }
    if (cached_has_bits & 0x00000004u) {
      filter_col_idx_ = from.filter_col_idx_;
    }
    if (cached_has_bits & 0x00000008u) {
      distinct_ = from.distinct_;
    }
    if (cached_has_bits & 0x00000010u) {
      push_down_to_store_ = from.push_down_to_store_;
    }
    if (cached_has_bits & 0x00000020u) {
      result_type_ = from.result_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AggregatorPush_Aggregation::CopyFrom(const AggregatorPush_Aggregation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.AggregatorPush.Aggregation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregatorPush_Aggregation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000030) != 0x00000030) return false;
  return true;
}

void AggregatorPush_Aggregation::Swap(AggregatorPush_Aggregation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AggregatorPush_Aggregation::InternalSwap(AggregatorPush_Aggregation* other) {
  using std::swap;
  col_idx_.InternalSwap(&other->col_idx_);
  arguments_.InternalSwap(CastToBase(&other->arguments_));
  render_expr_.Swap(&other->render_expr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(func_, other->func_);
  swap(filter_col_idx_, other->filter_col_idx_);
  swap(distinct_, other->distinct_);
  swap(push_down_to_store_, other->push_down_to_store_);
  swap(result_type_, other->result_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AggregatorPush_Aggregation::GetTypeName() const {
  return "znbase.roachpb.AggregatorPush.Aggregation";
}


// ===================================================================

void AggregatorPush::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AggregatorPush::kTypeFieldNumber;
const int AggregatorPush::kGroupColsFieldNumber;
const int AggregatorPush::kAggregationsFieldNumber;
const int AggregatorPush::kOrderedGroupColsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AggregatorPush::AggregatorPush()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fpushdown_2eproto::scc_info_AggregatorPush.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.AggregatorPush)
}
AggregatorPush::AggregatorPush(const AggregatorPush& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      group_cols_(from.group_cols_),
      aggregations_(from.aggregations_),
      ordered_group_cols_(from.ordered_group_cols_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.AggregatorPush)
}

void AggregatorPush::SharedCtor() {
  type_ = 0;
}

AggregatorPush::~AggregatorPush() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.AggregatorPush)
  SharedDtor();
}

void AggregatorPush::SharedDtor() {
}

void AggregatorPush::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AggregatorPush& AggregatorPush::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fpushdown_2eproto::scc_info_AggregatorPush.base);
  return *internal_default_instance();
}


void AggregatorPush::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.AggregatorPush)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_cols_.Clear();
  aggregations_.Clear();
  ordered_group_cols_.Clear();
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AggregatorPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.AggregatorPush)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 group_cols = 2 [packed = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_group_cols())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_group_cols())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_aggregations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 ordered_group_cols = 4 [packed = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ordered_group_cols())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_ordered_group_cols())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::znbase::roachpb::AggregatorPush_Type_IsValid(value)) {
            set_type(static_cast< ::znbase::roachpb::AggregatorPush_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.AggregatorPush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.AggregatorPush)
  return false;
#undef DO_
}

void AggregatorPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.AggregatorPush)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 group_cols = 2 [packed = true];
  if (this->group_cols_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _group_cols_cached_byte_size_));
  }
  for (int i = 0, n = this->group_cols_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->group_cols(i), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->aggregations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3,
      this->aggregations(static_cast<int>(i)),
      output);
  }

  // repeated uint32 ordered_group_cols = 4 [packed = true];
  if (this->ordered_group_cols_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _ordered_group_cols_cached_byte_size_));
  }
  for (int i = 0, n = this->ordered_group_cols_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->ordered_group_cols(i), output);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.AggregatorPush)
}

size_t AggregatorPush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.AggregatorPush)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated uint32 group_cols = 2 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->group_cols_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _group_cols_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  {
    unsigned int count = static_cast<unsigned int>(this->aggregations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->aggregations(static_cast<int>(i)));
    }
  }

  // repeated uint32 ordered_group_cols = 4 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->ordered_group_cols_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ordered_group_cols_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AggregatorPush::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AggregatorPush*>(&from));
}

void AggregatorPush::MergeFrom(const AggregatorPush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.AggregatorPush)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  group_cols_.MergeFrom(from.group_cols_);
  aggregations_.MergeFrom(from.aggregations_);
  ordered_group_cols_.MergeFrom(from.ordered_group_cols_);
  if (from.has_type()) {
    set_type(from.type());
  }
}

void AggregatorPush::CopyFrom(const AggregatorPush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.AggregatorPush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregatorPush::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->aggregations())) return false;
  return true;
}

void AggregatorPush::Swap(AggregatorPush* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AggregatorPush::InternalSwap(AggregatorPush* other) {
  using std::swap;
  group_cols_.InternalSwap(&other->group_cols_);
  CastToBase(&aggregations_)->InternalSwap(CastToBase(&other->aggregations_));
  ordered_group_cols_.InternalSwap(&other->ordered_group_cols_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AggregatorPush::GetTypeName() const {
  return "znbase.roachpb.AggregatorPush";
}


// ===================================================================

void PushDownExpr::InitAsDefaultInstance() {
  ::znbase::roachpb::_PushDownExpr_default_instance_._instance.get_mutable()->aggregator_ = const_cast< ::znbase::roachpb::AggregatorPush*>(
      ::znbase::roachpb::AggregatorPush::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PushDownExpr::kColIdsFieldNumber;
const int PushDownExpr::kColTypesFieldNumber;
const int PushDownExpr::kPrimaryColsFieldNumber;
const int PushDownExpr::kPrimaryColsDirectFieldNumber;
const int PushDownExpr::kSecondaryColsFieldNumber;
const int PushDownExpr::kOrderbyColsFieldNumber;
const int PushDownExpr::kOrderDirectionsFieldNumber;
const int PushDownExpr::kRequiredColsFieldNumber;
const int PushDownExpr::kFiltersFieldNumber;
const int PushDownExpr::kAggregatorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PushDownExpr::PushDownExpr()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fpushdown_2eproto::scc_info_PushDownExpr.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.PushDownExpr)
}
PushDownExpr::PushDownExpr(const PushDownExpr& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      col_ids_(from.col_ids_),
      col_types_(from.col_types_),
      primary_cols_(from.primary_cols_),
      primary_cols_direct_(from.primary_cols_direct_),
      secondary_cols_(from.secondary_cols_),
      orderby_cols_(from.orderby_cols_),
      order_directions_(from.order_directions_),
      required_cols_(from.required_cols_),
      filters_(from.filters_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_aggregator()) {
    aggregator_ = new ::znbase::roachpb::AggregatorPush(*from.aggregator_);
  } else {
    aggregator_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.PushDownExpr)
}

void PushDownExpr::SharedCtor() {
  aggregator_ = NULL;
}

PushDownExpr::~PushDownExpr() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.PushDownExpr)
  SharedDtor();
}

void PushDownExpr::SharedDtor() {
  if (this != internal_default_instance()) delete aggregator_;
}

void PushDownExpr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PushDownExpr& PushDownExpr::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fpushdown_2eproto::scc_info_PushDownExpr.base);
  return *internal_default_instance();
}


void PushDownExpr::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.PushDownExpr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  col_ids_.Clear();
  col_types_.Clear();
  primary_cols_.Clear();
  primary_cols_direct_.Clear();
  secondary_cols_.Clear();
  orderby_cols_.Clear();
  order_directions_.Clear();
  required_cols_.Clear();
  filters_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(aggregator_ != NULL);
    aggregator_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PushDownExpr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.PushDownExpr)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 col_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_col_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_col_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .znbase.roachpb.ColumnMeta.Type col_types = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::znbase::roachpb::ColumnMeta_Type_IsValid(value)) {
            add_col_types(static_cast< ::znbase::roachpb::ColumnMeta_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumPreserveUnknowns(
                 input,
                 2,
                 ::znbase::roachpb::ColumnMeta_Type_IsValid,
                 &unknown_fields_stream,
                 this->mutable_col_types())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 primary_cols = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_primary_cols())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_primary_cols())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 primary_cols_direct = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_primary_cols_direct())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_primary_cols_direct())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 secondary_cols = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40u, input, this->mutable_secondary_cols())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_secondary_cols())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 orderby_cols = 6 [packed = true];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_orderby_cols())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50u, input, this->mutable_orderby_cols())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 order_directions = 7 [packed = true];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_order_directions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58u, input, this->mutable_order_directions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 required_cols = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64u, input, this->mutable_required_cols())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_required_cols())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .znbase.roachpb.FilterUnion filters = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_filters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .znbase.roachpb.AggregatorPush aggregator = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_aggregator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.PushDownExpr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.PushDownExpr)
  return false;
#undef DO_
}

void PushDownExpr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.PushDownExpr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 col_ids = 1;
  for (int i = 0, n = this->col_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->col_ids(i), output);
  }

  // repeated .znbase.roachpb.ColumnMeta.Type col_types = 2;
  for (int i = 0, n = this->col_types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->col_types(i), output);
  }

  // repeated int32 primary_cols = 3;
  for (int i = 0, n = this->primary_cols_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->primary_cols(i), output);
  }

  // repeated int32 primary_cols_direct = 4;
  for (int i = 0, n = this->primary_cols_direct_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->primary_cols_direct(i), output);
  }

  // repeated int32 secondary_cols = 5;
  for (int i = 0, n = this->secondary_cols_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->secondary_cols(i), output);
  }

  // repeated int32 orderby_cols = 6 [packed = true];
  if (this->orderby_cols_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _orderby_cols_cached_byte_size_));
  }
  for (int i = 0, n = this->orderby_cols_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->orderby_cols(i), output);
  }

  // repeated int32 order_directions = 7 [packed = true];
  if (this->order_directions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _order_directions_cached_byte_size_));
  }
  for (int i = 0, n = this->order_directions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->order_directions(i), output);
  }

  // repeated int32 required_cols = 8;
  for (int i = 0, n = this->required_cols_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->required_cols(i), output);
  }

  // repeated .znbase.roachpb.FilterUnion filters = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->filters_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9,
      this->filters(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .znbase.roachpb.AggregatorPush aggregator = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->_internal_aggregator(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.PushDownExpr)
}

size_t PushDownExpr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.PushDownExpr)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated int32 col_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->col_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->col_ids_size());
    total_size += data_size;
  }

  // repeated .znbase.roachpb.ColumnMeta.Type col_types = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->col_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->col_types(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated int32 primary_cols = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->primary_cols_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->primary_cols_size());
    total_size += data_size;
  }

  // repeated int32 primary_cols_direct = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->primary_cols_direct_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->primary_cols_direct_size());
    total_size += data_size;
  }

  // repeated int32 secondary_cols = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->secondary_cols_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->secondary_cols_size());
    total_size += data_size;
  }

  // repeated int32 orderby_cols = 6 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->orderby_cols_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _orderby_cols_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 order_directions = 7 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->order_directions_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _order_directions_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 required_cols = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->required_cols_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->required_cols_size());
    total_size += data_size;
  }

  // repeated .znbase.roachpb.FilterUnion filters = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->filters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->filters(static_cast<int>(i)));
    }
  }

  // optional .znbase.roachpb.AggregatorPush aggregator = 10;
  if (has_aggregator()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *aggregator_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PushDownExpr::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PushDownExpr*>(&from));
}

void PushDownExpr::MergeFrom(const PushDownExpr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.PushDownExpr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  col_ids_.MergeFrom(from.col_ids_);
  col_types_.MergeFrom(from.col_types_);
  primary_cols_.MergeFrom(from.primary_cols_);
  primary_cols_direct_.MergeFrom(from.primary_cols_direct_);
  secondary_cols_.MergeFrom(from.secondary_cols_);
  orderby_cols_.MergeFrom(from.orderby_cols_);
  order_directions_.MergeFrom(from.order_directions_);
  required_cols_.MergeFrom(from.required_cols_);
  filters_.MergeFrom(from.filters_);
  if (from.has_aggregator()) {
    mutable_aggregator()->::znbase::roachpb::AggregatorPush::MergeFrom(from.aggregator());
  }
}

void PushDownExpr::CopyFrom(const PushDownExpr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.PushDownExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushDownExpr::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->filters())) return false;
  if (has_aggregator()) {
    if (!this->aggregator_->IsInitialized()) return false;
  }
  return true;
}

void PushDownExpr::Swap(PushDownExpr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PushDownExpr::InternalSwap(PushDownExpr* other) {
  using std::swap;
  col_ids_.InternalSwap(&other->col_ids_);
  col_types_.InternalSwap(&other->col_types_);
  primary_cols_.InternalSwap(&other->primary_cols_);
  primary_cols_direct_.InternalSwap(&other->primary_cols_direct_);
  secondary_cols_.InternalSwap(&other->secondary_cols_);
  orderby_cols_.InternalSwap(&other->orderby_cols_);
  order_directions_.InternalSwap(&other->order_directions_);
  required_cols_.InternalSwap(&other->required_cols_);
  CastToBase(&filters_)->InternalSwap(CastToBase(&other->filters_));
  swap(aggregator_, other->aggregator_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string PushDownExpr::GetTypeName() const {
  return "znbase.roachpb.PushDownExpr";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace roachpb
}  // namespace znbase
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::ColumnMeta* Arena::CreateMaybeMessage< ::znbase::roachpb::ColumnMeta >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::ColumnMeta >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::BaseFilter* Arena::CreateMaybeMessage< ::znbase::roachpb::BaseFilter >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::BaseFilter >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::LogicalFilter* Arena::CreateMaybeMessage< ::znbase::roachpb::LogicalFilter >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::LogicalFilter >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::FilterUnion* Arena::CreateMaybeMessage< ::znbase::roachpb::FilterUnion >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::FilterUnion >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::AggregatorPush_Aggregation* Arena::CreateMaybeMessage< ::znbase::roachpb::AggregatorPush_Aggregation >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::AggregatorPush_Aggregation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::AggregatorPush* Arena::CreateMaybeMessage< ::znbase::roachpb::AggregatorPush >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::AggregatorPush >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::PushDownExpr* Arena::CreateMaybeMessage< ::znbase::roachpb::PushDownExpr >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::PushDownExpr >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
