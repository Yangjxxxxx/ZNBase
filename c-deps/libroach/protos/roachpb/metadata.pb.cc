// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: roachpb/metadata.proto

#include "roachpb/metadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_roachpb_2fmetadata_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fmetadata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Attributes;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fmetadata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LocationName;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fmetadata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LocationValue;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fmetadata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Percentiles;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fmetadata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReplicaDescriptor;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fmetadata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Tier;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fmetadata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Version;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fmetadata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Locality;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fmetadata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LocationMap_IndexSpaceEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fmetadata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LocationMap_PartitionSpace;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fmetadata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ReplicaIdent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fmetadata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StoreCapacity;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fmetadata_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_LocalityAddress;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_roachpb_2fmetadata_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_NodeDescriptor;
}  // namespace protobuf_roachpb_2fmetadata_2eproto
namespace protobuf_util_2funresolved_5faddr_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_util_2funresolved_5faddr_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UnresolvedAddr;
}  // namespace protobuf_util_2funresolved_5faddr_2eproto
namespace znbase {
namespace roachpb {
class AttributesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Attributes>
      _instance;
} _Attributes_default_instance_;
class ReplicationTargetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReplicationTarget>
      _instance;
} _ReplicationTarget_default_instance_;
class ReplicaDescriptorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReplicaDescriptor>
      _instance;
} _ReplicaDescriptor_default_instance_;
class ReplicaIdentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReplicaIdent>
      _instance;
} _ReplicaIdent_default_instance_;
class RangeDescriptorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RangeDescriptor>
      _instance;
} _RangeDescriptor_default_instance_;
class PercentilesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Percentiles>
      _instance;
} _Percentiles_default_instance_;
class StoreCapacityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StoreCapacity>
      _instance;
} _StoreCapacity_default_instance_;
class NodeDescriptorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeDescriptor>
      _instance;
} _NodeDescriptor_default_instance_;
class LocalityAddressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocalityAddress>
      _instance;
} _LocalityAddress_default_instance_;
class StoreDescriptorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StoreDescriptor>
      _instance;
} _StoreDescriptor_default_instance_;
class StoreDeadReplicasDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StoreDeadReplicas>
      _instance;
} _StoreDeadReplicas_default_instance_;
class LocalityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Locality>
      _instance;
} _Locality_default_instance_;
class TierDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Tier>
      _instance;
} _Tier_default_instance_;
class VersionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Version>
      _instance;
} _Version_default_instance_;
class LocationNameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocationName>
      _instance;
} _LocationName_default_instance_;
class LocationValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocationValue>
      _instance;
} _LocationValue_default_instance_;
class LocationMap_PartitionSpaceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocationMap_PartitionSpace>
      _instance;
} _LocationMap_PartitionSpace_default_instance_;
class LocationMap_IndexSpaceEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocationMap_IndexSpaceEntry_DoNotUse>
      _instance;
} _LocationMap_IndexSpaceEntry_DoNotUse_default_instance_;
class LocationMapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocationMap>
      _instance;
} _LocationMap_default_instance_;
}  // namespace roachpb
}  // namespace znbase
namespace protobuf_roachpb_2fmetadata_2eproto {
static void InitDefaultsAttributes() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_Attributes_default_instance_;
    new (ptr) ::znbase::roachpb::Attributes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::Attributes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Attributes =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAttributes}, {}};

static void InitDefaultsReplicationTarget() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_ReplicationTarget_default_instance_;
    new (ptr) ::znbase::roachpb::ReplicationTarget();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::ReplicationTarget::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReplicationTarget =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReplicationTarget}, {}};

static void InitDefaultsReplicaDescriptor() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_ReplicaDescriptor_default_instance_;
    new (ptr) ::znbase::roachpb::ReplicaDescriptor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::ReplicaDescriptor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReplicaDescriptor =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReplicaDescriptor}, {}};

static void InitDefaultsReplicaIdent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_ReplicaIdent_default_instance_;
    new (ptr) ::znbase::roachpb::ReplicaIdent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::ReplicaIdent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReplicaIdent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReplicaIdent}, {
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_ReplicaDescriptor.base,}};

static void InitDefaultsRangeDescriptor() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_RangeDescriptor_default_instance_;
    new (ptr) ::znbase::roachpb::RangeDescriptor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::RangeDescriptor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RangeDescriptor =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRangeDescriptor}, {
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_ReplicaDescriptor.base,}};

static void InitDefaultsPercentiles() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_Percentiles_default_instance_;
    new (ptr) ::znbase::roachpb::Percentiles();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::Percentiles::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Percentiles =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPercentiles}, {}};

static void InitDefaultsStoreCapacity() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_StoreCapacity_default_instance_;
    new (ptr) ::znbase::roachpb::StoreCapacity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::StoreCapacity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StoreCapacity =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStoreCapacity}, {
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_Percentiles.base,}};

static void InitDefaultsNodeDescriptor() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_NodeDescriptor_default_instance_;
    new (ptr) ::znbase::roachpb::NodeDescriptor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::NodeDescriptor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_NodeDescriptor =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsNodeDescriptor}, {
      &protobuf_util_2funresolved_5faddr_2eproto::scc_info_UnresolvedAddr.base,
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_Attributes.base,
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_Locality.base,
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_Version.base,
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_LocalityAddress.base,
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_LocationName.base,}};

static void InitDefaultsLocalityAddress() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_LocalityAddress_default_instance_;
    new (ptr) ::znbase::roachpb::LocalityAddress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::LocalityAddress::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LocalityAddress =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLocalityAddress}, {
      &protobuf_util_2funresolved_5faddr_2eproto::scc_info_UnresolvedAddr.base,
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_Tier.base,}};

static void InitDefaultsStoreDescriptor() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_StoreDescriptor_default_instance_;
    new (ptr) ::znbase::roachpb::StoreDescriptor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::StoreDescriptor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_StoreDescriptor =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsStoreDescriptor}, {
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_Attributes.base,
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_NodeDescriptor.base,
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_StoreCapacity.base,}};

static void InitDefaultsStoreDeadReplicas() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_StoreDeadReplicas_default_instance_;
    new (ptr) ::znbase::roachpb::StoreDeadReplicas();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::StoreDeadReplicas::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StoreDeadReplicas =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStoreDeadReplicas}, {
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_ReplicaIdent.base,}};

static void InitDefaultsLocality() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_Locality_default_instance_;
    new (ptr) ::znbase::roachpb::Locality();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::Locality::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Locality =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLocality}, {
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_Tier.base,}};

static void InitDefaultsTier() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_Tier_default_instance_;
    new (ptr) ::znbase::roachpb::Tier();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::Tier::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Tier =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTier}, {}};

static void InitDefaultsVersion() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_Version_default_instance_;
    new (ptr) ::znbase::roachpb::Version();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::Version::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Version =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVersion}, {}};

static void InitDefaultsLocationName() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_LocationName_default_instance_;
    new (ptr) ::znbase::roachpb::LocationName();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::LocationName::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LocationName =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLocationName}, {}};

static void InitDefaultsLocationValue() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_LocationValue_default_instance_;
    new (ptr) ::znbase::roachpb::LocationValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::LocationValue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LocationValue =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLocationValue}, {}};

static void InitDefaultsLocationMap_PartitionSpace() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_LocationMap_PartitionSpace_default_instance_;
    new (ptr) ::znbase::roachpb::LocationMap_PartitionSpace();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::LocationMap_PartitionSpace::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LocationMap_PartitionSpace =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLocationMap_PartitionSpace}, {
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_LocationValue.base,}};

static void InitDefaultsLocationMap_IndexSpaceEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_LocationMap_IndexSpaceEntry_DoNotUse_default_instance_;
    new (ptr) ::znbase::roachpb::LocationMap_IndexSpaceEntry_DoNotUse();
  }
  ::znbase::roachpb::LocationMap_IndexSpaceEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LocationMap_IndexSpaceEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLocationMap_IndexSpaceEntry_DoNotUse}, {
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_LocationValue.base,}};

static void InitDefaultsLocationMap() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::roachpb::_LocationMap_default_instance_;
    new (ptr) ::znbase::roachpb::LocationMap();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::roachpb::LocationMap::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_LocationMap =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsLocationMap}, {
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_LocationValue.base,
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_LocationMap_IndexSpaceEntry_DoNotUse.base,
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_LocationMap_PartitionSpace.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Attributes.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReplicationTarget.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReplicaDescriptor.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReplicaIdent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RangeDescriptor.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Percentiles.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StoreCapacity.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeDescriptor.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LocalityAddress.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StoreDescriptor.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StoreDeadReplicas.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Locality.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Tier.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Version.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LocationName.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LocationValue.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LocationMap_PartitionSpace.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LocationMap_IndexSpaceEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LocationMap.base);
}

}  // namespace protobuf_roachpb_2fmetadata_2eproto
namespace znbase {
namespace roachpb {
bool StoreDescriptor_StoreState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StoreDescriptor_StoreState StoreDescriptor::ENABLE;
const StoreDescriptor_StoreState StoreDescriptor::DISABLE;
const StoreDescriptor_StoreState StoreDescriptor::UNKNOWN;
const StoreDescriptor_StoreState StoreDescriptor::StoreState_MIN;
const StoreDescriptor_StoreState StoreDescriptor::StoreState_MAX;
const int StoreDescriptor::StoreState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Attributes::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Attributes::kAttrsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Attributes::Attributes()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_Attributes.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.Attributes)
}
Attributes::Attributes(const Attributes& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      attrs_(from.attrs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.Attributes)
}

void Attributes::SharedCtor() {
}

Attributes::~Attributes() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.Attributes)
  SharedDtor();
}

void Attributes::SharedDtor() {
}

void Attributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Attributes& Attributes::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fmetadata_2eproto::scc_info_Attributes.base);
  return *internal_default_instance();
}


void Attributes::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.Attributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attrs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Attributes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.Attributes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_attrs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.Attributes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.Attributes)
  return false;
#undef DO_
}

void Attributes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.Attributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  for (int i = 0, n = this->attrs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->attrs(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.Attributes)
}

size_t Attributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.Attributes)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->attrs_size());
  for (int i = 0, n = this->attrs_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->attrs(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Attributes::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Attributes*>(&from));
}

void Attributes::MergeFrom(const Attributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.Attributes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attrs_.MergeFrom(from.attrs_);
}

void Attributes::CopyFrom(const Attributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.Attributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attributes::IsInitialized() const {
  return true;
}

void Attributes::Swap(Attributes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Attributes::InternalSwap(Attributes* other) {
  using std::swap;
  attrs_.InternalSwap(CastToBase(&other->attrs_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Attributes::GetTypeName() const {
  return "znbase.roachpb.Attributes";
}


// ===================================================================

void ReplicationTarget::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplicationTarget::kNodeIdFieldNumber;
const int ReplicationTarget::kStoreIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplicationTarget::ReplicationTarget()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_ReplicationTarget.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.ReplicationTarget)
}
ReplicationTarget::ReplicationTarget(const ReplicationTarget& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&store_id_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(store_id_));
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.ReplicationTarget)
}

void ReplicationTarget::SharedCtor() {
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&store_id_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(store_id_));
}

ReplicationTarget::~ReplicationTarget() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.ReplicationTarget)
  SharedDtor();
}

void ReplicationTarget::SharedDtor() {
}

void ReplicationTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplicationTarget& ReplicationTarget::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fmetadata_2eproto::scc_info_ReplicationTarget.base);
  return *internal_default_instance();
}


void ReplicationTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.ReplicationTarget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&node_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&store_id_) -
        reinterpret_cast<char*>(&node_id_)) + sizeof(store_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReplicationTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.ReplicationTarget)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_node_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_store_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &store_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.ReplicationTarget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.ReplicationTarget)
  return false;
#undef DO_
}

void ReplicationTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.ReplicationTarget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->store_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.ReplicationTarget)
}

size_t ReplicationTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.ReplicationTarget)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_id());
    }

    if (has_store_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->store_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplicationTarget::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReplicationTarget*>(&from));
}

void ReplicationTarget::MergeFrom(const ReplicationTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.ReplicationTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      node_id_ = from.node_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      store_id_ = from.store_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReplicationTarget::CopyFrom(const ReplicationTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.ReplicationTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicationTarget::IsInitialized() const {
  return true;
}

void ReplicationTarget::Swap(ReplicationTarget* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplicationTarget::InternalSwap(ReplicationTarget* other) {
  using std::swap;
  swap(node_id_, other->node_id_);
  swap(store_id_, other->store_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ReplicationTarget::GetTypeName() const {
  return "znbase.roachpb.ReplicationTarget";
}


// ===================================================================

void ReplicaDescriptor::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplicaDescriptor::kNodeIdFieldNumber;
const int ReplicaDescriptor::kStoreIdFieldNumber;
const int ReplicaDescriptor::kReplicaIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplicaDescriptor::ReplicaDescriptor()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_ReplicaDescriptor.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.ReplicaDescriptor)
}
ReplicaDescriptor::ReplicaDescriptor(const ReplicaDescriptor& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&replica_id_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(replica_id_));
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.ReplicaDescriptor)
}

void ReplicaDescriptor::SharedCtor() {
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replica_id_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(replica_id_));
}

ReplicaDescriptor::~ReplicaDescriptor() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.ReplicaDescriptor)
  SharedDtor();
}

void ReplicaDescriptor::SharedDtor() {
}

void ReplicaDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplicaDescriptor& ReplicaDescriptor::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fmetadata_2eproto::scc_info_ReplicaDescriptor.base);
  return *internal_default_instance();
}


void ReplicaDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.ReplicaDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&node_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&replica_id_) -
        reinterpret_cast<char*>(&node_id_)) + sizeof(replica_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReplicaDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.ReplicaDescriptor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_node_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_store_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &store_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_replica_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replica_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.ReplicaDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.ReplicaDescriptor)
  return false;
#undef DO_
}

void ReplicaDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.ReplicaDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->store_id(), output);
  }

  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->replica_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.ReplicaDescriptor)
}

size_t ReplicaDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.ReplicaDescriptor)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_id());
    }

    if (has_store_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->store_id());
    }

    if (has_replica_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replica_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplicaDescriptor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReplicaDescriptor*>(&from));
}

void ReplicaDescriptor::MergeFrom(const ReplicaDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.ReplicaDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      node_id_ = from.node_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      store_id_ = from.store_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      replica_id_ = from.replica_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReplicaDescriptor::CopyFrom(const ReplicaDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.ReplicaDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicaDescriptor::IsInitialized() const {
  return true;
}

void ReplicaDescriptor::Swap(ReplicaDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplicaDescriptor::InternalSwap(ReplicaDescriptor* other) {
  using std::swap;
  swap(node_id_, other->node_id_);
  swap(store_id_, other->store_id_);
  swap(replica_id_, other->replica_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ReplicaDescriptor::GetTypeName() const {
  return "znbase.roachpb.ReplicaDescriptor";
}


// ===================================================================

void ReplicaIdent::InitAsDefaultInstance() {
  ::znbase::roachpb::_ReplicaIdent_default_instance_._instance.get_mutable()->replica_ = const_cast< ::znbase::roachpb::ReplicaDescriptor*>(
      ::znbase::roachpb::ReplicaDescriptor::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplicaIdent::kRangeIdFieldNumber;
const int ReplicaIdent::kReplicaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplicaIdent::ReplicaIdent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_ReplicaIdent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.ReplicaIdent)
}
ReplicaIdent::ReplicaIdent(const ReplicaIdent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_replica()) {
    replica_ = new ::znbase::roachpb::ReplicaDescriptor(*from.replica_);
  } else {
    replica_ = NULL;
  }
  range_id_ = from.range_id_;
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.ReplicaIdent)
}

void ReplicaIdent::SharedCtor() {
  ::memset(&replica_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_id_) -
      reinterpret_cast<char*>(&replica_)) + sizeof(range_id_));
}

ReplicaIdent::~ReplicaIdent() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.ReplicaIdent)
  SharedDtor();
}

void ReplicaIdent::SharedDtor() {
  if (this != internal_default_instance()) delete replica_;
}

void ReplicaIdent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplicaIdent& ReplicaIdent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fmetadata_2eproto::scc_info_ReplicaIdent.base);
  return *internal_default_instance();
}


void ReplicaIdent::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.ReplicaIdent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(replica_ != NULL);
    replica_->Clear();
  }
  range_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReplicaIdent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.ReplicaIdent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_range_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_replica()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.ReplicaIdent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.ReplicaIdent)
  return false;
#undef DO_
}

void ReplicaIdent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.ReplicaIdent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->range_id(), output);
  }

  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_replica(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.ReplicaIdent)
}

size_t ReplicaIdent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.ReplicaIdent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    if (has_replica()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *replica_);
    }

    if (has_range_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->range_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplicaIdent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReplicaIdent*>(&from));
}

void ReplicaIdent::MergeFrom(const ReplicaIdent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.ReplicaIdent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_replica()->::znbase::roachpb::ReplicaDescriptor::MergeFrom(from.replica());
    }
    if (cached_has_bits & 0x00000002u) {
      range_id_ = from.range_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReplicaIdent::CopyFrom(const ReplicaIdent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.ReplicaIdent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicaIdent::IsInitialized() const {
  return true;
}

void ReplicaIdent::Swap(ReplicaIdent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplicaIdent::InternalSwap(ReplicaIdent* other) {
  using std::swap;
  swap(replica_, other->replica_);
  swap(range_id_, other->range_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ReplicaIdent::GetTypeName() const {
  return "znbase.roachpb.ReplicaIdent";
}


// ===================================================================

void RangeDescriptor::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeDescriptor::kRangeIdFieldNumber;
const int RangeDescriptor::kStartKeyFieldNumber;
const int RangeDescriptor::kEndKeyFieldNumber;
const int RangeDescriptor::kReplicasFieldNumber;
const int RangeDescriptor::kNextReplicaIdFieldNumber;
const int RangeDescriptor::kGenerationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeDescriptor::RangeDescriptor()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_RangeDescriptor.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.RangeDescriptor)
}
RangeDescriptor::RangeDescriptor(const RangeDescriptor& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      replicas_(from.replicas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_start_key()) {
    start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_end_key()) {
    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
  ::memcpy(&range_id_, &from.range_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&next_replica_id_) -
    reinterpret_cast<char*>(&range_id_)) + sizeof(next_replica_id_));
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.RangeDescriptor)
}

void RangeDescriptor::SharedCtor() {
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&range_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_replica_id_) -
      reinterpret_cast<char*>(&range_id_)) + sizeof(next_replica_id_));
}

RangeDescriptor::~RangeDescriptor() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.RangeDescriptor)
  SharedDtor();
}

void RangeDescriptor::SharedDtor() {
  start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RangeDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RangeDescriptor& RangeDescriptor::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fmetadata_2eproto::scc_info_RangeDescriptor.base);
  return *internal_default_instance();
}


void RangeDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.RangeDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  replicas_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      start_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      end_key_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&range_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&next_replica_id_) -
        reinterpret_cast<char*>(&range_id_)) + sizeof(next_replica_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RangeDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.RangeDescriptor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_range_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_replicas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_next_replica_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_replica_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 generation = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_generation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &generation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.RangeDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.RangeDescriptor)
  return false;
#undef DO_
}

void RangeDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.RangeDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->range_id(), output);
  }

  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->start_key(), output);
  }

  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->end_key(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->replicas_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4,
      this->replicas(static_cast<int>(i)),
      output);
  }

  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->next_replica_id(), output);
  }

  // optional int64 generation = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->generation(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.RangeDescriptor)
}

size_t RangeDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.RangeDescriptor)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  {
    unsigned int count = static_cast<unsigned int>(this->replicas_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->replicas(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    if (has_start_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_key());
    }

    if (has_end_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_key());
    }

    if (has_range_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->range_id());
    }

    // optional int64 generation = 6;
    if (has_generation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->generation());
    }

    if (has_next_replica_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next_replica_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RangeDescriptor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RangeDescriptor*>(&from));
}

void RangeDescriptor::MergeFrom(const RangeDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.RangeDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  replicas_.MergeFrom(from.replicas_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_start_key();
      start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_end_key();
      end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
    }
    if (cached_has_bits & 0x00000004u) {
      range_id_ = from.range_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      generation_ = from.generation_;
    }
    if (cached_has_bits & 0x00000010u) {
      next_replica_id_ = from.next_replica_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RangeDescriptor::CopyFrom(const RangeDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.RangeDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeDescriptor::IsInitialized() const {
  return true;
}

void RangeDescriptor::Swap(RangeDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeDescriptor::InternalSwap(RangeDescriptor* other) {
  using std::swap;
  CastToBase(&replicas_)->InternalSwap(CastToBase(&other->replicas_));
  start_key_.Swap(&other->start_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  end_key_.Swap(&other->end_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(range_id_, other->range_id_);
  swap(generation_, other->generation_);
  swap(next_replica_id_, other->next_replica_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RangeDescriptor::GetTypeName() const {
  return "znbase.roachpb.RangeDescriptor";
}


// ===================================================================

void Percentiles::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Percentiles::kP10FieldNumber;
const int Percentiles::kP25FieldNumber;
const int Percentiles::kP50FieldNumber;
const int Percentiles::kP75FieldNumber;
const int Percentiles::kP90FieldNumber;
const int Percentiles::kPMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Percentiles::Percentiles()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_Percentiles.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.Percentiles)
}
Percentiles::Percentiles(const Percentiles& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&p10_, &from.p10_,
    static_cast<size_t>(reinterpret_cast<char*>(&pmax_) -
    reinterpret_cast<char*>(&p10_)) + sizeof(pmax_));
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.Percentiles)
}

void Percentiles::SharedCtor() {
  ::memset(&p10_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pmax_) -
      reinterpret_cast<char*>(&p10_)) + sizeof(pmax_));
}

Percentiles::~Percentiles() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.Percentiles)
  SharedDtor();
}

void Percentiles::SharedDtor() {
}

void Percentiles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Percentiles& Percentiles::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fmetadata_2eproto::scc_info_Percentiles.base);
  return *internal_default_instance();
}


void Percentiles::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.Percentiles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&p10_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pmax_) -
        reinterpret_cast<char*>(&p10_)) + sizeof(pmax_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Percentiles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.Percentiles)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_p10();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &p10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_p25();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &p25_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_p50();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &p50_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_p75();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &p75_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_p90();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &p90_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_pmax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.Percentiles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.Percentiles)
  return false;
#undef DO_
}

void Percentiles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.Percentiles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->p10(), output);
  }

  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->p25(), output);
  }

  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->p50(), output);
  }

  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->p75(), output);
  }

  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->p90(), output);
  }

  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->pmax(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.Percentiles)
}

size_t Percentiles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.Percentiles)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 63u) {
    if (has_p10()) {
      total_size += 1 + 8;
    }

    if (has_p25()) {
      total_size += 1 + 8;
    }

    if (has_p50()) {
      total_size += 1 + 8;
    }

    if (has_p75()) {
      total_size += 1 + 8;
    }

    if (has_p90()) {
      total_size += 1 + 8;
    }

    if (has_pmax()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Percentiles::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Percentiles*>(&from));
}

void Percentiles::MergeFrom(const Percentiles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.Percentiles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      p10_ = from.p10_;
    }
    if (cached_has_bits & 0x00000002u) {
      p25_ = from.p25_;
    }
    if (cached_has_bits & 0x00000004u) {
      p50_ = from.p50_;
    }
    if (cached_has_bits & 0x00000008u) {
      p75_ = from.p75_;
    }
    if (cached_has_bits & 0x00000010u) {
      p90_ = from.p90_;
    }
    if (cached_has_bits & 0x00000020u) {
      pmax_ = from.pmax_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Percentiles::CopyFrom(const Percentiles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.Percentiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Percentiles::IsInitialized() const {
  return true;
}

void Percentiles::Swap(Percentiles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Percentiles::InternalSwap(Percentiles* other) {
  using std::swap;
  swap(p10_, other->p10_);
  swap(p25_, other->p25_);
  swap(p50_, other->p50_);
  swap(p75_, other->p75_);
  swap(p90_, other->p90_);
  swap(pmax_, other->pmax_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Percentiles::GetTypeName() const {
  return "znbase.roachpb.Percentiles";
}


// ===================================================================

void StoreCapacity::InitAsDefaultInstance() {
  ::znbase::roachpb::_StoreCapacity_default_instance_._instance.get_mutable()->bytes_per_replica_ = const_cast< ::znbase::roachpb::Percentiles*>(
      ::znbase::roachpb::Percentiles::internal_default_instance());
  ::znbase::roachpb::_StoreCapacity_default_instance_._instance.get_mutable()->writes_per_replica_ = const_cast< ::znbase::roachpb::Percentiles*>(
      ::znbase::roachpb::Percentiles::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoreCapacity::kCapacityFieldNumber;
const int StoreCapacity::kAvailableFieldNumber;
const int StoreCapacity::kUsedFieldNumber;
const int StoreCapacity::kLogicalBytesFieldNumber;
const int StoreCapacity::kRangeCountFieldNumber;
const int StoreCapacity::kLeaseCountFieldNumber;
const int StoreCapacity::kQueriesPerSecondFieldNumber;
const int StoreCapacity::kWritesPerSecondFieldNumber;
const int StoreCapacity::kBytesPerReplicaFieldNumber;
const int StoreCapacity::kWritesPerReplicaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoreCapacity::StoreCapacity()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_StoreCapacity.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.StoreCapacity)
}
StoreCapacity::StoreCapacity(const StoreCapacity& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_bytes_per_replica()) {
    bytes_per_replica_ = new ::znbase::roachpb::Percentiles(*from.bytes_per_replica_);
  } else {
    bytes_per_replica_ = NULL;
  }
  if (from.has_writes_per_replica()) {
    writes_per_replica_ = new ::znbase::roachpb::Percentiles(*from.writes_per_replica_);
  } else {
    writes_per_replica_ = NULL;
  }
  ::memcpy(&capacity_, &from.capacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&queries_per_second_) -
    reinterpret_cast<char*>(&capacity_)) + sizeof(queries_per_second_));
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.StoreCapacity)
}

void StoreCapacity::SharedCtor() {
  ::memset(&bytes_per_replica_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&queries_per_second_) -
      reinterpret_cast<char*>(&bytes_per_replica_)) + sizeof(queries_per_second_));
}

StoreCapacity::~StoreCapacity() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.StoreCapacity)
  SharedDtor();
}

void StoreCapacity::SharedDtor() {
  if (this != internal_default_instance()) delete bytes_per_replica_;
  if (this != internal_default_instance()) delete writes_per_replica_;
}

void StoreCapacity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoreCapacity& StoreCapacity::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fmetadata_2eproto::scc_info_StoreCapacity.base);
  return *internal_default_instance();
}


void StoreCapacity::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.StoreCapacity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(bytes_per_replica_ != NULL);
      bytes_per_replica_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(writes_per_replica_ != NULL);
      writes_per_replica_->Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&capacity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&used_) -
        reinterpret_cast<char*>(&capacity_)) + sizeof(used_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&logical_bytes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&queries_per_second_) -
        reinterpret_cast<char*>(&logical_bytes_)) + sizeof(queries_per_second_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StoreCapacity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.StoreCapacity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_capacity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_available();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_range_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_lease_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lease_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_writes_per_second();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &writes_per_second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bytes_per_replica()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_writes_per_replica()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_used();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_logical_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &logical_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_queries_per_second();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &queries_per_second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.StoreCapacity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.StoreCapacity)
  return false;
#undef DO_
}

void StoreCapacity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.StoreCapacity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->capacity(), output);
  }

  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->available(), output);
  }

  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->range_count(), output);
  }

  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lease_count(), output);
  }

  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->writes_per_second(), output);
  }

  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->_internal_bytes_per_replica(), output);
  }

  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->_internal_writes_per_replica(), output);
  }

  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->used(), output);
  }

  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->logical_bytes(), output);
  }

  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->queries_per_second(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.StoreCapacity)
}

size_t StoreCapacity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.StoreCapacity)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    if (has_bytes_per_replica()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *bytes_per_replica_);
    }

    if (has_writes_per_replica()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *writes_per_replica_);
    }

    if (has_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->capacity());
    }

    if (has_available()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->available());
    }

    if (has_range_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->range_count());
    }

    if (has_lease_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lease_count());
    }

    if (has_writes_per_second()) {
      total_size += 1 + 8;
    }

    if (has_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->used());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    if (has_logical_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->logical_bytes());
    }

    if (has_queries_per_second()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoreCapacity::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StoreCapacity*>(&from));
}

void StoreCapacity::MergeFrom(const StoreCapacity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.StoreCapacity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_bytes_per_replica()->::znbase::roachpb::Percentiles::MergeFrom(from.bytes_per_replica());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_writes_per_replica()->::znbase::roachpb::Percentiles::MergeFrom(from.writes_per_replica());
    }
    if (cached_has_bits & 0x00000004u) {
      capacity_ = from.capacity_;
    }
    if (cached_has_bits & 0x00000008u) {
      available_ = from.available_;
    }
    if (cached_has_bits & 0x00000010u) {
      range_count_ = from.range_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      lease_count_ = from.lease_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      writes_per_second_ = from.writes_per_second_;
    }
    if (cached_has_bits & 0x00000080u) {
      used_ = from.used_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      logical_bytes_ = from.logical_bytes_;
    }
    if (cached_has_bits & 0x00000200u) {
      queries_per_second_ = from.queries_per_second_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StoreCapacity::CopyFrom(const StoreCapacity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.StoreCapacity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreCapacity::IsInitialized() const {
  return true;
}

void StoreCapacity::Swap(StoreCapacity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreCapacity::InternalSwap(StoreCapacity* other) {
  using std::swap;
  swap(bytes_per_replica_, other->bytes_per_replica_);
  swap(writes_per_replica_, other->writes_per_replica_);
  swap(capacity_, other->capacity_);
  swap(available_, other->available_);
  swap(range_count_, other->range_count_);
  swap(lease_count_, other->lease_count_);
  swap(writes_per_second_, other->writes_per_second_);
  swap(used_, other->used_);
  swap(logical_bytes_, other->logical_bytes_);
  swap(queries_per_second_, other->queries_per_second_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string StoreCapacity::GetTypeName() const {
  return "znbase.roachpb.StoreCapacity";
}


// ===================================================================

void NodeDescriptor::InitAsDefaultInstance() {
  ::znbase::roachpb::_NodeDescriptor_default_instance_._instance.get_mutable()->address_ = const_cast< ::znbase::util::UnresolvedAddr*>(
      ::znbase::util::UnresolvedAddr::internal_default_instance());
  ::znbase::roachpb::_NodeDescriptor_default_instance_._instance.get_mutable()->attrs_ = const_cast< ::znbase::roachpb::Attributes*>(
      ::znbase::roachpb::Attributes::internal_default_instance());
  ::znbase::roachpb::_NodeDescriptor_default_instance_._instance.get_mutable()->locality_ = const_cast< ::znbase::roachpb::Locality*>(
      ::znbase::roachpb::Locality::internal_default_instance());
  ::znbase::roachpb::_NodeDescriptor_default_instance_._instance.get_mutable()->serverversion_ = const_cast< ::znbase::roachpb::Version*>(
      ::znbase::roachpb::Version::internal_default_instance());
  ::znbase::roachpb::_NodeDescriptor_default_instance_._instance.get_mutable()->location_name_ = const_cast< ::znbase::roachpb::LocationName*>(
      ::znbase::roachpb::LocationName::internal_default_instance());
}
void NodeDescriptor::clear_address() {
  if (address_ != NULL) address_->Clear();
  clear_has_address();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeDescriptor::kNodeIdFieldNumber;
const int NodeDescriptor::kAddressFieldNumber;
const int NodeDescriptor::kAttrsFieldNumber;
const int NodeDescriptor::kLocalityFieldNumber;
const int NodeDescriptor::kServerVersionFieldNumber;
const int NodeDescriptor::kBuildTagFieldNumber;
const int NodeDescriptor::kStartedAtFieldNumber;
const int NodeDescriptor::kLocalityAddressFieldNumber;
const int NodeDescriptor::kLocationNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeDescriptor::NodeDescriptor()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_NodeDescriptor.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.NodeDescriptor)
}
NodeDescriptor::NodeDescriptor(const NodeDescriptor& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      locality_address_(from.locality_address_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  build_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_build_tag()) {
    build_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_tag_);
  }
  if (from.has_address()) {
    address_ = new ::znbase::util::UnresolvedAddr(*from.address_);
  } else {
    address_ = NULL;
  }
  if (from.has_attrs()) {
    attrs_ = new ::znbase::roachpb::Attributes(*from.attrs_);
  } else {
    attrs_ = NULL;
  }
  if (from.has_locality()) {
    locality_ = new ::znbase::roachpb::Locality(*from.locality_);
  } else {
    locality_ = NULL;
  }
  if (from.has_serverversion()) {
    serverversion_ = new ::znbase::roachpb::Version(*from.serverversion_);
  } else {
    serverversion_ = NULL;
  }
  if (from.has_location_name()) {
    location_name_ = new ::znbase::roachpb::LocationName(*from.location_name_);
  } else {
    location_name_ = NULL;
  }
  ::memcpy(&started_at_, &from.started_at_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_id_) -
    reinterpret_cast<char*>(&started_at_)) + sizeof(node_id_));
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.NodeDescriptor)
}

void NodeDescriptor::SharedCtor() {
  build_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_id_) -
      reinterpret_cast<char*>(&address_)) + sizeof(node_id_));
}

NodeDescriptor::~NodeDescriptor() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.NodeDescriptor)
  SharedDtor();
}

void NodeDescriptor::SharedDtor() {
  build_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete address_;
  if (this != internal_default_instance()) delete attrs_;
  if (this != internal_default_instance()) delete locality_;
  if (this != internal_default_instance()) delete serverversion_;
  if (this != internal_default_instance()) delete location_name_;
}

void NodeDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeDescriptor& NodeDescriptor::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fmetadata_2eproto::scc_info_NodeDescriptor.base);
  return *internal_default_instance();
}


void NodeDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.NodeDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  locality_address_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      build_tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(address_ != NULL);
      address_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(attrs_ != NULL);
      attrs_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(locality_ != NULL);
      locality_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(serverversion_ != NULL);
      serverversion_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(location_name_ != NULL);
      location_name_->Clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&started_at_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&node_id_) -
        reinterpret_cast<char*>(&started_at_)) + sizeof(node_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NodeDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.NodeDescriptor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_node_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_attrs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_locality()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_serverversion()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_build_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_started_at();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &started_at_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_locality_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.NodeDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.NodeDescriptor)
  return false;
#undef DO_
}

void NodeDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.NodeDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_address(), output);
  }

  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_attrs(), output);
  }

  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_locality(), output);
  }

  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_serverversion(), output);
  }

  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->build_tag(), output);
  }

  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->started_at(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->locality_address_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8,
      this->locality_address(static_cast<int>(i)),
      output);
  }

  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->_internal_location_name(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.NodeDescriptor)
}

size_t NodeDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.NodeDescriptor)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  {
    unsigned int count = static_cast<unsigned int>(this->locality_address_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->locality_address(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    if (has_build_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->build_tag());
    }

    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *address_);
    }

    if (has_attrs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *attrs_);
    }

    if (has_locality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *locality_);
    }

    if (has_serverversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *serverversion_);
    }

    if (has_location_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *location_name_);
    }

    if (has_started_at()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->started_at());
    }

    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeDescriptor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NodeDescriptor*>(&from));
}

void NodeDescriptor::MergeFrom(const NodeDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.NodeDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  locality_address_.MergeFrom(from.locality_address_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_build_tag();
      build_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_address()->::znbase::util::UnresolvedAddr::MergeFrom(from.address());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_attrs()->::znbase::roachpb::Attributes::MergeFrom(from.attrs());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_locality()->::znbase::roachpb::Locality::MergeFrom(from.locality());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_serverversion()->::znbase::roachpb::Version::MergeFrom(from.serverversion());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_location_name()->::znbase::roachpb::LocationName::MergeFrom(from.location_name());
    }
    if (cached_has_bits & 0x00000040u) {
      started_at_ = from.started_at_;
    }
    if (cached_has_bits & 0x00000080u) {
      node_id_ = from.node_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NodeDescriptor::CopyFrom(const NodeDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.NodeDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeDescriptor::IsInitialized() const {
  return true;
}

void NodeDescriptor::Swap(NodeDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeDescriptor::InternalSwap(NodeDescriptor* other) {
  using std::swap;
  CastToBase(&locality_address_)->InternalSwap(CastToBase(&other->locality_address_));
  build_tag_.Swap(&other->build_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(address_, other->address_);
  swap(attrs_, other->attrs_);
  swap(locality_, other->locality_);
  swap(serverversion_, other->serverversion_);
  swap(location_name_, other->location_name_);
  swap(started_at_, other->started_at_);
  swap(node_id_, other->node_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string NodeDescriptor::GetTypeName() const {
  return "znbase.roachpb.NodeDescriptor";
}


// ===================================================================

void LocalityAddress::InitAsDefaultInstance() {
  ::znbase::roachpb::_LocalityAddress_default_instance_._instance.get_mutable()->address_ = const_cast< ::znbase::util::UnresolvedAddr*>(
      ::znbase::util::UnresolvedAddr::internal_default_instance());
  ::znbase::roachpb::_LocalityAddress_default_instance_._instance.get_mutable()->locality_tier_ = const_cast< ::znbase::roachpb::Tier*>(
      ::znbase::roachpb::Tier::internal_default_instance());
}
void LocalityAddress::clear_address() {
  if (address_ != NULL) address_->Clear();
  clear_has_address();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalityAddress::kAddressFieldNumber;
const int LocalityAddress::kLocalityTierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalityAddress::LocalityAddress()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_LocalityAddress.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.LocalityAddress)
}
LocalityAddress::LocalityAddress(const LocalityAddress& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_address()) {
    address_ = new ::znbase::util::UnresolvedAddr(*from.address_);
  } else {
    address_ = NULL;
  }
  if (from.has_locality_tier()) {
    locality_tier_ = new ::znbase::roachpb::Tier(*from.locality_tier_);
  } else {
    locality_tier_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.LocalityAddress)
}

void LocalityAddress::SharedCtor() {
  ::memset(&address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&locality_tier_) -
      reinterpret_cast<char*>(&address_)) + sizeof(locality_tier_));
}

LocalityAddress::~LocalityAddress() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.LocalityAddress)
  SharedDtor();
}

void LocalityAddress::SharedDtor() {
  if (this != internal_default_instance()) delete address_;
  if (this != internal_default_instance()) delete locality_tier_;
}

void LocalityAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocalityAddress& LocalityAddress::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fmetadata_2eproto::scc_info_LocalityAddress.base);
  return *internal_default_instance();
}


void LocalityAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.LocalityAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(address_ != NULL);
      address_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(locality_tier_ != NULL);
      locality_tier_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LocalityAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.LocalityAddress)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_locality_tier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.LocalityAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.LocalityAddress)
  return false;
#undef DO_
}

void LocalityAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.LocalityAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_address(), output);
  }

  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_locality_tier(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.LocalityAddress)
}

size_t LocalityAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.LocalityAddress)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *address_);
    }

    if (has_locality_tier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *locality_tier_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalityAddress::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LocalityAddress*>(&from));
}

void LocalityAddress::MergeFrom(const LocalityAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.LocalityAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_address()->::znbase::util::UnresolvedAddr::MergeFrom(from.address());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_locality_tier()->::znbase::roachpb::Tier::MergeFrom(from.locality_tier());
    }
  }
}

void LocalityAddress::CopyFrom(const LocalityAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.LocalityAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalityAddress::IsInitialized() const {
  return true;
}

void LocalityAddress::Swap(LocalityAddress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalityAddress::InternalSwap(LocalityAddress* other) {
  using std::swap;
  swap(address_, other->address_);
  swap(locality_tier_, other->locality_tier_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string LocalityAddress::GetTypeName() const {
  return "znbase.roachpb.LocalityAddress";
}


// ===================================================================

void StoreDescriptor::InitAsDefaultInstance() {
  ::znbase::roachpb::_StoreDescriptor_default_instance_._instance.get_mutable()->attrs_ = const_cast< ::znbase::roachpb::Attributes*>(
      ::znbase::roachpb::Attributes::internal_default_instance());
  ::znbase::roachpb::_StoreDescriptor_default_instance_._instance.get_mutable()->node_ = const_cast< ::znbase::roachpb::NodeDescriptor*>(
      ::znbase::roachpb::NodeDescriptor::internal_default_instance());
  ::znbase::roachpb::_StoreDescriptor_default_instance_._instance.get_mutable()->capacity_ = const_cast< ::znbase::roachpb::StoreCapacity*>(
      ::znbase::roachpb::StoreCapacity::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoreDescriptor::kStoreIdFieldNumber;
const int StoreDescriptor::kAttrsFieldNumber;
const int StoreDescriptor::kNodeFieldNumber;
const int StoreDescriptor::kCapacityFieldNumber;
const int StoreDescriptor::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoreDescriptor::StoreDescriptor()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_StoreDescriptor.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.StoreDescriptor)
}
StoreDescriptor::StoreDescriptor(const StoreDescriptor& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_attrs()) {
    attrs_ = new ::znbase::roachpb::Attributes(*from.attrs_);
  } else {
    attrs_ = NULL;
  }
  if (from.has_node()) {
    node_ = new ::znbase::roachpb::NodeDescriptor(*from.node_);
  } else {
    node_ = NULL;
  }
  if (from.has_capacity()) {
    capacity_ = new ::znbase::roachpb::StoreCapacity(*from.capacity_);
  } else {
    capacity_ = NULL;
  }
  ::memcpy(&store_id_, &from.store_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&store_id_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.StoreDescriptor)
}

void StoreDescriptor::SharedCtor() {
  ::memset(&attrs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&attrs_)) + sizeof(state_));
}

StoreDescriptor::~StoreDescriptor() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.StoreDescriptor)
  SharedDtor();
}

void StoreDescriptor::SharedDtor() {
  if (this != internal_default_instance()) delete attrs_;
  if (this != internal_default_instance()) delete node_;
  if (this != internal_default_instance()) delete capacity_;
}

void StoreDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoreDescriptor& StoreDescriptor::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fmetadata_2eproto::scc_info_StoreDescriptor.base);
  return *internal_default_instance();
}


void StoreDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.StoreDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(attrs_ != NULL);
      attrs_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(node_ != NULL);
      node_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(capacity_ != NULL);
      capacity_->Clear();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&store_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&store_id_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StoreDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.StoreDescriptor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_store_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &store_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_attrs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_capacity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::znbase::roachpb::StoreDescriptor_StoreState_IsValid(value)) {
            set_state(static_cast< ::znbase::roachpb::StoreDescriptor_StoreState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.StoreDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.StoreDescriptor)
  return false;
#undef DO_
}

void StoreDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.StoreDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->store_id(), output);
  }

  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_attrs(), output);
  }

  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_node(), output);
  }

  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_capacity(), output);
  }

  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->state(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.StoreDescriptor)
}

size_t StoreDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.StoreDescriptor)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    if (has_attrs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *attrs_);
    }

    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *node_);
    }

    if (has_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *capacity_);
    }

    if (has_store_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->store_id());
    }

    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoreDescriptor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StoreDescriptor*>(&from));
}

void StoreDescriptor::MergeFrom(const StoreDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.StoreDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_attrs()->::znbase::roachpb::Attributes::MergeFrom(from.attrs());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_node()->::znbase::roachpb::NodeDescriptor::MergeFrom(from.node());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_capacity()->::znbase::roachpb::StoreCapacity::MergeFrom(from.capacity());
    }
    if (cached_has_bits & 0x00000008u) {
      store_id_ = from.store_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StoreDescriptor::CopyFrom(const StoreDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.StoreDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreDescriptor::IsInitialized() const {
  return true;
}

void StoreDescriptor::Swap(StoreDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreDescriptor::InternalSwap(StoreDescriptor* other) {
  using std::swap;
  swap(attrs_, other->attrs_);
  swap(node_, other->node_);
  swap(capacity_, other->capacity_);
  swap(store_id_, other->store_id_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string StoreDescriptor::GetTypeName() const {
  return "znbase.roachpb.StoreDescriptor";
}


// ===================================================================

void StoreDeadReplicas::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoreDeadReplicas::kStoreIdFieldNumber;
const int StoreDeadReplicas::kReplicasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoreDeadReplicas::StoreDeadReplicas()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_StoreDeadReplicas.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.StoreDeadReplicas)
}
StoreDeadReplicas::StoreDeadReplicas(const StoreDeadReplicas& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      replicas_(from.replicas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  store_id_ = from.store_id_;
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.StoreDeadReplicas)
}

void StoreDeadReplicas::SharedCtor() {
  store_id_ = 0;
}

StoreDeadReplicas::~StoreDeadReplicas() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.StoreDeadReplicas)
  SharedDtor();
}

void StoreDeadReplicas::SharedDtor() {
}

void StoreDeadReplicas::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoreDeadReplicas& StoreDeadReplicas::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fmetadata_2eproto::scc_info_StoreDeadReplicas.base);
  return *internal_default_instance();
}


void StoreDeadReplicas::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.StoreDeadReplicas)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  replicas_.Clear();
  store_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StoreDeadReplicas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.StoreDeadReplicas)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_store_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &store_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_replicas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.StoreDeadReplicas)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.StoreDeadReplicas)
  return false;
#undef DO_
}

void StoreDeadReplicas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.StoreDeadReplicas)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->store_id(), output);
  }

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->replicas_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->replicas(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.StoreDeadReplicas)
}

size_t StoreDeadReplicas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.StoreDeadReplicas)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  {
    unsigned int count = static_cast<unsigned int>(this->replicas_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->replicas(static_cast<int>(i)));
    }
  }

  if (has_store_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->store_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoreDeadReplicas::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StoreDeadReplicas*>(&from));
}

void StoreDeadReplicas::MergeFrom(const StoreDeadReplicas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.StoreDeadReplicas)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  replicas_.MergeFrom(from.replicas_);
  if (from.has_store_id()) {
    set_store_id(from.store_id());
  }
}

void StoreDeadReplicas::CopyFrom(const StoreDeadReplicas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.StoreDeadReplicas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreDeadReplicas::IsInitialized() const {
  return true;
}

void StoreDeadReplicas::Swap(StoreDeadReplicas* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreDeadReplicas::InternalSwap(StoreDeadReplicas* other) {
  using std::swap;
  CastToBase(&replicas_)->InternalSwap(CastToBase(&other->replicas_));
  swap(store_id_, other->store_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string StoreDeadReplicas::GetTypeName() const {
  return "znbase.roachpb.StoreDeadReplicas";
}


// ===================================================================

void Locality::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Locality::kTiersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Locality::Locality()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_Locality.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.Locality)
}
Locality::Locality(const Locality& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      tiers_(from.tiers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.Locality)
}

void Locality::SharedCtor() {
}

Locality::~Locality() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.Locality)
  SharedDtor();
}

void Locality::SharedDtor() {
}

void Locality::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Locality& Locality::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fmetadata_2eproto::scc_info_Locality.base);
  return *internal_default_instance();
}


void Locality::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.Locality)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tiers_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Locality::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.Locality)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tiers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.Locality)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.Locality)
  return false;
#undef DO_
}

void Locality::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.Locality)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tiers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->tiers(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.Locality)
}

size_t Locality::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.Locality)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  {
    unsigned int count = static_cast<unsigned int>(this->tiers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tiers(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Locality::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Locality*>(&from));
}

void Locality::MergeFrom(const Locality& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.Locality)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tiers_.MergeFrom(from.tiers_);
}

void Locality::CopyFrom(const Locality& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.Locality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Locality::IsInitialized() const {
  return true;
}

void Locality::Swap(Locality* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Locality::InternalSwap(Locality* other) {
  using std::swap;
  CastToBase(&tiers_)->InternalSwap(CastToBase(&other->tiers_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Locality::GetTypeName() const {
  return "znbase.roachpb.Locality";
}


// ===================================================================

void Tier::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tier::kKeyFieldNumber;
const int Tier::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tier::Tier()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_Tier.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.Tier)
}
Tier::Tier(const Tier& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.Tier)
}

void Tier::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Tier::~Tier() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.Tier)
  SharedDtor();
}

void Tier::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Tier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tier& Tier::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fmetadata_2eproto::scc_info_Tier.base);
  return *internal_default_instance();
}


void Tier::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.Tier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Tier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.Tier)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.Tier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.Tier)
  return false;
#undef DO_
}

void Tier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.Tier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.Tier)
}

size_t Tier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.Tier)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tier::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Tier*>(&from));
}

void Tier::MergeFrom(const Tier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.Tier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void Tier::CopyFrom(const Tier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.Tier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tier::IsInitialized() const {
  return true;
}

void Tier::Swap(Tier* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tier::InternalSwap(Tier* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Tier::GetTypeName() const {
  return "znbase.roachpb.Tier";
}


// ===================================================================

void Version::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Version::kMajorValFieldNumber;
const int Version::kMinorValFieldNumber;
const int Version::kPatchFieldNumber;
const int Version::kUnstableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Version::Version()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_Version.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.Version)
}
Version::Version(const Version& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&major_val_, &from.major_val_,
    static_cast<size_t>(reinterpret_cast<char*>(&unstable_) -
    reinterpret_cast<char*>(&major_val_)) + sizeof(unstable_));
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.Version)
}

void Version::SharedCtor() {
  ::memset(&major_val_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unstable_) -
      reinterpret_cast<char*>(&major_val_)) + sizeof(unstable_));
}

Version::~Version() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.Version)
  SharedDtor();
}

void Version::SharedDtor() {
}

void Version::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Version& Version::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fmetadata_2eproto::scc_info_Version.base);
  return *internal_default_instance();
}


void Version::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.Version)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&major_val_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unstable_) -
        reinterpret_cast<char*>(&major_val_)) + sizeof(unstable_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.Version)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_major_val();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &major_val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_minor_val();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minor_val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_patch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &patch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_unstable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unstable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.Version)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.Version)
  return false;
#undef DO_
}

void Version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.Version)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->major_val(), output);
  }

  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->minor_val(), output);
  }

  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->patch(), output);
  }

  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->unstable(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.Version)
}

size_t Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.Version)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    if (has_major_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->major_val());
    }

    if (has_minor_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minor_val());
    }

    if (has_patch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->patch());
    }

    if (has_unstable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unstable());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Version::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Version*>(&from));
}

void Version::MergeFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.Version)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      major_val_ = from.major_val_;
    }
    if (cached_has_bits & 0x00000002u) {
      minor_val_ = from.minor_val_;
    }
    if (cached_has_bits & 0x00000004u) {
      patch_ = from.patch_;
    }
    if (cached_has_bits & 0x00000008u) {
      unstable_ = from.unstable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Version::CopyFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Version::IsInitialized() const {
  return true;
}

void Version::Swap(Version* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Version::InternalSwap(Version* other) {
  using std::swap;
  swap(major_val_, other->major_val_);
  swap(minor_val_, other->minor_val_);
  swap(patch_, other->patch_);
  swap(unstable_, other->unstable_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Version::GetTypeName() const {
  return "znbase.roachpb.Version";
}


// ===================================================================

void LocationName::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocationName::kNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocationName::LocationName()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_LocationName.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.LocationName)
}
LocationName::LocationName(const LocationName& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      names_(from.names_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.LocationName)
}

void LocationName::SharedCtor() {
}

LocationName::~LocationName() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.LocationName)
  SharedDtor();
}

void LocationName::SharedDtor() {
}

void LocationName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocationName& LocationName::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fmetadata_2eproto::scc_info_LocationName.base);
  return *internal_default_instance();
}


void LocationName::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.LocationName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LocationName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.LocationName)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string names = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.LocationName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.LocationName)
  return false;
#undef DO_
}

void LocationName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.LocationName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string names = 1;
  for (int i = 0, n = this->names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->names(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.LocationName)
}

size_t LocationName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.LocationName)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated string names = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->names_size());
  for (int i = 0, n = this->names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocationName::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LocationName*>(&from));
}

void LocationName::MergeFrom(const LocationName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.LocationName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
}

void LocationName::CopyFrom(const LocationName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.LocationName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationName::IsInitialized() const {
  return true;
}

void LocationName::Swap(LocationName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocationName::InternalSwap(LocationName* other) {
  using std::swap;
  names_.InternalSwap(CastToBase(&other->names_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string LocationName::GetTypeName() const {
  return "znbase.roachpb.LocationName";
}


// ===================================================================

void LocationValue::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocationValue::kSpacesFieldNumber;
const int LocationValue::kLeasesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocationValue::LocationValue()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_LocationValue.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.LocationValue)
}
LocationValue::LocationValue(const LocationValue& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      spaces_(from.spaces_),
      leases_(from.leases_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.LocationValue)
}

void LocationValue::SharedCtor() {
}

LocationValue::~LocationValue() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.LocationValue)
  SharedDtor();
}

void LocationValue::SharedDtor() {
}

void LocationValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocationValue& LocationValue::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fmetadata_2eproto::scc_info_LocationValue.base);
  return *internal_default_instance();
}


void LocationValue::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.LocationValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spaces_.Clear();
  leases_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LocationValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.LocationValue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string spaces = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_spaces()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string leases = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_leases()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.LocationValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.LocationValue)
  return false;
#undef DO_
}

void LocationValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.LocationValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string spaces = 1;
  for (int i = 0, n = this->spaces_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->spaces(i), output);
  }

  // repeated string leases = 2;
  for (int i = 0, n = this->leases_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->leases(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.LocationValue)
}

size_t LocationValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.LocationValue)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated string spaces = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->spaces_size());
  for (int i = 0, n = this->spaces_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->spaces(i));
  }

  // repeated string leases = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->leases_size());
  for (int i = 0, n = this->leases_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->leases(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocationValue::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LocationValue*>(&from));
}

void LocationValue::MergeFrom(const LocationValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.LocationValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spaces_.MergeFrom(from.spaces_);
  leases_.MergeFrom(from.leases_);
}

void LocationValue::CopyFrom(const LocationValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.LocationValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationValue::IsInitialized() const {
  return true;
}

void LocationValue::Swap(LocationValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocationValue::InternalSwap(LocationValue* other) {
  using std::swap;
  spaces_.InternalSwap(CastToBase(&other->spaces_));
  leases_.InternalSwap(CastToBase(&other->leases_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string LocationValue::GetTypeName() const {
  return "znbase.roachpb.LocationValue";
}


// ===================================================================

void LocationMap_PartitionSpace::InitAsDefaultInstance() {
  ::znbase::roachpb::_LocationMap_PartitionSpace_default_instance_._instance.get_mutable()->space_ = const_cast< ::znbase::roachpb::LocationValue*>(
      ::znbase::roachpb::LocationValue::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocationMap_PartitionSpace::kNameFieldNumber;
const int LocationMap_PartitionSpace::kStartKeyFieldNumber;
const int LocationMap_PartitionSpace::kEndKeyFieldNumber;
const int LocationMap_PartitionSpace::kSpaceFieldNumber;
const int LocationMap_PartitionSpace::kIndexIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocationMap_PartitionSpace::LocationMap_PartitionSpace()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_LocationMap_PartitionSpace.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.LocationMap.PartitionSpace)
}
LocationMap_PartitionSpace::LocationMap_PartitionSpace(const LocationMap_PartitionSpace& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_start_key()) {
    start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_end_key()) {
    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
  if (from.has_space()) {
    space_ = new ::znbase::roachpb::LocationValue(*from.space_);
  } else {
    space_ = NULL;
  }
  indexid_ = from.indexid_;
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.LocationMap.PartitionSpace)
}

void LocationMap_PartitionSpace::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&space_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&indexid_) -
      reinterpret_cast<char*>(&space_)) + sizeof(indexid_));
}

LocationMap_PartitionSpace::~LocationMap_PartitionSpace() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.LocationMap.PartitionSpace)
  SharedDtor();
}

void LocationMap_PartitionSpace::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete space_;
}

void LocationMap_PartitionSpace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocationMap_PartitionSpace& LocationMap_PartitionSpace::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fmetadata_2eproto::scc_info_LocationMap_PartitionSpace.base);
  return *internal_default_instance();
}


void LocationMap_PartitionSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.LocationMap.PartitionSpace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      start_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      end_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(space_ != NULL);
      space_->Clear();
    }
  }
  indexid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LocationMap_PartitionSpace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.LocationMap.PartitionSpace)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .znbase.roachpb.LocationValue space = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_space()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_indexid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &indexid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.LocationMap.PartitionSpace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.LocationMap.PartitionSpace)
  return false;
#undef DO_
}

void LocationMap_PartitionSpace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.LocationMap.PartitionSpace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->start_key(), output);
  }

  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->end_key(), output);
  }

  // optional .znbase.roachpb.LocationValue space = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_space(), output);
  }

  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->indexid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.LocationMap.PartitionSpace)
}

size_t LocationMap_PartitionSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.LocationMap.PartitionSpace)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    if (has_start_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_key());
    }

    if (has_end_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_key());
    }

    // optional .znbase.roachpb.LocationValue space = 4;
    if (has_space()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *space_);
    }

    if (has_indexid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->indexid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocationMap_PartitionSpace::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LocationMap_PartitionSpace*>(&from));
}

void LocationMap_PartitionSpace::MergeFrom(const LocationMap_PartitionSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.LocationMap.PartitionSpace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_start_key();
      start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_end_key();
      end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_space()->::znbase::roachpb::LocationValue::MergeFrom(from.space());
    }
    if (cached_has_bits & 0x00000010u) {
      indexid_ = from.indexid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LocationMap_PartitionSpace::CopyFrom(const LocationMap_PartitionSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.LocationMap.PartitionSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationMap_PartitionSpace::IsInitialized() const {
  return true;
}

void LocationMap_PartitionSpace::Swap(LocationMap_PartitionSpace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocationMap_PartitionSpace::InternalSwap(LocationMap_PartitionSpace* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  start_key_.Swap(&other->start_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  end_key_.Swap(&other->end_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(space_, other->space_);
  swap(indexid_, other->indexid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string LocationMap_PartitionSpace::GetTypeName() const {
  return "znbase.roachpb.LocationMap.PartitionSpace";
}


// ===================================================================

LocationMap_IndexSpaceEntry_DoNotUse::LocationMap_IndexSpaceEntry_DoNotUse() {}
LocationMap_IndexSpaceEntry_DoNotUse::LocationMap_IndexSpaceEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void LocationMap_IndexSpaceEntry_DoNotUse::MergeFrom(const LocationMap_IndexSpaceEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

void LocationMap::InitAsDefaultInstance() {
  ::znbase::roachpb::_LocationMap_default_instance_._instance.get_mutable()->table_space_ = const_cast< ::znbase::roachpb::LocationValue*>(
      ::znbase::roachpb::LocationValue::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocationMap::kTableSpaceFieldNumber;
const int LocationMap::kIndexSpaceFieldNumber;
const int LocationMap::kPartitionSpaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocationMap::LocationMap()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_roachpb_2fmetadata_2eproto::scc_info_LocationMap.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.roachpb.LocationMap)
}
LocationMap::LocationMap(const LocationMap& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      partition_space_(from.partition_space_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  index_space_.MergeFrom(from.index_space_);
  if (from.has_table_space()) {
    table_space_ = new ::znbase::roachpb::LocationValue(*from.table_space_);
  } else {
    table_space_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:znbase.roachpb.LocationMap)
}

void LocationMap::SharedCtor() {
  table_space_ = NULL;
}

LocationMap::~LocationMap() {
  // @@protoc_insertion_point(destructor:znbase.roachpb.LocationMap)
  SharedDtor();
}

void LocationMap::SharedDtor() {
  if (this != internal_default_instance()) delete table_space_;
}

void LocationMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocationMap& LocationMap::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_roachpb_2fmetadata_2eproto::scc_info_LocationMap.base);
  return *internal_default_instance();
}


void LocationMap::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.roachpb.LocationMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_space_.Clear();
  partition_space_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(table_space_ != NULL);
    table_space_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LocationMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.roachpb.LocationMap)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .znbase.roachpb.LocationValue table_space = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_table_space()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .znbase.roachpb.LocationValue> index_space = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          LocationMap_IndexSpaceEntry_DoNotUse::Parser< ::google::protobuf::internal::MapFieldLite<
              LocationMap_IndexSpaceEntry_DoNotUse,
              ::google::protobuf::uint32, ::znbase::roachpb::LocationValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::znbase::roachpb::LocationValue > > parser(&index_space_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .znbase.roachpb.LocationMap.PartitionSpace partition_space = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_partition_space()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.roachpb.LocationMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.roachpb.LocationMap)
  return false;
#undef DO_
}

void LocationMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.roachpb.LocationMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .znbase.roachpb.LocationValue table_space = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_table_space(), output);
  }

  // map<uint32, .znbase.roachpb.LocationValue> index_space = 2;
  if (!this->index_space().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::znbase::roachpb::LocationValue >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->index_space().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->index_space().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::znbase::roachpb::LocationValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::znbase::roachpb::LocationValue >::const_iterator
          it = this->index_space().begin();
          it != this->index_space().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<LocationMap_IndexSpaceEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(index_space_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            2, *entry, output);
      }
    } else {
      ::std::unique_ptr<LocationMap_IndexSpaceEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::znbase::roachpb::LocationValue >::const_iterator
          it = this->index_space().begin();
          it != this->index_space().end(); ++it) {
        entry.reset(index_space_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            2, *entry, output);
      }
    }
  }

  // repeated .znbase.roachpb.LocationMap.PartitionSpace partition_space = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->partition_space_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3,
      this->partition_space(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:znbase.roachpb.LocationMap)
}

size_t LocationMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.roachpb.LocationMap)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // map<uint32, .znbase.roachpb.LocationValue> index_space = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->index_space_size());
  {
    ::std::unique_ptr<LocationMap_IndexSpaceEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::znbase::roachpb::LocationValue >::const_iterator
        it = this->index_space().begin();
        it != this->index_space().end(); ++it) {
      entry.reset(index_space_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .znbase.roachpb.LocationMap.PartitionSpace partition_space = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->partition_space_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->partition_space(static_cast<int>(i)));
    }
  }

  // optional .znbase.roachpb.LocationValue table_space = 1;
  if (has_table_space()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *table_space_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocationMap::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LocationMap*>(&from));
}

void LocationMap::MergeFrom(const LocationMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.roachpb.LocationMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  index_space_.MergeFrom(from.index_space_);
  partition_space_.MergeFrom(from.partition_space_);
  if (from.has_table_space()) {
    mutable_table_space()->::znbase::roachpb::LocationValue::MergeFrom(from.table_space());
  }
}

void LocationMap::CopyFrom(const LocationMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.roachpb.LocationMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationMap::IsInitialized() const {
  return true;
}

void LocationMap::Swap(LocationMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocationMap::InternalSwap(LocationMap* other) {
  using std::swap;
  index_space_.Swap(&other->index_space_);
  CastToBase(&partition_space_)->InternalSwap(CastToBase(&other->partition_space_));
  swap(table_space_, other->table_space_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string LocationMap::GetTypeName() const {
  return "znbase.roachpb.LocationMap";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace roachpb
}  // namespace znbase
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::Attributes* Arena::CreateMaybeMessage< ::znbase::roachpb::Attributes >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::Attributes >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::ReplicationTarget* Arena::CreateMaybeMessage< ::znbase::roachpb::ReplicationTarget >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::ReplicationTarget >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::ReplicaDescriptor* Arena::CreateMaybeMessage< ::znbase::roachpb::ReplicaDescriptor >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::ReplicaDescriptor >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::ReplicaIdent* Arena::CreateMaybeMessage< ::znbase::roachpb::ReplicaIdent >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::ReplicaIdent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::RangeDescriptor* Arena::CreateMaybeMessage< ::znbase::roachpb::RangeDescriptor >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::RangeDescriptor >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::Percentiles* Arena::CreateMaybeMessage< ::znbase::roachpb::Percentiles >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::Percentiles >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::StoreCapacity* Arena::CreateMaybeMessage< ::znbase::roachpb::StoreCapacity >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::StoreCapacity >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::NodeDescriptor* Arena::CreateMaybeMessage< ::znbase::roachpb::NodeDescriptor >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::NodeDescriptor >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::LocalityAddress* Arena::CreateMaybeMessage< ::znbase::roachpb::LocalityAddress >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::LocalityAddress >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::StoreDescriptor* Arena::CreateMaybeMessage< ::znbase::roachpb::StoreDescriptor >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::StoreDescriptor >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::StoreDeadReplicas* Arena::CreateMaybeMessage< ::znbase::roachpb::StoreDeadReplicas >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::StoreDeadReplicas >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::Locality* Arena::CreateMaybeMessage< ::znbase::roachpb::Locality >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::Locality >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::Tier* Arena::CreateMaybeMessage< ::znbase::roachpb::Tier >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::Tier >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::Version* Arena::CreateMaybeMessage< ::znbase::roachpb::Version >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::Version >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::LocationName* Arena::CreateMaybeMessage< ::znbase::roachpb::LocationName >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::LocationName >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::LocationValue* Arena::CreateMaybeMessage< ::znbase::roachpb::LocationValue >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::LocationValue >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::LocationMap_PartitionSpace* Arena::CreateMaybeMessage< ::znbase::roachpb::LocationMap_PartitionSpace >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::LocationMap_PartitionSpace >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::LocationMap_IndexSpaceEntry_DoNotUse* Arena::CreateMaybeMessage< ::znbase::roachpb::LocationMap_IndexSpaceEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::LocationMap_IndexSpaceEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::roachpb::LocationMap* Arena::CreateMaybeMessage< ::znbase::roachpb::LocationMap >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::roachpb::LocationMap >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
