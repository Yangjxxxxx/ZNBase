// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: icl/baseicl/encryption_options.proto

#include "icl/baseicl/encryption_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_icl_2fbaseicl_2fencryption_5foptions_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_icl_2fbaseicl_2fencryption_5foptions_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EncryptionKeyFiles;
}  // namespace protobuf_icl_2fbaseicl_2fencryption_5foptions_2eproto
namespace znbase {
namespace icl {
namespace baseicl {
class EncryptionKeyFilesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EncryptionKeyFiles>
      _instance;
} _EncryptionKeyFiles_default_instance_;
class EncryptionOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EncryptionOptions>
      _instance;
} _EncryptionOptions_default_instance_;
}  // namespace baseicl
}  // namespace icl
}  // namespace znbase
namespace protobuf_icl_2fbaseicl_2fencryption_5foptions_2eproto {
static void InitDefaultsEncryptionKeyFiles() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::icl::baseicl::_EncryptionKeyFiles_default_instance_;
    new (ptr) ::znbase::icl::baseicl::EncryptionKeyFiles();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::icl::baseicl::EncryptionKeyFiles::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EncryptionKeyFiles =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEncryptionKeyFiles}, {}};

static void InitDefaultsEncryptionOptions() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::znbase::icl::baseicl::_EncryptionOptions_default_instance_;
    new (ptr) ::znbase::icl::baseicl::EncryptionOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::znbase::icl::baseicl::EncryptionOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EncryptionOptions =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEncryptionOptions}, {
      &protobuf_icl_2fbaseicl_2fencryption_5foptions_2eproto::scc_info_EncryptionKeyFiles.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_EncryptionKeyFiles.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EncryptionOptions.base);
}

}  // namespace protobuf_icl_2fbaseicl_2fencryption_5foptions_2eproto
namespace znbase {
namespace icl {
namespace baseicl {
bool EncryptionKeySource_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void EncryptionKeyFiles::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EncryptionKeyFiles::kCurrentKeyFieldNumber;
const int EncryptionKeyFiles::kOldKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EncryptionKeyFiles::EncryptionKeyFiles()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_icl_2fbaseicl_2fencryption_5foptions_2eproto::scc_info_EncryptionKeyFiles.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.icl.baseicl.EncryptionKeyFiles)
}
EncryptionKeyFiles::EncryptionKeyFiles(const EncryptionKeyFiles& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  current_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.current_key().size() > 0) {
    current_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.current_key_);
  }
  old_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.old_key().size() > 0) {
    old_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.old_key_);
  }
  // @@protoc_insertion_point(copy_constructor:znbase.icl.baseicl.EncryptionKeyFiles)
}

void EncryptionKeyFiles::SharedCtor() {
  current_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  old_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

EncryptionKeyFiles::~EncryptionKeyFiles() {
  // @@protoc_insertion_point(destructor:znbase.icl.baseicl.EncryptionKeyFiles)
  SharedDtor();
}

void EncryptionKeyFiles::SharedDtor() {
  current_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  old_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EncryptionKeyFiles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EncryptionKeyFiles& EncryptionKeyFiles::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_icl_2fbaseicl_2fencryption_5foptions_2eproto::scc_info_EncryptionKeyFiles.base);
  return *internal_default_instance();
}


void EncryptionKeyFiles::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.icl.baseicl.EncryptionKeyFiles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  current_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  old_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool EncryptionKeyFiles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.icl.baseicl.EncryptionKeyFiles)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string current_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_current_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->current_key().data(), static_cast<int>(this->current_key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "znbase.icl.baseicl.EncryptionKeyFiles.current_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string old_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->old_key().data(), static_cast<int>(this->old_key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "znbase.icl.baseicl.EncryptionKeyFiles.old_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.icl.baseicl.EncryptionKeyFiles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.icl.baseicl.EncryptionKeyFiles)
  return false;
#undef DO_
}

void EncryptionKeyFiles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.icl.baseicl.EncryptionKeyFiles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string current_key = 1;
  if (this->current_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->current_key().data(), static_cast<int>(this->current_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "znbase.icl.baseicl.EncryptionKeyFiles.current_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->current_key(), output);
  }

  // string old_key = 2;
  if (this->old_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->old_key().data(), static_cast<int>(this->old_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "znbase.icl.baseicl.EncryptionKeyFiles.old_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->old_key(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:znbase.icl.baseicl.EncryptionKeyFiles)
}

size_t EncryptionKeyFiles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.icl.baseicl.EncryptionKeyFiles)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string current_key = 1;
  if (this->current_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->current_key());
  }

  // string old_key = 2;
  if (this->old_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->old_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncryptionKeyFiles::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EncryptionKeyFiles*>(&from));
}

void EncryptionKeyFiles::MergeFrom(const EncryptionKeyFiles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.icl.baseicl.EncryptionKeyFiles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.current_key().size() > 0) {

    current_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.current_key_);
  }
  if (from.old_key().size() > 0) {

    old_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.old_key_);
  }
}

void EncryptionKeyFiles::CopyFrom(const EncryptionKeyFiles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.icl.baseicl.EncryptionKeyFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptionKeyFiles::IsInitialized() const {
  return true;
}

void EncryptionKeyFiles::Swap(EncryptionKeyFiles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EncryptionKeyFiles::InternalSwap(EncryptionKeyFiles* other) {
  using std::swap;
  current_key_.Swap(&other->current_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  old_key_.Swap(&other->old_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string EncryptionKeyFiles::GetTypeName() const {
  return "znbase.icl.baseicl.EncryptionKeyFiles";
}


// ===================================================================

void EncryptionOptions::InitAsDefaultInstance() {
  ::znbase::icl::baseicl::_EncryptionOptions_default_instance_._instance.get_mutable()->key_files_ = const_cast< ::znbase::icl::baseicl::EncryptionKeyFiles*>(
      ::znbase::icl::baseicl::EncryptionKeyFiles::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EncryptionOptions::kKeySourceFieldNumber;
const int EncryptionOptions::kKeyFilesFieldNumber;
const int EncryptionOptions::kDataKeyRotationPeriodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EncryptionOptions::EncryptionOptions()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_icl_2fbaseicl_2fencryption_5foptions_2eproto::scc_info_EncryptionOptions.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:znbase.icl.baseicl.EncryptionOptions)
}
EncryptionOptions::EncryptionOptions(const EncryptionOptions& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_key_files()) {
    key_files_ = new ::znbase::icl::baseicl::EncryptionKeyFiles(*from.key_files_);
  } else {
    key_files_ = NULL;
  }
  ::memcpy(&data_key_rotation_period_, &from.data_key_rotation_period_,
    static_cast<size_t>(reinterpret_cast<char*>(&key_source_) -
    reinterpret_cast<char*>(&data_key_rotation_period_)) + sizeof(key_source_));
  // @@protoc_insertion_point(copy_constructor:znbase.icl.baseicl.EncryptionOptions)
}

void EncryptionOptions::SharedCtor() {
  ::memset(&key_files_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_source_) -
      reinterpret_cast<char*>(&key_files_)) + sizeof(key_source_));
}

EncryptionOptions::~EncryptionOptions() {
  // @@protoc_insertion_point(destructor:znbase.icl.baseicl.EncryptionOptions)
  SharedDtor();
}

void EncryptionOptions::SharedDtor() {
  if (this != internal_default_instance()) delete key_files_;
}

void EncryptionOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EncryptionOptions& EncryptionOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_icl_2fbaseicl_2fencryption_5foptions_2eproto::scc_info_EncryptionOptions.base);
  return *internal_default_instance();
}


void EncryptionOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:znbase.icl.baseicl.EncryptionOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && key_files_ != NULL) {
    delete key_files_;
  }
  key_files_ = NULL;
  ::memset(&data_key_rotation_period_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_source_) -
      reinterpret_cast<char*>(&data_key_rotation_period_)) + sizeof(key_source_));
  _internal_metadata_.Clear();
}

bool EncryptionOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:znbase.icl.baseicl.EncryptionOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .znbase.icl.baseicl.EncryptionKeySource key_source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_key_source(static_cast< ::znbase::icl::baseicl::EncryptionKeySource >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .znbase.icl.baseicl.EncryptionKeyFiles key_files = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_key_files()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 data_key_rotation_period = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_key_rotation_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:znbase.icl.baseicl.EncryptionOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:znbase.icl.baseicl.EncryptionOptions)
  return false;
#undef DO_
}

void EncryptionOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:znbase.icl.baseicl.EncryptionOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .znbase.icl.baseicl.EncryptionKeySource key_source = 1;
  if (this->key_source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->key_source(), output);
  }

  // .znbase.icl.baseicl.EncryptionKeyFiles key_files = 2;
  if (this->has_key_files()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_key_files(), output);
  }

  // int64 data_key_rotation_period = 3;
  if (this->data_key_rotation_period() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->data_key_rotation_period(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:znbase.icl.baseicl.EncryptionOptions)
}

size_t EncryptionOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:znbase.icl.baseicl.EncryptionOptions)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .znbase.icl.baseicl.EncryptionKeyFiles key_files = 2;
  if (this->has_key_files()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *key_files_);
  }

  // int64 data_key_rotation_period = 3;
  if (this->data_key_rotation_period() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->data_key_rotation_period());
  }

  // .znbase.icl.baseicl.EncryptionKeySource key_source = 1;
  if (this->key_source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->key_source());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncryptionOptions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EncryptionOptions*>(&from));
}

void EncryptionOptions::MergeFrom(const EncryptionOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:znbase.icl.baseicl.EncryptionOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key_files()) {
    mutable_key_files()->::znbase::icl::baseicl::EncryptionKeyFiles::MergeFrom(from.key_files());
  }
  if (from.data_key_rotation_period() != 0) {
    set_data_key_rotation_period(from.data_key_rotation_period());
  }
  if (from.key_source() != 0) {
    set_key_source(from.key_source());
  }
}

void EncryptionOptions::CopyFrom(const EncryptionOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:znbase.icl.baseicl.EncryptionOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptionOptions::IsInitialized() const {
  return true;
}

void EncryptionOptions::Swap(EncryptionOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EncryptionOptions::InternalSwap(EncryptionOptions* other) {
  using std::swap;
  swap(key_files_, other->key_files_);
  swap(data_key_rotation_period_, other->data_key_rotation_period_);
  swap(key_source_, other->key_source_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string EncryptionOptions::GetTypeName() const {
  return "znbase.icl.baseicl.EncryptionOptions";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace baseicl
}  // namespace icl
}  // namespace znbase
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::icl::baseicl::EncryptionKeyFiles* Arena::CreateMaybeMessage< ::znbase::icl::baseicl::EncryptionKeyFiles >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::icl::baseicl::EncryptionKeyFiles >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::znbase::icl::baseicl::EncryptionOptions* Arena::CreateMaybeMessage< ::znbase::icl::baseicl::EncryptionOptions >(Arena* arena) {
  return Arena::CreateInternal< ::znbase::icl::baseicl::EncryptionOptions >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
