/*
 * Copyright 2017 Dgraph Labs, Inc. and Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package y

import (
	"bytes"
	"encoding/binary"

	"github.com/pkg/errors"
	"sort"
)

// ValueStruct represents the value info that can be associated with a key, but also the internal
// Meta field.
type ValueStruct struct {
	Meta      byte
	UserMeta  byte
	ExpiresAt uint64
	Value     []byte

	Version uint64 // This field is not serialized. Only for internal usage.
}

func sizeVarint(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}

// EncodedSize is the size of the ValueStruct when encoded
func (v *ValueStruct) EncodedSize() uint16 {
	sz := len(v.Value) + 2 // meta, usermeta.
	if v.ExpiresAt == 0 {
		return uint16(sz + 1)
	}

	enc := sizeVarint(v.ExpiresAt)
	return uint16(sz + enc)
}

// Decode uses the length of the slice to infer the length of the Value field.
func (v *ValueStruct) Decode(b []byte) {
	v.Meta = b[0]
	v.UserMeta = b[1]
	var sz int
	v.ExpiresAt, sz = binary.Uvarint(b[2:])
	v.Value = b[2+sz:]
}

// Encode expects a slice of length at least v.EncodedSize().
func (v *ValueStruct) Encode(b []byte) {
	b[0] = v.Meta
	b[1] = v.UserMeta
	sz := binary.PutUvarint(b[2:], v.ExpiresAt)
	copy(b[2+sz:], v.Value)
}

// EncodeTo should be kept in sync with the Encode function above. The reason
// this function exists is to avoid creating byte arrays per key-value pair in
// table/builder.go.
func (v *ValueStruct) EncodeTo(buf *bytes.Buffer) {
	buf.WriteByte(v.Meta)
	buf.WriteByte(v.UserMeta)
	var enc [binary.MaxVarintLen64]byte
	sz := binary.PutUvarint(enc[:], v.ExpiresAt)
	buf.Write(enc[:sz])
	buf.Write(v.Value)
}

// Iterator is an interface for a basic iterator.
type Iterator interface {
	Next()
	Prev()
	Seek(key []byte)
	SeekForPrev(key []byte)
	Rewind()
	SeekToFirst()
	SeekToLast()
	Key() []byte
	Value() ValueStruct
	Valid() bool

	// All iterators should be closed so that file garbage collection works.
	Close() error
}

type elem struct {
	itr  Iterator
	nice int
	//reversed bool
}

type elemHeap []*elem

func (eh elemHeap) Len() int            { return len(eh) }
func (eh elemHeap) Swap(i, j int)       { eh[i], eh[j] = eh[j], eh[i] }
func (eh *elemHeap) Push(x interface{}) { *eh = append(*eh, x.(*elem)) }
func (eh *elemHeap) Pop() interface{} {
	// Remove the last element, because Go has already swapped 0th elem <-> last.
	old := *eh
	n := len(old)
	x := old[n-1]
	*eh = old[0 : n-1]
	return x
}
func (eh elemHeap) Less(i, j int) bool {
	reversed := false //TODO TODO 反向遍历也是按照“小->大”顺序排？?
	cmp := CompareKeys(eh[i].itr.Key(), eh[j].itr.Key())
	if cmp < 0 {
		return !reversed
	}
	if cmp > 0 {
		return reversed
	}
	// The keys are equal. In this case, lower nice take precedence. This is important.
	return eh[i].nice < eh[j].nice
}

// MergeIterator merges multiple iterators.
// NOTE: MergeIterator owns the array of iterators and is responsible for closing them.
type MergeIterator struct {
	h      elemHeap
	curKey []byte
	curPos int
	//reversed bool

	all []Iterator
}

// NewMergeIterator returns a new MergeIterator from a list of Iterators.
func NewMergeIterator(iters []Iterator) *MergeIterator {
	m := &MergeIterator{all: iters}
	m.initHeap()
	return m
}

func (s *MergeIterator) storeKey(pos int) {
	s.curPos = pos
	smallest := s.h[pos].itr
	if cap(s.curKey) < len(smallest.Key()) {
		s.curKey = make([]byte, 2*len(smallest.Key()))
	}
	s.curKey = s.curKey[:len(smallest.Key())]
	copy(s.curKey, smallest.Key())
}

//
func (s *MergeIterator) initHeap() {
	s.h = s.h[:0]
	for idx, itr := range s.all {
		itr.SeekToFirst()
		if !itr.Valid() {
			continue
		}
		e := &elem{itr: itr, nice: idx}
		s.h = append(s.h, e)
	}
	//安装key大小排序
	sort.Sort(s.h)
	//从小->大，定位到第一个Valid的iterator
	for idx, e := range s.h {
		it := e.itr
		if it == nil || !it.Valid() {
			continue
		}
		s.curPos = idx
		s.storeKey(idx)
		return
	}
	s.curPos = len(s.h)
}

func (s *MergeIterator) current() Iterator {
	if s == nil {
		return nil
	}
	if len(s.h) == 0 {
		return nil
	}
	if s.curPos < 0 || s.curPos >= len(s.h) {
		return nil
	}
	return s.h[s.curPos].itr
}

// Valid returns whether the MergeIterator is at a valid element.
func (s *MergeIterator) Valid() bool {
	it := s.current()
	if it == nil {
		return false
	}
	return it.Valid()
}

// Key returns the key associated with the current iterator
func (s *MergeIterator) Key() []byte {
	it := s.current()
	if it == nil {
		return nil
	}
	return it.Key()
}

// Value returns the value associated with the iterator.
func (s *MergeIterator) Value() ValueStruct {
	it := s.current()
	if it == nil {
		return ValueStruct{}
	}
	return it.Value()
}

// Next returns the next element. If it is the same as the current key, ignore it.
func (s *MergeIterator) Next() {
	if len(s.h) == 0 {
		return
	}
	if s.curPos >= len(s.h) {
		return
	}
	if s.curPos < 0 {
		s.curPos = 0
	}

	//每个it的初始位置都是NO_VALID，需要next()才能到Valid
	for idx := s.curPos; idx < len(s.h); idx++ {
		it := s.h[idx].itr
		it.Next() //前序遍历，到下一个it时，也需要Next()，才能到Valid
		if it.Valid() {
			s.curPos = idx
			s.storeKey(idx)
			return
		}
	}
	s.curPos = len(s.h)
}
func (s *MergeIterator) Prev() {
	if len(s.h) == 0 {
		return
	}
	if s.curPos < 0 {
		return
	}
	if s.curPos < len(s.h) {
		it := s.h[s.curPos].itr
		it.Prev()
		if it.Valid() && s.curPos == len(s.h)-1 {
			return
		}
	}
	//s.curPos = len(s.h)
	//反向遍历，当前it可以直接调用Prev()

	/*但如果当前it是NO_VALID，而需要向后遍历时，因为可能是Seek直接定位，
	       it并没有移动，还是在head，因此需要先移动都最后再向前遍历（需要优化）
	*/
	for idx := s.curPos - 1; idx >= 0; idx-- {
		it := s.h[idx].itr
		it.SeekToLast()
		it.Prev()
		if it.Valid() {
			s.curPos = idx
			s.storeKey(idx)
			return
		}
	}
	s.curPos = -1
}

// Rewind seeks to first element (or last element for reverse iterator).
func (s *MergeIterator) Rewind() {
	for _, itr := range s.all {
		itr.Rewind()
	}
	s.initHeap()
}

// Seek brings us to element with key >= given key.
func (s *MergeIterator) Seek(key []byte) {
	for idx := 0; idx < len(s.h); idx ++ {
		itr := s.h[idx].itr
		itr.Seek(key)
		if itr.Valid() {
			s.curPos = idx
			s.storeKey(idx)
			break
		}
	}
}
func (s *MergeIterator) SeekForPre(key []byte) {
	for idx := 0; idx < len(s.h); idx ++ {
		itr := s.h[idx].itr
		itr.Seek(key)
		if itr.Valid() {
			s.curPos = idx
			s.storeKey(idx)
			break
		}
	}
}
func (s *MergeIterator) SeekToFirst() {
	for idx := 0; idx < len(s.h); idx ++ {
		itr := s.h[idx].itr
		itr.SeekToFirst()
		if itr.Valid() {
			s.curPos = idx
			s.storeKey(idx)
			break
		}
	}
}
func (s *MergeIterator) SeekToLast() {
	for idx := len(s.h) - 1; idx >= 0; idx -- {
		itr := s.h[idx].itr
		itr.SeekToLast()
		if itr.Valid() {
			s.curPos = idx
			s.storeKey(idx)
			break
		}
	}
}

// Close implements y.Iterator
func (s *MergeIterator) Close() error {
	for _, itr := range s.all {
		if err := itr.Close(); err != nil {
			return errors.Wrap(err, "MergeIterator")
		}
	}
	return nil
}
