// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: icl/baseicl/encryption_options.proto

package baseicl

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type EncryptionKeySource int32

const (
	// Plain key files.
	EncryptionKeySource_KeyFiles EncryptionKeySource = 0
)

var EncryptionKeySource_name = map[int32]string{
	0: "KeyFiles",
}
var EncryptionKeySource_value = map[string]int32{
	"KeyFiles": 0,
}

func (x EncryptionKeySource) String() string {
	return proto.EnumName(EncryptionKeySource_name, int32(x))
}
func (EncryptionKeySource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_encryption_options_a6c6f07c1ed69453, []int{0}
}

// EncryptionKeyFiles is used when plain key files are passed.
type EncryptionKeyFiles struct {
	CurrentKey string `protobuf:"bytes,1,opt,name=current_key,json=currentKey,proto3" json:"current_key,omitempty"`
	OldKey     string `protobuf:"bytes,2,opt,name=old_key,json=oldKey,proto3" json:"old_key,omitempty"`
}

func (m *EncryptionKeyFiles) Reset()         { *m = EncryptionKeyFiles{} }
func (m *EncryptionKeyFiles) String() string { return proto.CompactTextString(m) }
func (*EncryptionKeyFiles) ProtoMessage()    {}
func (*EncryptionKeyFiles) Descriptor() ([]byte, []int) {
	return fileDescriptor_encryption_options_a6c6f07c1ed69453, []int{0}
}
func (m *EncryptionKeyFiles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EncryptionKeyFiles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *EncryptionKeyFiles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncryptionKeyFiles.Merge(dst, src)
}
func (m *EncryptionKeyFiles) XXX_Size() int {
	return m.Size()
}
func (m *EncryptionKeyFiles) XXX_DiscardUnknown() {
	xxx_messageInfo_EncryptionKeyFiles.DiscardUnknown(m)
}

var xxx_messageInfo_EncryptionKeyFiles proto.InternalMessageInfo

// EncryptionOptions defines the per-store encryption options.
type EncryptionOptions struct {
	// The store key source. Defines which fields are useful.
	KeySource EncryptionKeySource `protobuf:"varint,1,opt,name=key_source,json=keySource,proto3,enum=znbase.icl.baseicl.EncryptionKeySource" json:"key_source,omitempty"`
	// Set if key_source == KeyFiles.
	KeyFiles *EncryptionKeyFiles `protobuf:"bytes,2,opt,name=key_files,json=keyFiles,proto3" json:"key_files,omitempty"`
	// Default data key rotation in seconds.
	DataKeyRotationPeriod int64 `protobuf:"varint,3,opt,name=data_key_rotation_period,json=dataKeyRotationPeriod,proto3" json:"data_key_rotation_period,omitempty"`
}

func (m *EncryptionOptions) Reset()         { *m = EncryptionOptions{} }
func (m *EncryptionOptions) String() string { return proto.CompactTextString(m) }
func (*EncryptionOptions) ProtoMessage()    {}
func (*EncryptionOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_encryption_options_a6c6f07c1ed69453, []int{1}
}
func (m *EncryptionOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EncryptionOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *EncryptionOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncryptionOptions.Merge(dst, src)
}
func (m *EncryptionOptions) XXX_Size() int {
	return m.Size()
}
func (m *EncryptionOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_EncryptionOptions.DiscardUnknown(m)
}

var xxx_messageInfo_EncryptionOptions proto.InternalMessageInfo

func init() {
	proto.RegisterType((*EncryptionKeyFiles)(nil), "znbase.icl.baseicl.EncryptionKeyFiles")
	proto.RegisterType((*EncryptionOptions)(nil), "znbase.icl.baseicl.EncryptionOptions")
	proto.RegisterEnum("znbase.icl.baseicl.EncryptionKeySource", EncryptionKeySource_name, EncryptionKeySource_value)
}
func (m *EncryptionKeyFiles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EncryptionKeyFiles) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CurrentKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEncryptionOptions(dAtA, i, uint64(len(m.CurrentKey)))
		i += copy(dAtA[i:], m.CurrentKey)
	}
	if len(m.OldKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEncryptionOptions(dAtA, i, uint64(len(m.OldKey)))
		i += copy(dAtA[i:], m.OldKey)
	}
	return i, nil
}

func (m *EncryptionOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EncryptionOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeySource != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEncryptionOptions(dAtA, i, uint64(m.KeySource))
	}
	if m.KeyFiles != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEncryptionOptions(dAtA, i, uint64(m.KeyFiles.Size()))
		n1, err := m.KeyFiles.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.DataKeyRotationPeriod != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEncryptionOptions(dAtA, i, uint64(m.DataKeyRotationPeriod))
	}
	return i, nil
}

func encodeVarintEncryptionOptions(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EncryptionKeyFiles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CurrentKey)
	if l > 0 {
		n += 1 + l + sovEncryptionOptions(uint64(l))
	}
	l = len(m.OldKey)
	if l > 0 {
		n += 1 + l + sovEncryptionOptions(uint64(l))
	}
	return n
}

func (m *EncryptionOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KeySource != 0 {
		n += 1 + sovEncryptionOptions(uint64(m.KeySource))
	}
	if m.KeyFiles != nil {
		l = m.KeyFiles.Size()
		n += 1 + l + sovEncryptionOptions(uint64(l))
	}
	if m.DataKeyRotationPeriod != 0 {
		n += 1 + sovEncryptionOptions(uint64(m.DataKeyRotationPeriod))
	}
	return n
}

func sovEncryptionOptions(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEncryptionOptions(x uint64) (n int) {
	return sovEncryptionOptions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EncryptionKeyFiles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEncryptionOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EncryptionKeyFiles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EncryptionKeyFiles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptionOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEncryptionOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptionOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEncryptionOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEncryptionOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEncryptionOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EncryptionOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEncryptionOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EncryptionOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EncryptionOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeySource", wireType)
			}
			m.KeySource = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptionOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeySource |= (EncryptionKeySource(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyFiles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptionOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEncryptionOptions
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyFiles == nil {
				m.KeyFiles = &EncryptionKeyFiles{}
			}
			if err := m.KeyFiles.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataKeyRotationPeriod", wireType)
			}
			m.DataKeyRotationPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptionOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataKeyRotationPeriod |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEncryptionOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEncryptionOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEncryptionOptions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEncryptionOptions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEncryptionOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEncryptionOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEncryptionOptions
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEncryptionOptions
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEncryptionOptions(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEncryptionOptions = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEncryptionOptions   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("icl/baseicl/encryption_options.proto", fileDescriptor_encryption_options_a6c6f07c1ed69453)
}

var fileDescriptor_encryption_options_a6c6f07c1ed69453 = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0xb3, 0x16, 0xfa, 0x67, 0x2a, 0xa2, 0x2b, 0x62, 0x4e, 0x6b, 0xa9, 0xa2, 0xd5, 0x43,
	0x84, 0x7a, 0xf0, 0xae, 0xd8, 0x4b, 0x40, 0x25, 0xde, 0xbc, 0x84, 0x34, 0x19, 0x21, 0x24, 0x64,
	0xc3, 0x26, 0x3d, 0xac, 0x9f, 0xc2, 0x8f, 0xd5, 0x63, 0x8f, 0xf5, 0xa6, 0xc9, 0x17, 0x91, 0x1d,
	0x13, 0x45, 0x14, 0x3c, 0x4d, 0xb2, 0xef, 0xf1, 0xde, 0x6f, 0x76, 0xe1, 0x28, 0x0e, 0xd3, 0xf3,
	0x79, 0x50, 0xa0, 0x99, 0x98, 0x85, 0x4a, 0xe7, 0x65, 0x2c, 0x33, 0x5f, 0xd2, 0x28, 0x9c, 0x5c,
	0xc9, 0x52, 0x72, 0xfe, 0x9c, 0x19, 0x8f, 0x13, 0x87, 0xa9, 0xd3, 0x98, 0xc7, 0xb7, 0xc0, 0x6f,
	0xbe, 0xfc, 0x2e, 0xea, 0x59, 0x9c, 0x62, 0xc1, 0x0f, 0x60, 0x18, 0x2e, 0x94, 0xc2, 0xac, 0xf4,
	0x13, 0xd4, 0x36, 0x1b, 0xb1, 0xc9, 0xc0, 0x83, 0xe6, 0xc8, 0x45, 0xcd, 0xf7, 0xa1, 0x27, 0xd3,
	0x88, 0xc4, 0x0d, 0x12, 0xbb, 0x32, 0x8d, 0x5c, 0xd4, 0xe3, 0x57, 0x06, 0x3b, 0xdf, 0x81, 0x77,
	0x9f, 0xfd, 0x7c, 0x06, 0x90, 0xa0, 0xf6, 0x0b, 0xb9, 0x50, 0x21, 0x52, 0xdc, 0xd6, 0xf4, 0xc4,
	0xf9, 0x8d, 0xe3, 0xfc, 0x60, 0x79, 0x20, 0xbb, 0x37, 0x48, 0xda, 0x4f, 0x7e, 0x0d, 0xe6, 0xc7,
	0x7f, 0x32, 0x90, 0x54, 0x3c, 0x9c, 0x1e, 0xff, 0x1b, 0x43, 0x2b, 0x79, 0xfd, 0xa4, 0x5d, 0xee,
	0x12, 0xec, 0x28, 0x28, 0x03, 0x03, 0xef, 0x2b, 0x59, 0x06, 0x74, 0x53, 0x39, 0xaa, 0x58, 0x46,
	0x76, 0x67, 0xc4, 0x26, 0x1d, 0x6f, 0xcf, 0xe8, 0x2e, 0x6a, 0xaf, 0x51, 0xef, 0x49, 0x3c, 0x3b,
	0x84, 0xdd, 0x3f, 0xf8, 0xf8, 0x26, 0xf4, 0xdb, 0x96, 0x6d, 0xeb, 0xea, 0x74, 0xf9, 0x2e, 0xac,
	0x65, 0x25, 0xd8, 0xaa, 0x12, 0x6c, 0x5d, 0x09, 0xf6, 0x56, 0x09, 0xf6, 0x52, 0x0b, 0x6b, 0x55,
	0x0b, 0x6b, 0x5d, 0x0b, 0xeb, 0xb1, 0xd7, 0x50, 0xce, 0xbb, 0xf4, 0x2c, 0x17, 0x1f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x26, 0x51, 0xa7, 0x5e, 0xbe, 0x01, 0x00, 0x00,
}
