# LogicTest: local

statement ok
grant usage on database test to testuser

# local-opt local-parallel-stmts fakedist fakedist-opt fakedist-metadata
# testCase 1 no partition table

statement ok
CREATE TABLE t (
  a INT PRIMARY KEY,
  b INT,
  FAMILY (a),
  FAMILY (b)
)

statement ok
INSERT INTO t VALUES (1,1)

user root

statement ok
CREATE INDEX foo ON t (b) LOCATE IN ("TEST")

statement error duplicate index name: \"foo\"
CREATE INDEX foo ON t (a) LOCATE IN ("TEST")

statement error index \"bar\" contains unknown column \"c\"
CREATE INDEX bar ON t (c) LOCATE IN ("CHINA")

statement error index \"bar\" contains duplicate column \"b\"
CREATE INDEX bar ON t (b, b) LOCATE IN ("TEST")

query TTBITTBBTT colnames
SHOW INDEXES FROM t
----
table_name  index_name  non_unique  seq_in_index  column_name  direction  storing  implicit locality  partitioned
t           primary     false       1             a            ASC        false    false    global    NO
t           foo         true        1             b            ASC        false    false    global    NO
t           foo         true        2             a            ASC        false    true     global    NO

statement ok
INSERT INTO t VALUES (2,1)

statement error pgcode 23505 违反了唯一性约束 "bar"
CREATE UNIQUE INDEX bar ON t (b)

query TTBITTBBTT colnames
SHOW INDEXES FROM t
----
table_name  index_name  non_unique  seq_in_index  column_name  direction  storing  implicit locality  partitioned
t           primary     false       1             a            ASC        false    false    global    NO
t           foo         true        1             b            ASC        false    false    global    NO
t           foo         true        2             a            ASC        false    true     global    NO

# test for DESC index

query TT colnames
SHOW CREATE TABLE t
----
table_name           create_statement
t                    CREATE TABLE t (
                        a INT NOT NULL,
                        b INT NULL,
                        CONSTRAINT "primary" PRIMARY KEY (a ASC),
                        INDEX foo (b ASC) LOCATE IN ("TEST"),
                        FAMILY fam_0_a (a),
                        FAMILY fam_1_b (b)
                    )

query TT colnames
SHOW CREATE TABLE t WITH CACHE
----
table_name           create_statement
t                    CREATE TABLE t (
                        a INT NOT NULL,
                        b INT NULL,
                        CONSTRAINT "primary" PRIMARY KEY (a ASC),
                        INDEX foo (b ASC) LOCATE IN ("TEST"),
                        FAMILY fam_0_a (a),
                        FAMILY fam_1_b (b)
                    )

statement ok
DROP TABLE t

statement ok
CREATE TABLE t (
  a INT PRIMARY KEY,
  b INT,
  c INT
) LOCATE IN ("CHINA")

statement ok
INSERT INTO t VALUES (1,1,1), (2,2,2)

statement ok
CREATE INDEX b_desc ON t (b DESC) LOCATE IN ("TJ")

statement ok
CREATE INDEX b_asc ON t (b ASC, c DESC)

query TTBITTBBTT colnames
SHOW INDEXES FROM t
----
table_name  index_name  non_unique  seq_in_index  column_name  direction  storing  implicit locality  partitioned
t           primary     false       1             a            ASC        false    false    global    NO
t           b_desc      true        1             b            DESC       false    false    global    NO
t           b_desc      true        2             a            ASC        false    true     global    NO
t           b_asc       true        1             b            ASC        false    false    global    NO
t           b_asc       true        2             c            DESC       false    false    global    NO
t           b_asc       true        3             a            ASC        false    true     global    NO

statement error pgcode 42P01 relation "foo" does not exist
CREATE INDEX fail ON foo (b DESC)

statement ok
CREATE VIEW v AS SELECT a,b FROM t

statement error pgcode 42809 "v" is not a table
CREATE INDEX failview ON v (b DESC)


query TT colnames
SHOW CREATE TABLE t
----
table_name           create_statement
t                    CREATE TABLE t (
                       a INT NOT NULL,
                       b INT NULL,
                       c INT NULL,
                       CONSTRAINT "primary" PRIMARY KEY (a ASC),
                       INDEX b_desc (b DESC) LOCATE IN ("TJ"),
                       INDEX b_asc (b ASC, c DESC),
                       FAMILY "primary" (a, b, c)
                    ) LOCATE IN ("CHINA")

query TT colnames
SHOW CREATE TABLE t WITH CACHE
----
table_name           create_statement
t                    CREATE TABLE t (
                       a INT NOT NULL,
                       b INT NULL,
                       c INT NULL,
                       CONSTRAINT "primary" PRIMARY KEY (a ASC) LOCATE IN ("CHINA"),
                       INDEX b_desc (b DESC) LOCATE IN ("TJ"),
                       INDEX b_asc (b ASC, c DESC) LOCATE IN ("CHINA"),
                       FAMILY "primary" (a, b, c)
                    ) LOCATE IN ("CHINA")

statement ok
CREATE TABLE privs (a INT PRIMARY KEY, b INT)

user testuser

statement error user testuser does not have REFERENCES privilege on relation test.public.privs
CREATE INDEX foo ON privs (b)

user root

query TTBITTBBTT colnames
SHOW INDEXES FROM privs
----
table_name  index_name  non_unique  seq_in_index  column_name  direction  storing  implicit locality  partitioned
privs       primary     false       1             a            ASC        false    false    global    NO

statement ok
GRANT REFERENCES ON privs TO testuser

user testuser

statement ok
CREATE INDEX foo ON privs (b)

query TTBITTBBTT colnames
SHOW INDEXES FROM privs
----
table_name  index_name  non_unique  seq_in_index  column_name  direction  storing  implicit locality  partitioned
privs       primary     false       1             a            ASC        false    false    global    NO
privs       foo         true        1             b            ASC        false    false    global    NO
privs       foo         true        2             a            ASC        false    true     global    NO

user root

statement ok
DROP TABLE t, privs CASCADE

#statement ok
#CREATE TABLE t (
#   a INT8 NOT NULL,
#   b INT8 NULL,
#   c INT8 NULL,
#   CONSTRAINT "primary" PRIMARY KEY (a ASC) LOCATE IN ("CHINA"),
#   INDEX b_desc (b DESC) LOCATE IN ("TJ"),
#   INDEX b_asc (b ASC, c DESC) LOCATE IN ("CHINA"),
#   FAMILY "primary" (a, b, c)
#) LOCATE IN ("CHINA")
#
#query TT colnames
#SHOW CREATE TABLE t
#----
#table_name           create_statement
#t                    CREATE TABLE t (
#                       a INT8 NOT NULL,
#                       b INT8 NULL,
#                       c INT8 NULL,
#                       CONSTRAINT "primary" PRIMARY KEY (a ASC) LOCATE IN ("CHINA"),
#                       INDEX b_desc (b DESC) LOCATE IN ("TJ"),
#                       INDEX b_asc (b ASC, c DESC) LOCATE IN ("CHINA"),
#                       FAMILY "primary" (a, b, c)
#                    ) LOCATE IN ("CHINA")
#
#statement ok
#DROP TABLE t

# end testCase 1

# testCase 2 partition list
statement ok
CREATE TABLE ok1 (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES IN (1),
    PARTITION p2 VALUES IN (2) LOCATE IN ("TJ")
)

query TT
SHOW CREATE TABLE ok1
----
ok1  CREATE TABLE ok1 (
     a INT NOT NULL,
     b INT NOT NULL,
     c INT NULL,
     CONSTRAINT "primary" PRIMARY KEY (a ASC, b ASC),
     FAMILY "primary" (a, b, c)
) PARTITION BY LIST (a) (
   PARTITION p1 VALUES IN ((1)),
   PARTITION p2 VALUES IN ((2)) LOCATE IN ("TJ")
)

statement ok
CREATE TABLE ok2 (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES IN ((1)),
    PARTITION p2 VALUES IN (((2)))
)

query TT
SHOW CREATE TABLE ok2
----
ok2  CREATE TABLE ok2 (
     a INT NOT NULL,
     b INT NOT NULL,
     c INT NULL,
     CONSTRAINT "primary" PRIMARY KEY (a ASC, b ASC),
     FAMILY "primary" (a, b, c)
) PARTITION BY LIST (a) (
   PARTITION p1 VALUES IN ((1)),
   PARTITION p2 VALUES IN ((2))
)

statement ok
CREATE TABLE ok3 (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES IN (1),
    PARTITION p2 VALUES IN (DEFAULT)
)

query TT
SHOW CREATE TABLE ok3
----
ok3  CREATE TABLE ok3 (
     a INT NOT NULL,
     b INT NOT NULL,
     c INT NULL,
     CONSTRAINT "primary" PRIMARY KEY (a ASC, b ASC),
     FAMILY "primary" (a, b, c)
) PARTITION BY LIST (a) (
   PARTITION p1 VALUES IN ((1)),
   PARTITION p2 VALUES IN ((DEFAULT))
)

statement ok
CREATE TABLE ok4 (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a, b) (
    PARTITION p1 VALUES IN ((1, 1)),
    PARTITION p2 VALUES IN ((1, DEFAULT)),
    PARTITION p3 VALUES IN ((2, 3)),
    PARTITION p4 VALUES IN ((DEFAULT, DEFAULT))
)

query TT
SHOW CREATE TABLE ok4
----
ok4  CREATE TABLE ok4 (
     a INT NOT NULL,
     b INT NOT NULL,
     c INT NULL,
     CONSTRAINT "primary" PRIMARY KEY (a ASC, b ASC),
     FAMILY "primary" (a, b, c)
) PARTITION BY LIST (a, b) (
   PARTITION p1 VALUES IN ((1, 1)),
   PARTITION p2 VALUES IN ((1, DEFAULT)),
   PARTITION p3 VALUES IN ((2, 3)),
   PARTITION p4 VALUES IN ((DEFAULT, DEFAULT))
)

statement ok
CREATE TABLE ok5 (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES IN (1) PARTITION BY LIST (b) (
        PARTITION p1_1 VALUES IN (1),
        PARTITION p1_2 VALUES IN (DEFAULT)
    ),
    PARTITION p2 VALUES IN (2) PARTITION BY LIST (b) (
        PARTITION p2_1 VALUES IN (3)
    ),
    PARTITION p3 VALUES IN (DEFAULT)
)

query TT
SHOW CREATE TABLE ok5
----
ok5  CREATE TABLE ok5 (
     a INT NOT NULL,
     b INT NOT NULL,
     c INT NULL,
     CONSTRAINT "primary" PRIMARY KEY (a ASC, b ASC),
     FAMILY "primary" (a, b, c)
) PARTITION BY LIST (a) (
   PARTITION p1 VALUES IN ((1)) PARTITION BY LIST (b) (
     PARTITION p1_1 VALUES IN ((1)),
     PARTITION p1_2 VALUES IN ((DEFAULT))
   ),
   PARTITION p2 VALUES IN ((2)) PARTITION BY LIST (b) (
     PARTITION p2_1 VALUES IN ((3))
   ),
   PARTITION p3 VALUES IN ((DEFAULT))
)

statement ok
CREATE TABLE ok6 (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY RANGE (a) (
    PARTITION p1 VALUES FROM (0) TO (1),
    PARTITION p2 VALUES FROM (1) TO (2)
)

query TT
SHOW CREATE TABLE ok6
----
ok6  CREATE TABLE ok6 (
     a INT NOT NULL,
     b INT NOT NULL,
     c INT NULL,
     CONSTRAINT "primary" PRIMARY KEY (a ASC, b ASC),
     FAMILY "primary" (a, b, c)
) PARTITION BY RANGE (a) (
   PARTITION p1 VALUES FROM (0) TO (1),
   PARTITION p2 VALUES FROM (1) TO (2)
)

statement ok
CREATE TABLE ok7 (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY RANGE (a) (
    PARTITION p1 VALUES FROM ((0)) TO (((1)))
)

query TT
SHOW CREATE TABLE ok7
----
ok7  CREATE TABLE ok7 (
     a INT NOT NULL,
     b INT NOT NULL,
     c INT NULL,
     CONSTRAINT "primary" PRIMARY KEY (a ASC, b ASC),
     FAMILY "primary" (a, b, c)
) PARTITION BY RANGE (a) (
   PARTITION p1 VALUES FROM (0) TO (1)
)

statement ok
CREATE TABLE ok8 (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY RANGE (a) (
    PARTITION p1 VALUES FROM (MINVALUE) TO (1),
    PARTITION p2 VALUES FROM (1) TO (2),
    PARTITION p3 VALUES FROM (2) TO (MAXVALUE)
)

query TT
SHOW CREATE TABLE ok8
----
ok8  CREATE TABLE ok8 (
     a INT NOT NULL,
     b INT NOT NULL,
     c INT NULL,
     CONSTRAINT "primary" PRIMARY KEY (a ASC, b ASC),
     FAMILY "primary" (a, b, c)
) PARTITION BY RANGE (a) (
   PARTITION p1 VALUES FROM (MINVALUE) TO (1),
   PARTITION p2 VALUES FROM (1) TO (2),
   PARTITION p3 VALUES FROM (2) TO (MAXVALUE)
)

statement ok
CREATE TABLE ok9 (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY RANGE (a, b) (
    PARTITION p1 VALUES FROM (MINVALUE, MINVALUE) TO (1, MAXVALUE),
    PARTITION p2 VALUES FROM (1, MAXVALUE) TO (3, MINVALUE),
    PARTITION p3 VALUES FROM (3, MINVALUE) TO (3, MAXVALUE),
    PARTITION p4 VALUES FROM (3, MAXVALUE) TO (MAXVALUE, MAXVALUE)
)

query TT
SHOW CREATE TABLE ok9
----
ok9  CREATE TABLE ok9 (
     a INT NOT NULL,
     b INT NOT NULL,
     c INT NULL,
     CONSTRAINT "primary" PRIMARY KEY (a ASC, b ASC),
     FAMILY "primary" (a, b, c)
) PARTITION BY RANGE (a, b) (
   PARTITION p1 VALUES FROM (MINVALUE, MINVALUE) TO (1, MAXVALUE),
   PARTITION p2 VALUES FROM (1, MAXVALUE) TO (3, MINVALUE),
   PARTITION p3 VALUES FROM (3, MINVALUE) TO (3, MAXVALUE),
   PARTITION p4 VALUES FROM (3, MAXVALUE) TO (MAXVALUE, MAXVALUE)
)

statement ok
CREATE TABLE ok10 (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY RANGE (a, b) (
    PARTITION p1 VALUES FROM (MINVALUE, MINVALUE) TO (1, 1),
    PARTITION p2 VALUES FROM (1, 1) TO (1, MAXVALUE),
    PARTITION p3 VALUES FROM (1, MAXVALUE) TO (2, MAXVALUE),
    PARTITION p4 VALUES FROM (2, MAXVALUE) TO (3, 4),
    PARTITION p5 VALUES FROM (3, 4) TO (MAXVALUE, MAXVALUE)
)

query TT
SHOW CREATE TABLE ok10
----
ok10  CREATE TABLE ok10 (
      a INT NOT NULL,
      b INT NOT NULL,
      c INT NULL,
      CONSTRAINT "primary" PRIMARY KEY (a ASC, b ASC),
      FAMILY "primary" (a, b, c)
) PARTITION BY RANGE (a, b) (
   PARTITION p1 VALUES FROM (MINVALUE, MINVALUE) TO (1, 1),
   PARTITION p2 VALUES FROM (1, 1) TO (1, MAXVALUE),
   PARTITION p3 VALUES FROM (1, MAXVALUE) TO (2, MAXVALUE),
   PARTITION p4 VALUES FROM (2, MAXVALUE) TO (3, 4),
   PARTITION p5 VALUES FROM (3, 4) TO (MAXVALUE, MAXVALUE)
)

statement ok
CREATE TABLE ok11 (a INT, b INT, c INT, PRIMARY KEY (a, b, c)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES IN (1) PARTITION BY LIST (b) (
        PARTITION p1_1 VALUES IN (3) PARTITION BY LIST (c) (
            PARTITION p1_1_1 VALUES IN (8)
        ),
        PARTITION p1_2 VALUES IN (4)
    ),
    PARTITION p2 VALUES IN (6) PARTITION BY RANGE (b) (
        PARTITION p2_1 VALUES FROM (7) TO (8)
    )
)

query TT
SHOW CREATE TABLE ok11
----
ok11  CREATE TABLE ok11 (
      a INT NOT NULL,
      b INT NOT NULL,
      c INT NOT NULL,
      CONSTRAINT "primary" PRIMARY KEY (a ASC, b ASC, c ASC),
      FAMILY "primary" (a, b, c)
) PARTITION BY LIST (a) (
   PARTITION p1 VALUES IN ((1)) PARTITION BY LIST (b) (
     PARTITION p1_1 VALUES IN ((3)) PARTITION BY LIST (c) (
       PARTITION p1_1_1 VALUES IN ((8))
     ),
     PARTITION p1_2 VALUES IN ((4))
   ),
   PARTITION p2 VALUES IN ((6)) PARTITION BY RANGE (b) (
     PARTITION p2_1 VALUES FROM (7) TO (8)
   )
)

statement ok
drop table ok11

statement error relation "ok11" does not exist
show create table ok11;

statement error relation "ok11" does not exist
show create table ok11 with cache;

statement ok
CREATE TABLE IF NOT EXISTS ok12 (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION pu VALUES IN (NULL),
    PARTITION p1 VALUES IN (1),
    PARTITION p2 VALUES IN (2)
)


query TT
SHOW CREATE TABLE ok12
----
ok12  CREATE TABLE ok12 (
      a INT NOT NULL,
      b INT NOT NULL,
      c INT NULL,
      CONSTRAINT "primary" PRIMARY KEY (a ASC, b ASC),
      FAMILY "primary" (a, b, c)
) PARTITION BY LIST (a) (
   PARTITION pu VALUES IN ((NULL)),
   PARTITION p1 VALUES IN ((1)),
   PARTITION p2 VALUES IN ((2))
)

statement ok
CREATE TABLE ok13 (a INT)

statement ok
INSERT INTO ok13 VALUES (2),(1),(-99),(3)

statement ok
CREATE VIEW vok13 AS SELECT * FROM ok13 ORDER BY a

query I
SELECT * FROM vok13
----
-99
 1
 2
 3