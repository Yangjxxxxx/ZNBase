# LogicTest: local-opt fakedist-opt

statement ok
CREATE TABLE x(a) AS SELECT generate_series(1, 3)

statement ok
CREATE TABLE y(b) AS SELECT generate_series(2, 4)

# Referencing a CTE multiple times.
query II rowsort
WITH t AS (SELECT b FROM y) SELECT * FROM t JOIN t AS q ON true
----
2  2
2  3
2  4
3  2
3  3
3  4
4  2
4  3
4  4

query II rowsort
WITH
    one AS (SELECT a AS u FROM x),
    two AS (SELECT b AS v FROM (SELECT b FROM y UNION ALL SELECT u FROM one))
SELECT
    *
FROM
    one JOIN two ON u = v
----
1  1
2  2
3  3
2  2
3  3

# Mutation CTEs that aren't referenced elsewhere in the query.
statement ok
CREATE TABLE z (c INT PRIMARY KEY);

query I
WITH foo AS (INSERT INTO z VALUES (10) RETURNING 1) SELECT 2
----
2

query I
SELECT * FROM z
----
10

query I
WITH foo AS (UPDATE z SET c = 20 RETURNING 1) SELECT 3
----
3

query I
SELECT * FROM z
----
20

query I
WITH foo AS (DELETE FROM z RETURNING 1) SELECT 4
----
4

query I
SELECT count(*) FROM z
----
0

# WITH and prepared statements.

statement ok
CREATE TABLE engineer (
    fellow BOOL NOT NULL, id INT4 NOT NULL, companyname VARCHAR(255) NOT NULL,
    PRIMARY KEY (id, companyname)
)

statement ok
PREPARE x (INT4, VARCHAR, INT4, VARCHAR) AS
  WITH ht_engineer (id, companyname) AS (
    SELECT id, companyname FROM (VALUES ($1, $2), ($3, $4)) AS ht (id, companyname)
  )
DELETE FROM engineer WHERE (id, companyname) IN (SELECT id, companyname FROM ht_engineer)

statement ok
EXECUTE x (1, 'fo', 2, 'bar')

statement ok
PREPARE z(int) AS WITH foo AS (SELECT * FROM x WHERE a = $1) SELECT * FROM foo

query I
EXECUTE z(1)
----
1

query I
EXECUTE z(2)
----
2

query I
EXECUTE z(3)
----
3

# WITH containing a placeholder that isn't referenced.

statement ok
PREPARE z2(int) AS WITH foo AS (SELECT * FROM x WHERE a = $1) SELECT * FROM x ORDER BY a

query I
EXECUTE z2(1)
----
1
2
3

statement ok
PREPARE z3(int) AS WITH foo AS (SELECT $1) SELECT * FROM foo

query I
EXECUTE z3(3)
----
3

statement ok
PREPARE z4(int) AS WITH foo AS (SELECT $1), bar AS (SELECT * FROM foo) SELECT * FROM bar

query I
EXECUTE z4(3)
----
3

statement ok
PREPARE z5(int, int) AS WITH foo AS (SELECT $1), bar AS (SELECT $2) (SELECT * FROM foo) UNION ALL (SELECT * FROM bar)

query I rowsort
EXECUTE z5(3, 5)
----
3
5

# Recursive CTE example from postgres docs.
query T
WITH RECURSIVE t(n) AS (
    VALUES (1)
  UNION ALL
    SELECT n+1 FROM t WHERE n < 100
)
SELECT sum(n) FROM t
----
5050

# Test where initial query has duplicate columns.
query II
WITH RECURSIVE cte(a, b) AS (
    SELECT 0, 0
  UNION ALL
    SELECT a+1, b+10 FROM cte WHERE a < 5
) SELECT * FROM cte;
----
0  0
1  10
2  20
3  30
4  40
5  50

# Test where recursive query has duplicate columns.
query II
WITH RECURSIVE cte(a, b) AS (
    SELECT 0, 1
  UNION ALL
    SELECT a+1, a+1 FROM cte WHERE a < 5
) SELECT * FROM cte;
----
0  1
1  1
2  2
3  3
4  4
5  5

# Recursive CTE examples1  http://www.postgresqltutorial.com/postgresql-recursive-query/
statement ok
CREATE TABLE employees (
   employee_id serial PRIMARY KEY,
   full_name VARCHAR NOT NULL,
   manager_id INT
);

statement ok
INSERT INTO employees (
   employee_id,
   full_name,
   manager_id
)
VALUES
   (1, 'Michael', NULL),
   (2, 'Megan', 1),
   (3, 'Sarah', 1),
   (4, 'Zoe', 1),
   (5, 'Tim', 1),
   (6, 'Bella', 2),
   (7, 'Ryan', 2),
   (8, 'Max', 2),
   (9, 'Benjamin', 2),
   (10, 'Carolyn', 3),
   (11, 'Nicola', 3),
   (12, 'Alexandra', 3),
   (13, 'Dominic', 3),
   (14, 'Leonard', 4),
   (15, 'Eric', 4),
   (16, 'Piers', 7),
   (17, 'Ryan', 7),
   (18, 'Frank', 8),
   (19, 'Nathan', 8),
   (20, 'Kevin', 8);

query IIT
WITH RECURSIVE subordinates AS (
   SELECT
      employee_id,
      manager_id,
      full_name
   FROM
      employees
   WHERE
      employee_id = 2
   UNION
      SELECT
         e.employee_id,
         e.manager_id,
         e.full_name
      FROM
         employees e
      INNER JOIN subordinates s ON s.employee_id = e.manager_id
) SELECT
   *
FROM
   subordinates;
----
 2  1  Megan
 6  2  Bella
 7  2  Ryan
 8  2  Max
 9  2  Benjamin
16  7  Piers
17  7  Ryan
18  8  Frank
19  8  Nathan
20  8  Kevin

# Recursive CTE examples2
statement ok
CREATE TABLE COMPANY (
	id INT ,
	name VARCHAR (60),
	age INT ,
	address VARCHAR (30),
	salary INT
);

statement ok
INSERT INTO COMPANY (
  id,
  name,
  age,
  address,
  salary
)
VALUES
  (1,'Paul',32,'California',20000),
  (2,'Allen',25, 'Texas',15000),
  (3,'Teddy',23,'Norway',20000),
  (4,'Mark',25,'Rich-Mond',65000),
  (5,'David',27,'Texas',85000),
  (6,'Kim',22,'South-Hall',45000),
  (7,'James',24,'Houston',10000);

statement ok
CREATE TABLE COMPANY1(
   ID INT PRIMARY KEY     NOT NULL,
   NAME           TEXT    NOT NULL,
   AGE            INT     NOT NULL,
   ADDRESS        CHAR(50),
   SALARY         REAL
);

statement ok
WITH moved_rows AS (
    DELETE FROM COMPANY
    WHERE
        SALARY >= 30000
    RETURNING *
)INSERT INTO COMPANY1 (SELECT * FROM moved_rows);

query ITITI
SELECT * FROM COMPANY ORDER BY id;
----
1  Paul   32  California  20000
2  Allen  25  Texas       15000
3  Teddy  23  Norway      20000
7  James  24  Houston     10000

query ITITR
SELECT * FROM COMPANY1 ORDER BY ID;
----
4  Mark   25  Rich-Mond   65000
5  David  27  Texas       85000
6  Kim    22  South-Hall  45000
