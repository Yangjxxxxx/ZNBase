exec-ddl
CREATE TABLE abc (
    a INT NOT NULL,
    b TEXT DEFAULT ('foo'),
    c FLOAT AS (a::float) STORED
)
----
TABLE abc
 ├── a int not null
 ├── b string
 ├── c float
 ├── rowid int not null (hidden)
 └── INDEX primary
      └── rowid int not null (hidden)

exec-ddl
ALTER TABLE abc INJECT STATISTICS '[
  {
    "columns": ["a"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 2000
  },
  {
    "columns": ["b"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 10
  }
]'
----

exec-ddl
CREATE TABLE xyz (
    x TEXT PRIMARY KEY,
    y INT8 NOT NULL,
    z FLOAT8
)
----
TABLE xyz
 ├── x string not null
 ├── y int not null
 ├── z float
 └── INDEX primary
      └── x string not null

# Statistics should be derived from input columns and transferred to RETURNING
# columns.
build
SELECT *
FROM
[
	INSERT INTO xyz (x, y)
	SELECT b, a FROM abc WHERE b='foo'
	ON CONFLICT (x) DO UPDATE SET y=5
	RETURNING *
]
WHERE y=10
----
select
 ├── columns: x:1(string!null) y:2(int!null) z:3(float)
 ├── side-effects, mutations
 ├── stats: [rows=1, distinct(2)=1, null(2)=0]
 ├── fd: ()-->(2)
 ├── upsert xyz
 │    ├── columns: x:1(string!null) y:2(int!null) z:3(float)
 │    ├── canary column: 11
 │    ├── fetch columns: x:11(string) y:12(int) z:13(float)
 │    ├── insert-mapping:
 │    │    ├──  b:8 => x:1
 │    │    ├──  a:9 => y:2
 │    │    └──  column10:10 => z:3
 │    ├── update-mapping:
 │    │    └──  upsert_y:16 => y:2
 │    ├── return-mapping:
 │    │    ├──  upsert_x:15 => x:1
 │    │    ├──  upsert_y:16 => y:2
 │    │    └──  upsert_z:17 => z:3
 │    ├── side-effects, mutations
 │    ├── stats: [rows=200, distinct(1)=181.351171, null(1)=0, distinct(2)=200, null(2)=0]
 │    └── project
 │         ├── columns: upsert_x:15(string) upsert_y:16(int) upsert_z:17(float) b:8(string!null) a:9(int!null) column10:10(float) x:11(string) y:12(int) z:13(float) column14:14(int!null)
 │         ├── stats: [rows=200, distinct(15)=181.351171, null(15)=0, distinct(16)=200, null(16)=0]
 │         ├── fd: ()-->(8,10,14), (11)-->(12,13), (11)-->(15), (9,11)-->(16)
 │         ├── project
 │         │    ├── columns: column14:14(int!null) b:8(string!null) a:9(int!null) column10:10(float) x:11(string) y:12(int) z:13(float)
 │         │    ├── stats: [rows=200, distinct(8,11)=181.351171, null(8,11)=0, distinct(9,11,14)=200, null(9,11,14)=0]
 │         │    ├── fd: ()-->(8,10,14), (11)-->(12,13)
 │         │    ├── left-join
 │         │    │    ├── columns: b:8(string!null) a:9(int!null) column10:10(float) x:11(string) y:12(int) z:13(float)
 │         │    │    ├── can parallel: true
 │         │    │    ├── stats: [rows=200, distinct(11)=1, null(11)=0, distinct(8,11)=181.351171, null(8,11)=0, distinct(9,11)=200, null(9,11)=0]
 │         │    │    ├── fd: ()-->(8,10), (11)-->(12,13)
 │         │    │    ├── project
 │         │    │    │    ├── columns: column10:10(float) b:8(string!null) a:9(int!null)
 │         │    │    │    ├── stats: [rows=200, distinct(8)=1, null(8)=0, distinct(9)=200, null(9)=0]
 │         │    │    │    ├── fd: ()-->(8,10)
 │         │    │    │    ├── project
 │         │    │    │    │    ├── columns: b:8(string!null) a:9(int!null)
 │         │    │    │    │    ├── stats: [rows=200, distinct(8)=1, null(8)=0, distinct(9)=200, null(9)=0]
 │         │    │    │    │    ├── fd: ()-->(8)
 │         │    │    │    │    ├── select
 │         │    │    │    │    │    ├── columns: abc.a:4(int!null) abc.b:5(string!null) c:6(float) rowid:7(int!null)
 │         │    │    │    │    │    ├── stats: [rows=200, distinct(4)=200, null(4)=0, distinct(5)=1, null(5)=0]
 │         │    │    │    │    │    ├── key: (7)
 │         │    │    │    │    │    ├── fd: ()-->(5), (7)-->(4,6)
 │         │    │    │    │    │    ├── scan abc
 │         │    │    │    │    │    │    ├── columns: abc.a:4(int!null) abc.b:5(string) c:6(float) rowid:7(int!null)
 │         │    │    │    │    │    │    ├── stats: [rows=2000, distinct(4)=2000, null(4)=0, distinct(5)=10, null(5)=0, distinct(7)=2000, null(7)=0]
 │         │    │    │    │    │    │    ├── key: (7)
 │         │    │    │    │    │    │    └── fd: (7)-->(4-6)
 │         │    │    │    │    │    └── filters
 │         │    │    │    │    │         └── abc.b = 'foo' [type=bool, outer=(5), constraints=(/5: [/'foo' - /'foo']; tight), fd=()-->(5)]
 │         │    │    │    │    └── projections
 │         │    │    │    │         ├── abc.b::STRING [type=string, outer=(5)]
 │         │    │    │    │         └── abc.a::INT8 [type=int, outer=(4)]
 │         │    │    │    └── projections
 │         │    │    │         └── NULL::FLOAT8 [type=float]
 │         │    │    ├── scan xyz
 │         │    │    │    ├── columns: x:11(string!null) y:12(int!null) z:13(float)
 │         │    │    │    ├── stats: [rows=1000, distinct(11)=1000, null(11)=0]
 │         │    │    │    ├── key: (11)
 │         │    │    │    └── fd: (11)-->(12,13)
 │         │    │    └── filters
 │         │    │         └── b = x [type=bool, outer=(8,11), constraints=(/8: (/NULL - ]; /11: (/NULL - ]), fd=(8)==(11), (11)==(8)]
 │         │    └── projections
 │         │         └── const: 5 [type=int]
 │         └── projections
 │              ├── CASE WHEN x IS NULL THEN b ELSE x END [type=string, outer=(8,11)]
 │              ├── CASE WHEN x IS NULL THEN a ELSE column14 END [type=int, outer=(9,11,14)]
 │              └── CASE WHEN x IS NULL THEN column10 ELSE z END [type=float, outer=(10,11,13)]
 └── filters
      └── y = 10 [type=bool, outer=(2), constraints=(/2: [/10 - /10]; tight), fd=()-->(2)]

# Cardinality is zero.
build
UPSERT INTO xyz SELECT b, a FROM abc WHERE False RETURNING *
----
upsert xyz
 ├── columns: x:1(string!null) y:2(int!null) z:3(float)
 ├── upsert-mapping:
 │    ├──  b:8 => x:1
 │    ├──  a:9 => y:2
 │    └──  column10:10 => z:3
 ├── cardinality: [0 - 0]
 ├── side-effects, mutations
 ├── stats: [rows=0]
 ├── fd: ()-->(3)
 └── project
      ├── columns: column10:10(float) b:8(string) a:9(int!null)
      ├── cardinality: [0 - 0]
      ├── stats: [rows=0]
      ├── fd: ()-->(10)
      ├── project
      │    ├── columns: b:8(string) a:9(int!null)
      │    ├── cardinality: [0 - 0]
      │    ├── stats: [rows=0]
      │    ├── select
      │    │    ├── columns: abc.a:4(int!null) abc.b:5(string) c:6(float) rowid:7(int!null)
      │    │    ├── cardinality: [0 - 0]
      │    │    ├── stats: [rows=0]
      │    │    ├── key: (7)
      │    │    ├── fd: (7)-->(4-6)
      │    │    ├── scan abc
      │    │    │    ├── columns: abc.a:4(int!null) abc.b:5(string) c:6(float) rowid:7(int!null)
      │    │    │    ├── stats: [rows=2000]
      │    │    │    ├── key: (7)
      │    │    │    └── fd: (7)-->(4-6)
      │    │    └── filters
      │    │         └── false [type=bool]
      │    └── projections
      │         ├── abc.b::STRING [type=string, outer=(5)]
      │         └── abc.a::INT8 [type=int, outer=(4)]
      └── projections
           └── NULL::FLOAT8 [type=float]
